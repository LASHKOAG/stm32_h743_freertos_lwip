
H743_FreeRTOS_TCP_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012340  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ba0  080125e0  080125e0  000225e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015180  08015180  00031924  2**0
                  CONTENTS
  4 .ARM          00000008  08015180  08015180  00025180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015188  08015188  00031924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015188  08015188  00025188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801518c  0801518c  0002518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  24000000  08015190  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000094  08015224  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000f4  08015284  000300f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .RxArraySection 000017d0  24000154  080152e4  00030154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00003360  24001924  08016ab4  00031924  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  24004c84  08016ab4  00034c84  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00031924  2**0
                  CONTENTS, READONLY
 15 .debug_info   000421e6  00000000  00000000  00031952  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00006997  00000000  00000000  00073b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001d00  00000000  00000000  0007a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001bd8  00000000  00000000  0007c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00043c61  00000000  00000000  0007dda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0002a14b  00000000  00000000  000c1a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00179107  00000000  00000000  000ebb54  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  00264c5b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00007e7c  00000000  00000000  00264cd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001924 	.word	0x24001924
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080125c8 	.word	0x080125c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001928 	.word	0x24001928
 80002dc:	080125c8 	.word	0x080125c8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000688:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <SCB_EnableICache+0x3c>)
 800068e:	2200      	movs	r2, #0
 8000690:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000694:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000698:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <SCB_EnableICache+0x3c>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <SCB_EnableICache+0x3c>)
 80006a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006ac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <SCB_EnableDCache+0x7c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006ce:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <SCB_EnableDCache+0x7c>)
 80006d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006d8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	0b5b      	lsrs	r3, r3, #13
 80006de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006e2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	08db      	lsrs	r3, r3, #3
 80006e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006ec:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	015a      	lsls	r2, r3, #5
 80006f2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006f6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006fc:	490f      	ldr	r1, [pc, #60]	; (800073c <SCB_EnableDCache+0x7c>)
 80006fe:	4313      	orrs	r3, r2
 8000700:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1e5a      	subs	r2, r3, #1
 8000708:	60ba      	str	r2, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1ef      	bne.n	80006ee <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	60fa      	str	r2, [r7, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1e5      	bne.n	80006e4 <SCB_EnableDCache+0x24>
 8000718:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <SCB_EnableDCache+0x7c>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <SCB_EnableDCache+0x7c>)
 8000722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000726:	6153      	str	r3, [r2, #20]
 8000728:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800072c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000744:	f000 fa04 	bl	8000b50 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000748:	f7ff ff9a 	bl	8000680 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800074c:	f7ff ffb8 	bl	80006c0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fe18 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f810 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 f90a 	bl	8000970 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800075c:	f000 f8bc 	bl	80008d8 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000760:	f006 fd06 	bl	8007170 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f000 fe68 	bl	800143c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    MX_LWIP_Process();
 800076c:	f006 fe2c 	bl	80073c8 <MX_LWIP_Process>
	    HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fe63 	bl	800143c <HAL_Delay>
	    MX_LWIP_Process();
 8000776:	e7f9      	b.n	800076c <main+0x2c>

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0cc      	sub	sp, #304	; 0x130
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000782:	224c      	movs	r2, #76	; 0x4c
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f010 fff6 	bl	8011778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000790:	2220      	movs	r2, #32
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f010 ffef 	bl	8011778 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4618      	mov	r0, r3
 80007a0:	23bc      	movs	r3, #188	; 0xbc
 80007a2:	461a      	mov	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f010 ffe7 	bl	8011778 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007aa:	2002      	movs	r0, #2
 80007ac:	f002 feb0 	bl	8003510 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	4b46      	ldr	r3, [pc, #280]	; (80008d0 <SystemClock_Config+0x158>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a45      	ldr	r2, [pc, #276]	; (80008d0 <SystemClock_Config+0x158>)
 80007bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <SystemClock_Config+0x158>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <SystemClock_Config+0x15c>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	4a40      	ldr	r2, [pc, #256]	; (80008d4 <SystemClock_Config+0x15c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007da:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <SystemClock_Config+0x15c>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	f003 0201 	and.w	r2, r3, #1
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ea:	bf00      	nop
 80007ec:	4b38      	ldr	r3, [pc, #224]	; (80008d0 <SystemClock_Config+0x158>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f8:	d1f8      	bne.n	80007ec <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000804:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 800081a:	2378      	movs	r3, #120	; 0x78
 800081c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000832:	230c      	movs	r3, #12
 8000834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fe9b 	bl	8003584 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000854:	f000 f9d8 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	233f      	movs	r3, #63	; 0x3f
 800085a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800086a:	2308      	movs	r3, #8
 800086c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000880:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800088e:	2104      	movs	r1, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f003 fa87 	bl	8003da4 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800089c:	f000 f9b4 	bl	8000c08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2202      	movs	r2, #2
 80008a6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2200      	movs	r2, #0
 80008ae:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fe3b 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 80008c0:	f000 f9a2 	bl	8000c08 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	58024800 	.word	0x58024800
 80008d4:	58000400 	.word	0x58000400

080008d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_USART3_UART_Init+0x90>)
 80008de:	4a23      	ldr	r2, [pc, #140]	; (800096c <MX_USART3_UART_Init+0x94>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_USART3_UART_Init+0x90>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_USART3_UART_Init+0x90>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART3_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_USART3_UART_Init+0x90>)
 8000922:	f005 fb9d 	bl	8006060 <HAL_UART_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800092c:	f000 f96c 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000930:	2100      	movs	r1, #0
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_USART3_UART_Init+0x90>)
 8000934:	f006 fb37 	bl	8006fa6 <HAL_UARTEx_SetTxFifoThreshold>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800093e:	f000 f963 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	4808      	ldr	r0, [pc, #32]	; (8000968 <MX_USART3_UART_Init+0x90>)
 8000946:	f006 fb6c 	bl	8007022 <HAL_UARTEx_SetRxFifoThreshold>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000950:	f000 f95a 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_USART3_UART_Init+0x90>)
 8000956:	f006 faed 	bl	8006f34 <HAL_UARTEx_DisableFifoMode>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 f952 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	24001ac0 	.word	0x24001ac0
 800096c:	40004800 	.word	0x40004800

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b6a      	ldr	r3, [pc, #424]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a68      	ldr	r2, [pc, #416]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b66      	ldr	r3, [pc, #408]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
 80009a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a4:	4b62      	ldr	r3, [pc, #392]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	4a61      	ldr	r2, [pc, #388]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b4:	4b5e      	ldr	r3, [pc, #376]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b5b      	ldr	r3, [pc, #364]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a59      	ldr	r2, [pc, #356]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b57      	ldr	r3, [pc, #348]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	4a52      	ldr	r2, [pc, #328]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f0:	4b4f      	ldr	r3, [pc, #316]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	4a4a      	ldr	r2, [pc, #296]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1c:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	4a43      	ldr	r2, [pc, #268]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2c:	4b40      	ldr	r3, [pc, #256]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	4a3b      	ldr	r2, [pc, #236]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <MX_GPIO_Init+0x1c0>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	f003 0310 	and.w	r3, r3, #16
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5e:	4835      	ldr	r0, [pc, #212]	; (8000b34 <MX_GPIO_Init+0x1c4>)
 8000a60:	f002 fd3c 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6a:	4833      	ldr	r0, [pc, #204]	; (8000b38 <MX_GPIO_Init+0x1c8>)
 8000a6c:	f002 fd36 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2102      	movs	r1, #2
 8000a74:	4831      	ldr	r0, [pc, #196]	; (8000b3c <MX_GPIO_Init+0x1cc>)
 8000a76:	f002 fd31 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	482c      	ldr	r0, [pc, #176]	; (8000b40 <MX_GPIO_Init+0x1d0>)
 8000a90:	f002 fb74 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4821      	ldr	r0, [pc, #132]	; (8000b34 <MX_GPIO_Init+0x1c4>)
 8000aae:	f002 fb65 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481b      	ldr	r0, [pc, #108]	; (8000b38 <MX_GPIO_Init+0x1c8>)
 8000acc:	f002 fb56 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_GPIO_Init+0x1d4>)
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4819      	ldr	r0, [pc, #100]	; (8000b48 <MX_GPIO_Init+0x1d8>)
 8000ae4:	f002 fb4a 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ae8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000afa:	230a      	movs	r3, #10
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <MX_GPIO_Init+0x1dc>)
 8000b06:	f002 fb39 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4806      	ldr	r0, [pc, #24]	; (8000b3c <MX_GPIO_Init+0x1cc>)
 8000b22:	f002 fb2b 	bl	800317c <HAL_GPIO_Init>

}
 8000b26:	bf00      	nop
 8000b28:	3730      	adds	r7, #48	; 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58020400 	.word	0x58020400
 8000b38:	58020c00 	.word	0x58020c00
 8000b3c:	58021000 	.word	0x58021000
 8000b40:	58020800 	.word	0x58020800
 8000b44:	11110000 	.word	0x11110000
 8000b48:	58021800 	.word	0x58021800
 8000b4c:	58020000 	.word	0x58020000

08000b50 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b62:	f000 fd8d 	bl	8001680 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b66:	2301      	movs	r3, #1
 8000b68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MPU_Config+0x8c>)
 8000b70:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b72:	2307      	movs	r3, #7
 8000b74:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b92:	463b      	mov	r3, r7
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fda7 	bl	80016e8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MPU_Config+0x90>)
 8000ba4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000ba6:	230d      	movs	r3, #13
 8000ba8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fd8d 	bl	80016e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bce:	2004      	movs	r0, #4
 8000bd0:	f000 fd6c 	bl	80016ac <HAL_MPU_Enable>

}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	30040000 	.word	0x30040000
 8000be0:	30044000 	.word	0x30044000

08000be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf6:	f000 fc01 	bl	80013fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40010000 	.word	0x40010000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_MspInit+0x30>)
 8000c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c24:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x30>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x30>)
 8000c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	58024400 	.word	0x58024400

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1a      	ldr	r2, [pc, #104]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12e      	bne.n	8000ccc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_UART_MspInit+0x8c>)
 8000c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c74:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <HAL_UART_MspInit+0x8c>)
 8000c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_UART_MspInit+0x8c>)
 8000c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_UART_MspInit+0x8c>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_UART_MspInit+0x8c>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_UART_MspInit+0x8c>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_UART_MspInit+0x90>)
 8000cc8:	f002 fa58 	bl	800317c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020c00 	.word	0x58020c00

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2019      	movs	r0, #25
 8000cf6:	f000 fc9b 	bl	8001630 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f000 fcb2 	bl	8001664 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d06:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d1e:	f107 020c 	add.w	r2, r7, #12
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 fbbf 	bl	80044ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d2e:	f003 fba7 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 8000d32:	4603      	mov	r3, r0
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <HAL_InitTick+0xac>)
 8000d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d40:	0c9b      	lsrs	r3, r3, #18
 8000d42:	3b01      	subs	r3, #1
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0xb0>)
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <HAL_InitTick+0xb4>)
 8000d4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_InitTick+0xb0>)
 8000d4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d52:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_InitTick+0xb0>)
 8000d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d58:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_InitTick+0xb0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_InitTick+0xb0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d66:	480a      	ldr	r0, [pc, #40]	; (8000d90 <HAL_InitTick+0xb0>)
 8000d68:	f004 fee2 	bl	8005b30 <HAL_TIM_Base_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <HAL_InitTick+0xb0>)
 8000d74:	f004 ff3e 	bl	8005bf4 <HAL_TIM_Base_Start_IT>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	e000      	b.n	8000d7e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3738      	adds	r7, #56	; 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	431bde83 	.word	0x431bde83
 8000d90:	24001b4c 	.word	0x24001b4c
 8000d94:	40010000 	.word	0x40010000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <TIM1_UP_IRQHandler+0x10>)
 8000dfe:	f004 ff2f 	bl	8005c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	24001b4c 	.word	0x24001b4c

08000e0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e00a      	b.n	8000e34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e1e:	f3af 8000 	nop.w
 8000e22:	4601      	mov	r1, r0
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	60ba      	str	r2, [r7, #8]
 8000e2a:	b2ca      	uxtb	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf0      	blt.n	8000e1e <_read+0x12>
	}

return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e009      	b.n	8000e6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf1      	blt.n	8000e58 <_write+0x12>
	}
	return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_close>:

int _close(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
	return -1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_isatty>:

int _isatty(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d205      	bcs.n	8000f24 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <_sbrk+0x6c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	24080000 	.word	0x24080000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	24001940 	.word	0x24001940
 8000f50:	24004c88 	.word	0x24004c88
 8000f54:	24004c80 	.word	0x24004c80

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b39      	ldr	r3, [pc, #228]	; (8001044 <SystemInit+0xec>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a38      	ldr	r2, [pc, #224]	; (8001044 <SystemInit+0xec>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <SystemInit+0xf0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d807      	bhi.n	8000f88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <SystemInit+0xf0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 030f 	bic.w	r3, r3, #15
 8000f80:	4a31      	ldr	r2, [pc, #196]	; (8001048 <SystemInit+0xf0>)
 8000f82:	f043 0307 	orr.w	r3, r3, #7
 8000f86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <SystemInit+0xf4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a2f      	ldr	r2, [pc, #188]	; (800104c <SystemInit+0xf4>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <SystemInit+0xf4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <SystemInit+0xf4>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	492b      	ldr	r1, [pc, #172]	; (800104c <SystemInit+0xf4>)
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <SystemInit+0xf8>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <SystemInit+0xf0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	2b07      	cmp	r3, #7
 8000fb0:	d907      	bls.n	8000fc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <SystemInit+0xf0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 030f 	bic.w	r3, r3, #15
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <SystemInit+0xf0>)
 8000fbc:	f043 0307 	orr.w	r3, r3, #7
 8000fc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <SystemInit+0xf4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <SystemInit+0xf4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <SystemInit+0xf4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <SystemInit+0xf4>)
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <SystemInit+0xfc>)
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <SystemInit+0xf4>)
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <SystemInit+0x100>)
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <SystemInit+0xf4>)
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <SystemInit+0x104>)
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <SystemInit+0xf4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <SystemInit+0xf4>)
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <SystemInit+0x104>)
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <SystemInit+0xf4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <SystemInit+0xf4>)
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <SystemInit+0x104>)
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <SystemInit+0xf4>)
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <SystemInit+0xf4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <SystemInit+0xf4>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <SystemInit+0xf4>)
 8001012:	2200      	movs	r2, #0
 8001014:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <SystemInit+0x108>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <SystemInit+0x10c>)
 800101c:	4013      	ands	r3, r2
 800101e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001022:	d202      	bcs.n	800102a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <SystemInit+0x110>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <SystemInit+0x114>)
 800102c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001030:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SystemInit+0xec>)
 8001034:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001038:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00
 8001048:	52002000 	.word	0x52002000
 800104c:	58024400 	.word	0x58024400
 8001050:	eaf6ed7f 	.word	0xeaf6ed7f
 8001054:	02020200 	.word	0x02020200
 8001058:	01ff0000 	.word	0x01ff0000
 800105c:	01010280 	.word	0x01010280
 8001060:	5c001000 	.word	0x5c001000
 8001064:	ffff0000 	.word	0xffff0000
 8001068:	51008108 	.word	0x51008108
 800106c:	52004000 	.word	0x52004000

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001074:	f7ff ff70 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800107a:	e003      	b.n	8001084 <LoopCopyDataInit>

0800107c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800107e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001082:	3104      	adds	r1, #4

08001084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001084:	480a      	ldr	r0, [pc, #40]	; (80010b0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800108a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800108c:	d3f6      	bcc.n	800107c <CopyDataInit>
  ldr  r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001090:	e002      	b.n	8001098 <LoopFillZerobss>

08001092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001094:	f842 3b04 	str.w	r3, [r2], #4

08001098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800109a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800109c:	d3f9      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f010 fb2d 	bl	80116fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fb4d 	bl	8000740 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80010ac:	08015190 	.word	0x08015190
  ldr  r0, =_sdata
 80010b0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80010b4:	24000094 	.word	0x24000094
  ldr  r2, =_sbss
 80010b8:	24001924 	.word	0x24001924
  ldr  r3, = _ebss
 80010bc:	24004c84 	.word	0x24004c84

080010c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC3_IRQHandler>

080010c2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <LAN8742_RegisterBusIO+0x28>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <LAN8742_RegisterBusIO+0x28>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <LAN8742_RegisterBusIO+0x28>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e014      	b.n	800111a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d17c      	bne.n	8001240 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2220      	movs	r2, #32
 8001158:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e01c      	b.n	800119a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	2112      	movs	r1, #18
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	4798      	blx	r3
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	da03      	bge.n	800117c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001174:	f06f 0304 	mvn.w	r3, #4
 8001178:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800117a:	e00b      	b.n	8001194 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	d105      	bne.n	8001194 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
         break;
 8001192:	e005      	b.n	80011a0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2b1f      	cmp	r3, #31
 800119e:	d9df      	bls.n	8001160 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b1f      	cmp	r3, #31
 80011a6:	d902      	bls.n	80011ae <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011a8:	f06f 0302 	mvn.w	r3, #2
 80011ac:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d145      	bne.n	8001240 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6810      	ldr	r0, [r2, #0]
 80011bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c0:	2100      	movs	r1, #0
 80011c2:	4798      	blx	r3
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db37      	blt.n	800123a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6810      	ldr	r0, [r2, #0]
 80011d2:	f107 0208 	add.w	r2, r7, #8
 80011d6:	2100      	movs	r1, #0
 80011d8:	4798      	blx	r3
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db28      	blt.n	8001232 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4798      	blx	r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011ea:	e01c      	b.n	8001226 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4798      	blx	r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011fe:	d80e      	bhi.n	800121e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6810      	ldr	r0, [r2, #0]
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	2100      	movs	r1, #0
 800120e:	4798      	blx	r3
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	da07      	bge.n	8001226 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001216:	f06f 0304 	mvn.w	r3, #4
 800121a:	613b      	str	r3, [r7, #16]
                 break;
 800121c:	e010      	b.n	8001240 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800121e:	f06f 0301 	mvn.w	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
               break;
 8001224:	e00c      	b.n	8001240 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1dd      	bne.n	80011ec <LAN8742_Init+0xc6>
 8001230:	e006      	b.n	8001240 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001232:	f06f 0304 	mvn.w	r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	e002      	b.n	8001240 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800123a:	f06f 0303 	mvn.w	r3, #3
 800123e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d112      	bne.n	800126c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4798      	blx	r3
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001250:	bf00      	nop
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001264:	d9f5      	bls.n	8001252 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800126c:	693b      	ldr	r3, [r7, #16]
 }
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6810      	ldr	r0, [r2, #0]
 800128a:	f107 020c 	add.w	r2, r7, #12
 800128e:	2101      	movs	r1, #1
 8001290:	4798      	blx	r3
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	da02      	bge.n	800129e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001298:	f06f 0304 	mvn.w	r3, #4
 800129c:	e06e      	b.n	800137c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6810      	ldr	r0, [r2, #0]
 80012a6:	f107 020c 	add.w	r2, r7, #12
 80012aa:	2101      	movs	r1, #1
 80012ac:	4798      	blx	r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da02      	bge.n	80012ba <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012b4:	f06f 0304 	mvn.w	r3, #4
 80012b8:	e060      	b.n	800137c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80012c4:	2301      	movs	r3, #1
 80012c6:	e059      	b.n	800137c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6810      	ldr	r0, [r2, #0]
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	2100      	movs	r1, #0
 80012d6:	4798      	blx	r3
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da02      	bge.n	80012e4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012de:	f06f 0304 	mvn.w	r3, #4
 80012e2:	e04b      	b.n	800137c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11b      	bne.n	8001326 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <LAN8742_GetLinkState+0x90>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001302:	2302      	movs	r3, #2
 8001304:	e03a      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001310:	2303      	movs	r3, #3
 8001312:	e033      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800131e:	2304      	movs	r3, #4
 8001320:	e02c      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001322:	2305      	movs	r3, #5
 8001324:	e02a      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6810      	ldr	r0, [r2, #0]
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	211f      	movs	r1, #31
 8001334:	4798      	blx	r3
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	da02      	bge.n	8001342 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800133c:	f06f 0304 	mvn.w	r3, #4
 8001340:	e01c      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800134c:	2306      	movs	r3, #6
 800134e:	e015      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 031c 	and.w	r3, r3, #28
 8001356:	2b18      	cmp	r3, #24
 8001358:	d101      	bne.n	800135e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800135a:	2302      	movs	r3, #2
 800135c:	e00e      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 031c 	and.w	r3, r3, #28
 8001364:	2b08      	cmp	r3, #8
 8001366:	d101      	bne.n	800136c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001368:	2303      	movs	r3, #3
 800136a:	e007      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 031c 	and.w	r3, r3, #28
 8001372:	2b14      	cmp	r3, #20
 8001374:	d101      	bne.n	800137a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001376:	2304      	movs	r3, #4
 8001378:	e000      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800137a:	2305      	movs	r3, #5
    }				
  }
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138a:	2003      	movs	r0, #3
 800138c:	f000 f945 	bl	800161a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001390:	f002 febe 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 8001394:	4601      	mov	r1, r0
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_Init+0x68>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <HAL_Init+0x6c>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	fa21 f303 	lsr.w	r3, r1, r3
 80013ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_Init+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_Init+0x6c>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_Init+0x70>)
 80013c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_Init+0x74>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fc86 	bl	8000ce0 <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e002      	b.n	80013e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013de:	f7ff fc1b 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58024400 	.word	0x58024400
 80013f0:	08014fd0 	.word	0x08014fd0
 80013f4:	24000004 	.word	0x24000004
 80013f8:	24000000 	.word	0x24000000

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	2400000c 	.word	0x2400000c
 8001420:	24001b98 	.word	0x24001b98

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	24001b98 	.word	0x24001b98

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_Delay+0x40>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2400000c 	.word	0x2400000c

08001480 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetREVID+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	0c1b      	lsrs	r3, r3, #16
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	5c001000 	.word	0x5c001000

08001498 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014a8:	4904      	ldr	r1, [pc, #16]	; (80014bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	58000400 	.word	0x58000400

080014c0 <__NVIC_SetPriorityGrouping>:
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <__NVIC_SetPriorityGrouping+0x40>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x40>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00
 8001504:	05fa0000 	.word	0x05fa0000

08001508 <__NVIC_GetPriorityGrouping>:
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <__NVIC_EnableIRQ+0x38>)
 800153e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff4c 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800163e:	f7ff ff63 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8001642:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	6978      	ldr	r0, [r7, #20]
 800164a:	f7ff ffb3 	bl	80015b4 <NVIC_EncodePriority>
 800164e:	4602      	mov	r2, r0
 8001650:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff82 	bl	8001560 <__NVIC_SetPriority>
}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff56 	bl	8001524 <__NVIC_EnableIRQ>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001684:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_MPU_Disable+0x24>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_MPU_Disable+0x24>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <HAL_MPU_Disable+0x28>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00
 80016a8:	e000ed90 	.word	0xe000ed90

080016ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_MPU_Enable+0x34>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_MPU_Enable+0x38>)
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_MPU_Enable+0x38>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016ce:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed90 	.word	0xe000ed90
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	785a      	ldrb	r2, [r3, #1]
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_MPU_ConfigRegion+0x84>)
 80016f6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d029      	beq.n	8001754 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001700:	4a1a      	ldr	r2, [pc, #104]	; (800176c <HAL_MPU_ConfigRegion+0x84>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7b1b      	ldrb	r3, [r3, #12]
 800170c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7adb      	ldrb	r3, [r3, #11]
 8001712:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001714:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7a9b      	ldrb	r3, [r3, #10]
 800171a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800171c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7b5b      	ldrb	r3, [r3, #13]
 8001722:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001724:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7b9b      	ldrb	r3, [r3, #14]
 800172a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800172c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7bdb      	ldrb	r3, [r3, #15]
 8001732:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001734:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7a5b      	ldrb	r3, [r3, #9]
 800173a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800173c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7a1b      	ldrb	r3, [r3, #8]
 8001742:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001744:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800174e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001750:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001752:	e005      	b.n	8001760 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_MPU_ConfigRegion+0x84>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <HAL_MPU_ConfigRegion+0x84>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed90 	.word	0xe000ed90

08001770 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0c6      	b.n	8001910 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f005 fe52 	bl	8007434 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2223      	movs	r2, #35	; 0x23
 8001794:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b60      	ldr	r3, [pc, #384]	; (8001918 <HAL_ETH_Init+0x1a8>)
 8001798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800179c:	4a5e      	ldr	r2, [pc, #376]	; (8001918 <HAL_ETH_Init+0x1a8>)
 800179e:	f043 0302 	orr.w	r3, r3, #2
 80017a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017a6:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <HAL_ETH_Init+0x1a8>)
 80017a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7a1b      	ldrb	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d103      	bne.n	80017c4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fe6b 	bl	8001498 <HAL_SYSCFG_ETHInterfaceSelect>
 80017c2:	e003      	b.n	80017cc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017c8:	f7ff fe66 	bl	8001498 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e4:	f7ff fe1e 	bl	8001424 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017ea:	e00f      	b.n	800180c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80017ec:	f7ff fe1a 	bl	8001424 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017fa:	d907      	bls.n	800180c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2204      	movs	r2, #4
 8001800:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	22e0      	movs	r2, #224	; 0xe0
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e081      	b.n	8001910 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1e6      	bne.n	80017ec <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f001 f95c 	bl	8002adc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001824:	f002 fde6 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b3c      	ldr	r3, [pc, #240]	; (800191c <HAL_ETH_Init+0x1ac>)
 800182c:	fba3 2302 	umull	r2, r3, r3, r2
 8001830:	0c9a      	lsrs	r2, r3, #18
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3a01      	subs	r2, #1
 8001838:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f001 f8af 	bl	80029a0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001858:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800185c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	22e0      	movs	r2, #224	; 0xe0
 8001874:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e04a      	b.n	8001910 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001882:	4413      	add	r3, r2
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_ETH_Init+0x1b0>)
 8001888:	4013      	ands	r3, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6952      	ldr	r2, [r2, #20]
 800188e:	0052      	lsls	r2, r2, #1
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	431a      	orrs	r2, r3
 8001896:	f241 1308 	movw	r3, #4360	; 0x1108
 800189a:	440b      	add	r3, r1
 800189c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 f974 	bl	8002b8c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f001 f9b8 	bl	8002c1a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	3305      	adds	r3, #5
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	021a      	lsls	r2, r3, #8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	061a      	lsls	r2, r3, #24
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	3302      	adds	r3, #2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	041b      	lsls	r3, r3, #16
 80018dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	3301      	adds	r3, #1
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2210      	movs	r2, #16
 8001906:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2210      	movs	r2, #16
 800190c:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58024400 	.word	0x58024400
 800191c:	431bde83 	.word	0x431bde83
 8001920:	ffff8001 	.word	0xffff8001

08001924 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	330a      	adds	r3, #10
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_ETH_DescAssignMemory+0x28>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d904      	bls.n	8001956 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e021      	b.n	800199a <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00b      	beq.n	800198c <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d14c      	bne.n	8001a50 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2223      	movs	r2, #35	; 0x23
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0202 	orr.w	r2, r2, #2
 80019ca:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	f241 1304 	movw	r3, #4356	; 0x1104
 80019f8:	4413      	add	r3, r2
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6811      	ldr	r1, [r2, #0]
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a08:	440b      	add	r3, r1
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a14:	4413      	add	r3, r2
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6811      	ldr	r1, [r2, #0]
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a24:	440b      	add	r3, r1
 8001a26:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001a3a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a3e:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2210      	movs	r2, #16
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2222      	movs	r2, #34	; 0x22
 8001a4a:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e000      	b.n	8001a52 <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
  }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d040      	beq.n	8001af0 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2223      	movs	r2, #35	; 0x23
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a7c:	4413      	add	r3, r2
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6811      	ldr	r1, [r2, #0]
 8001a84:	f023 0201 	bic.w	r2, r3, #1
 8001a88:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a8c:	440b      	add	r3, r1
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a98:	4413      	add	r3, r2
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6811      	ldr	r1, [r2, #0]
 8001aa0:	f023 0201 	bic.w	r2, r3, #1
 8001aa4:	f241 1308 	movw	r3, #4360	; 0x1108
 8001aa8:	440b      	add	r3, r1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0201 	bic.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0202 	bic.w	r2, r2, #2
 8001ade:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2210      	movs	r2, #16
 8001aea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e073      	b.n	8001c08 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d16e      	bne.n	8001c06 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f001 f8d1 	bl	8002cd4 <ETH_Prepare_Tx_Descriptors>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	f043 0202 	orr.w	r2, r3, #2
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e05f      	b.n	8001c08 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3206      	adds	r2, #6
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d904      	bls.n	8001b72 <HAL_ETH_Transmit+0x74>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	1f1a      	subs	r2, r3, #4
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	3106      	adds	r1, #6
 8001b7e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001b82:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001b86:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001b88:	f7ff fc4c 	bl	8001424 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001b8e:	e034      	b.n	8001bfa <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d011      	beq.n	8001bc6 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba6:	f043 0208 	orr.w	r2, r3, #8
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	22e0      	movs	r2, #224	; 0xe0
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e020      	b.n	8001c08 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d015      	beq.n	8001bfa <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001bce:	f7ff fc29 	bl	8001424 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d302      	bcc.n	8001be4 <HAL_ETH_Transmit+0xe6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	f043 0204 	orr.w	r2, r3, #4
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	22e0      	movs	r2, #224	; 0xe0
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e006      	b.n	8001c08 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	dbc6      	blt.n	8001b90 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
  }
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	332c      	adds	r3, #44	; 0x2c
 8001c1c:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d06b      	beq.n	8001d1a <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e0ce      	b.n	8001de4 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d036      	beq.n	8001cc6 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d902      	bls.n	8001c7a <HAL_ETH_IsRxDataAvailable+0x6a>
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3b04      	subs	r3, #4
 8001c78:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db11      	blt.n	8001cb0 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00b      	beq.n	8001cb0 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d902      	bls.n	8001cb0 <HAL_ETH_IsRxDataAvailable+0xa0>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b04      	subs	r3, #4
 8001cae:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e08e      	b.n	8001de4 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d012      	beq.n	8001cf8 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d902      	bls.n	8001cec <HAL_ETH_IsRxDataAvailable+0xdc>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b04      	subs	r3, #4
 8001cea:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	e010      	b.n	8001d1a <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3301      	adds	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d902      	bls.n	8001d10 <HAL_ETH_IsRxDataAvailable+0x100>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b04      	subs	r3, #4
 8001d0e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db02      	blt.n	8001d28 <HAL_ETH_IsRxDataAvailable+0x118>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d98e      	bls.n	8001c46 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d056      	beq.n	8001ddc <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d46:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e03b      	b.n	8001dc6 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d5c:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d20d      	bcs.n	8001dc0 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	3301      	adds	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d902      	bls.n	8001db6 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	3b04      	subs	r3, #4
 8001db4:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbe:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3bf      	bcc.n	8001d4e <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6819      	ldr	r1, [r3, #0]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	f241 1328 	movw	r3, #4392	; 0x1128
 8001dd8:	440b      	add	r3, r1
 8001dda:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]

  return 0;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3724      	adds	r7, #36	; 0x24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	332c      	adds	r3, #44	; 0x2c
 8001dfe:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d104      	bne.n	8001e28 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e07d      	b.n	8001f24 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10f      	bne.n	8001e50 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff feed 	bl	8001c10 <HAL_ETH_IsRxDataAvailable>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e071      	b.n	8001f24 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4e:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	e031      	b.n	8001eba <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00b      	beq.n	8001e88 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e90:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	3301      	adds	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d902      	bls.n	8001ea4 <HAL_ETH_GetRxDataBuffer+0xb4>
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	3b04      	subs	r3, #4
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	623b      	str	r3, [r7, #32]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6a3a      	ldr	r2, [r7, #32]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3c7      	bcc.n	8001e56 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d803      	bhi.n	8001ef0 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	e018      	b.n	8001f22 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d012      	beq.n	8001f1e <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	1ad2      	subs	r2, r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	e001      	b.n	8001f22 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3728      	adds	r7, #40	; 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	332c      	adds	r3, #44	; 0x2c
 8001f3a:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff fe60 	bl	8001c10 <HAL_ETH_IsRxDataAvailable>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e017      	b.n	8001f8a <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	4413      	add	r3, r2
 8001f62:	3b01      	subs	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d902      	bls.n	8001f72 <HAL_ETH_GetRxDataLength+0x46>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7a:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b089      	sub	sp, #36	; 0x24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	332c      	adds	r3, #44	; 0x2c
 8001f9e:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fae:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e057      	b.n	8002072 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e03b      	b.n	800204e <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fe4:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3b01      	subs	r3, #1
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d20d      	bcs.n	8002048 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d902      	bls.n	800203e <HAL_ETH_BuildRxDescriptors+0xac>
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3b04      	subs	r3, #4
 800203c:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002046:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	3301      	adds	r3, #1
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	429a      	cmp	r2, r3
 8002054:	d3bf      	bcc.n	8001fd6 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002060:	440b      	add	r3, r1
 8002062:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e03e      	b.n	800211e <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020a8:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	4313      	orrs	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f043 030c 	orr.w	r3, r3, #12
 80020cc:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80020e0:	f7ff f9a0 	bl	8001424 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80020e6:	e009      	b.n	80020fc <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80020e8:	f7ff f99c 	bl	8001424 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f6:	d901      	bls.n	80020fc <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e010      	b.n	800211e <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ed      	bne.n	80020e8 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e03c      	b.n	80021c4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002152:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	055b      	lsls	r3, r3, #21
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f023 030c 	bic.w	r3, r3, #12
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_ETH_WritePHYRegister+0xa4>)
 800218a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800218e:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <HAL_ETH_WritePHYRegister+0xa4>)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002196:	f7ff f945 	bl	8001424 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800219c:	e009      	b.n	80021b2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800219e:	f7ff f941 	bl	8001424 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ac:	d901      	bls.n	80021b2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e008      	b.n	80021c4 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ed      	bne.n	800219e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40028000 	.word	0x40028000

080021d0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e1c3      	b.n	800256c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf14      	ite	ne
 8002200:	2301      	movne	r3, #1
 8002202:	2300      	moveq	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf14      	ite	ne
 8002332:	2301      	movne	r3, #1
 8002334:	2300      	moveq	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf14      	ite	ne
 8002366:	2301      	movne	r3, #1
 8002368:	2300      	moveq	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf14      	ite	ne
 800238e:	2301      	movne	r3, #1
 8002390:	2300      	moveq	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0e5b      	lsrs	r3, r3, #25
 800242e:	f003 021f 	and.w	r2, r3, #31
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 020f 	and.w	r2, r3, #15
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf14      	ite	ne
 800246e:	2301      	movne	r3, #1
 8002470:	2300      	moveq	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf0c      	ite	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	2300      	movne	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80024f8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002508:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e00a      	b.n	80025a2 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	2b10      	cmp	r3, #16
 8002592:	d105      	bne.n	80025a0 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f860 	bl	800265c <ETH_SetMACConfig>

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025bc:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025c4:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025c6:	f001 ff15 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 80025ca:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4a1e      	ldr	r2, [pc, #120]	; (8002648 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d908      	bls.n	80025e6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d804      	bhi.n	80025e6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e027      	b.n	8002636 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4a18      	ldr	r2, [pc, #96]	; (800264c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d908      	bls.n	8002600 <HAL_ETH_SetMDIOClockRange+0x54>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d804      	bhi.n	8002600 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e01a      	b.n	8002636 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4a13      	ldr	r2, [pc, #76]	; (8002650 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d903      	bls.n	8002610 <HAL_ETH_SetMDIOClockRange+0x64>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d911      	bls.n	8002634 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d908      	bls.n	800262a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4a0f      	ldr	r2, [pc, #60]	; (8002658 <HAL_ETH_SetMDIOClockRange+0xac>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d804      	bhi.n	800262a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e005      	b.n	8002636 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	e000      	b.n	8002636 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002634:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	01312cff 	.word	0x01312cff
 800264c:	02160ebf 	.word	0x02160ebf
 8002650:	039386ff 	.word	0x039386ff
 8002654:	05f5e0ff 	.word	0x05f5e0ff
 8002658:	08f0d17f 	.word	0x08f0d17f

0800265c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800266e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	791b      	ldrb	r3, [r3, #4]
 8002674:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002676:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	7b1b      	ldrb	r3, [r3, #12]
 800267c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800267e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7b5b      	ldrb	r3, [r3, #13]
 8002684:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002686:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	7b9b      	ldrb	r3, [r3, #14]
 800268c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800268e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	7bdb      	ldrb	r3, [r3, #15]
 8002694:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002696:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	7c12      	ldrb	r2, [r2, #16]
 800269c:	2a00      	cmp	r2, #0
 800269e:	d102      	bne.n	80026a6 <ETH_SetMACConfig+0x4a>
 80026a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80026a4:	e000      	b.n	80026a8 <ETH_SetMACConfig+0x4c>
 80026a6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026a8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	7c52      	ldrb	r2, [r2, #17]
 80026ae:	2a00      	cmp	r2, #0
 80026b0:	d102      	bne.n	80026b8 <ETH_SetMACConfig+0x5c>
 80026b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b6:	e000      	b.n	80026ba <ETH_SetMACConfig+0x5e>
 80026b8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80026ba:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	7c9b      	ldrb	r3, [r3, #18]
 80026c0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80026c2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80026c8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80026ce:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	7f1b      	ldrb	r3, [r3, #28]
 80026d4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80026d6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	7f5b      	ldrb	r3, [r3, #29]
 80026dc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80026de:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	7f92      	ldrb	r2, [r2, #30]
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d102      	bne.n	80026ee <ETH_SetMACConfig+0x92>
 80026e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ec:	e000      	b.n	80026f0 <ETH_SetMACConfig+0x94>
 80026ee:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80026f0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	7fdb      	ldrb	r3, [r3, #31]
 80026f6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80026f8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002700:	2a00      	cmp	r2, #0
 8002702:	d102      	bne.n	800270a <ETH_SetMACConfig+0xae>
 8002704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002708:	e000      	b.n	800270c <ETH_SetMACConfig+0xb0>
 800270a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800270c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002712:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800271a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800271c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b56      	ldr	r3, [pc, #344]	; (8002888 <ETH_SetMACConfig+0x22c>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	430b      	orrs	r3, r1
 8002738:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002746:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002748:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002750:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002752:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800275a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800275c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002764:	2a00      	cmp	r2, #0
 8002766:	d102      	bne.n	800276e <ETH_SetMACConfig+0x112>
 8002768:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800276c:	e000      	b.n	8002770 <ETH_SetMACConfig+0x114>
 800276e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002770:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4b42      	ldr	r3, [pc, #264]	; (800288c <ETH_SetMACConfig+0x230>)
 8002782:	4013      	ands	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	430b      	orrs	r3, r1
 800278c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002794:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <ETH_SetMACConfig+0x234>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	430b      	orrs	r3, r1
 80027b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027be:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027c6:	2a00      	cmp	r2, #0
 80027c8:	d101      	bne.n	80027ce <ETH_SetMACConfig+0x172>
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	e000      	b.n	80027d0 <ETH_SetMACConfig+0x174>
 80027ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80027d0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027e2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80027e6:	4013      	ands	r3, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	430b      	orrs	r3, r1
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80027f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002800:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f023 0103 	bic.w	r1, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	430a      	orrs	r2, r1
 800281a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002826:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002842:	2a00      	cmp	r2, #0
 8002844:	d101      	bne.n	800284a <ETH_SetMACConfig+0x1ee>
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	e000      	b.n	800284c <ETH_SetMACConfig+0x1f0>
 800284a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800284c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002854:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002856:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800285e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800286c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	430a      	orrs	r2, r1
 8002878:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	00048083 	.word	0x00048083
 800288c:	c0f88000 	.word	0xc0f88000
 8002890:	fffffef0 	.word	0xfffffef0

08002894 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b38      	ldr	r3, [pc, #224]	; (800298c <ETH_SetDMAConfig+0xf8>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	6809      	ldr	r1, [r1, #0]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80028ba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	791b      	ldrb	r3, [r3, #4]
 80028c0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028c6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	7b1b      	ldrb	r3, [r3, #12]
 80028cc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f241 0304 	movw	r3, #4100	; 0x1004
 80028da:	4413      	add	r3, r2
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <ETH_SetDMAConfig+0xfc>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6811      	ldr	r1, [r2, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	f241 0304 	movw	r3, #4100	; 0x1004
 80028ee:	440b      	add	r3, r1
 80028f0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	7b5b      	ldrb	r3, [r3, #13]
 80028f6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <ETH_SetDMAConfig+0x100>)
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6811      	ldr	r1, [r2, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	431a      	orrs	r2, r3
 8002916:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800291a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	7d1b      	ldrb	r3, [r3, #20]
 8002924:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002926:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	7f5b      	ldrb	r3, [r3, #29]
 800292c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f241 1304 	movw	r3, #4356	; 0x1104
 800293a:	4413      	add	r3, r2
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <ETH_SetDMAConfig+0x104>)
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6811      	ldr	r1, [r2, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	431a      	orrs	r2, r3
 800294a:	f241 1304 	movw	r3, #4356	; 0x1104
 800294e:	440b      	add	r3, r1
 8002950:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	7f1b      	ldrb	r3, [r3, #28]
 8002956:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	f241 1308 	movw	r3, #4360	; 0x1108
 8002968:	4413      	add	r3, r2
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <ETH_SetDMAConfig+0x108>)
 800296e:	4013      	ands	r3, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6811      	ldr	r1, [r2, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	431a      	orrs	r2, r3
 8002978:	f241 1308 	movw	r3, #4360	; 0x1108
 800297c:	440b      	add	r3, r1
 800297e:	601a      	str	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	ffff87fd 	.word	0xffff87fd
 8002990:	ffff2ffe 	.word	0xffff2ffe
 8002994:	fffec000 	.word	0xfffec000
 8002998:	ffc0efef 	.word	0xffc0efef
 800299c:	7fc0ffff 	.word	0x7fc0ffff

080029a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0a4      	sub	sp, #144	; 0x90
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029ae:	2300      	movs	r3, #0
 80029b0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80029f8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80029fc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002a04:	2300      	movs	r3, #0
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002a22:	2300      	movs	r3, #0
 8002a24:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a4a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fde6 	bl	800265c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a90:	2301      	movs	r3, #1
 8002a92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a94:	2301      	movs	r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002aaa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002aae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ab4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ab8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002ac0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ac6:	f107 0308 	add.w	r3, r7, #8
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fee1 	bl	8002894 <ETH_SetDMAConfig>
}
 8002ad2:	bf00      	nop
 8002ad4:	3790      	adds	r7, #144	; 0x90
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002af6:	f001 fc7d 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8002afa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d908      	bls.n	8002b16 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d804      	bhi.n	8002b16 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e027      	b.n	8002b66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d908      	bls.n	8002b30 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d804      	bhi.n	8002b30 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e01a      	b.n	8002b66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d903      	bls.n	8002b40 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d911      	bls.n	8002b64 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d908      	bls.n	8002b5a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d804      	bhi.n	8002b5a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e005      	b.n	8002b66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e000      	b.n	8002b66 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002b64:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	01312cff 	.word	0x01312cff
 8002b7c:	02160ebf 	.word	0x02160ebf
 8002b80:	039386ff 	.word	0x039386ff
 8002b84:	05f5e0ff 	.word	0x05f5e0ff
 8002b88:	08f0d17f 	.word	0x08f0d17f

08002b8c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e01d      	b.n	8002bd6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68d9      	ldr	r1, [r3, #12]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	3206      	adds	r2, #6
 8002bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d9de      	bls.n	8002b9a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f241 132c 	movw	r3, #4396	; 0x112c
 8002bea:	4413      	add	r3, r2
 8002bec:	2203      	movs	r2, #3
 8002bee:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68d9      	ldr	r1, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	f241 1314 	movw	r3, #4372	; 0x1114
 8002bfc:	4413      	add	r3, r2
 8002bfe:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002c0c:	601a      	str	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e024      	b.n	8002c72 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6919      	ldr	r1, [r3, #16]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	330a      	adds	r3, #10
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d9d7      	bls.n	8002c28 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f241 1330 	movw	r3, #4400	; 0x1130
 8002c9e:	4413      	add	r3, r2
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6919      	ldr	r1, [r3, #16]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	f241 131c 	movw	r3, #4380	; 0x111c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	f241 1328 	movw	r3, #4392	; 0x1128
 8002cc4:	4413      	add	r3, r2
 8002cc6:	6019      	str	r1, [r3, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b08d      	sub	sp, #52	; 0x34
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d12:	d101      	bne.n	8002d18 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d14:	2302      	movs	r3, #2
 8002d16:	e223      	b.n	8003160 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d044      	beq.n	8002dae <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <ETH_Prepare_Tx_Descriptors+0x220>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d30:	431a      	orrs	r2, r3
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d50:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d027      	beq.n	8002dae <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d9c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002dac:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00e      	beq.n	8002dd8 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	6992      	ldr	r2, [r2, #24]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <ETH_Prepare_Tx_Descriptors+0x11c>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d030      	beq.n	8002e52 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d902      	bls.n	8002e1a <ETH_Prepare_Tx_Descriptors+0x146>
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	3b04      	subs	r3, #4
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e22:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	3301      	adds	r3, #1
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e36:	d10c      	bne.n	8002e52 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e186      	b.n	8003160 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	3301      	adds	r3, #1
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	6852      	ldr	r2, [r2, #4]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <ETH_Prepare_Tx_Descriptors+0x228>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	6852      	ldr	r2, [r2, #4]
 8002e98:	0412      	lsls	r2, r2, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e008      	b.n	8002eb4 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <ETH_Prepare_Tx_Descriptors+0x228>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	6a3a      	ldr	r2, [r7, #32]
 8002eb2:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d021      	beq.n	8002f04 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	04db      	lsls	r3, r3, #19
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <ETH_Prepare_Tx_Descriptors+0x22c>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	69d2      	ldr	r2, [r2, #28]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	e02e      	b.n	8002f52 <ETH_Prepare_Tx_Descriptors+0x27e>
 8002ef4:	ffff0000 	.word	0xffff0000
 8002ef8:	ffffc000 	.word	0xffffc000
 8002efc:	c000ffff 	.word	0xc000ffff
 8002f00:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	4b98      	ldr	r3, [pc, #608]	; (800316c <ETH_Prepare_Tx_Descriptors+0x498>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	6852      	ldr	r2, [r2, #4]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80c0 	beq.w	8003122 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002fb4:	e0b5      	b.n	8003122 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d902      	bls.n	8002fd4 <ETH_Prepare_Tx_Descriptors+0x300>
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	3b04      	subs	r3, #4
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fdc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff6:	d126      	bne.n	8003046 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
 800300a:	e016      	b.n	800303a <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	3301      	adds	r3, #1
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	2b03      	cmp	r3, #3
 8003022:	d902      	bls.n	800302a <ETH_Prepare_Tx_Descriptors+0x356>
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	3b04      	subs	r3, #4
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003032:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	3301      	adds	r3, #1
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	429a      	cmp	r2, r3
 8003040:	d3e4      	bcc.n	800300c <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	e08c      	b.n	8003160 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	3301      	adds	r3, #1
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b43      	ldr	r3, [pc, #268]	; (8003170 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003062:	4013      	ands	r3, r2
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	6852      	ldr	r2, [r2, #4]
 8003068:	431a      	orrs	r2, r3
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d012      	beq.n	800309c <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800308c:	4013      	ands	r3, r2
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	6852      	ldr	r2, [r2, #4]
 8003092:	0412      	lsls	r2, r2, #16
 8003094:	431a      	orrs	r2, r3
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	e008      	b.n	80030ae <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2200      	movs	r2, #0
 80030a0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00f      	beq.n	80030da <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	69d2      	ldr	r2, [r2, #28]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	60da      	str	r2, [r3, #12]
 80030d8:	e017      	b.n	800310a <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <ETH_Prepare_Tx_Descriptors+0x498>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	6852      	ldr	r2, [r2, #4]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	431a      	orrs	r2, r3
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f47f af45 	bne.w	8002fb6 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	e005      	b.n	800314c <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315c:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3734      	adds	r7, #52	; 0x34
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	ffff8000 	.word	0xffff8000
 8003170:	ffffc000 	.word	0xffffc000
 8003174:	c000ffff 	.word	0xc000ffff
 8003178:	fffc0000 	.word	0xfffc0000

0800317c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800318a:	4b89      	ldr	r3, [pc, #548]	; (80033b0 <HAL_GPIO_Init+0x234>)
 800318c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800318e:	e194      	b.n	80034ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8186 	beq.w	80034b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d00b      	beq.n	80031c8 <HAL_GPIO_Init+0x4c>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d007      	beq.n	80031c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031bc:	2b11      	cmp	r3, #17
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d130      	bne.n	800322a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fe:	2201      	movs	r2, #1
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0201 	and.w	r2, r3, #1
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0xee>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b12      	cmp	r3, #18
 8003268:	d123      	bne.n	80032b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3208      	adds	r2, #8
 8003272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	220f      	movs	r2, #15
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	69b9      	ldr	r1, [r7, #24]
 80032ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0203 	and.w	r2, r3, #3
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80e0 	beq.w	80034b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f4:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_GPIO_Init+0x238>)
 80032f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032fa:	4a2e      	ldr	r2, [pc, #184]	; (80033b4 <HAL_GPIO_Init+0x238>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003304:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_GPIO_Init+0x238>)
 8003306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003312:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <HAL_GPIO_Init+0x23c>)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	220f      	movs	r2, #15
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_GPIO_Init+0x240>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d052      	beq.n	80033e4 <HAL_GPIO_Init+0x268>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1f      	ldr	r2, [pc, #124]	; (80033c0 <HAL_GPIO_Init+0x244>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d031      	beq.n	80033aa <HAL_GPIO_Init+0x22e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <HAL_GPIO_Init+0x248>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d02b      	beq.n	80033a6 <HAL_GPIO_Init+0x22a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <HAL_GPIO_Init+0x24c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d025      	beq.n	80033a2 <HAL_GPIO_Init+0x226>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_GPIO_Init+0x250>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01f      	beq.n	800339e <HAL_GPIO_Init+0x222>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_GPIO_Init+0x254>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d019      	beq.n	800339a <HAL_GPIO_Init+0x21e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <HAL_GPIO_Init+0x258>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_GPIO_Init+0x21a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <HAL_GPIO_Init+0x25c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00d      	beq.n	8003392 <HAL_GPIO_Init+0x216>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_GPIO_Init+0x260>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <HAL_GPIO_Init+0x212>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a17      	ldr	r2, [pc, #92]	; (80033e0 <HAL_GPIO_Init+0x264>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_GPIO_Init+0x20e>
 8003386:	2309      	movs	r3, #9
 8003388:	e02d      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 800338a:	230a      	movs	r3, #10
 800338c:	e02b      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 800338e:	2308      	movs	r3, #8
 8003390:	e029      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 8003392:	2307      	movs	r3, #7
 8003394:	e027      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 8003396:	2306      	movs	r3, #6
 8003398:	e025      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 800339a:	2305      	movs	r3, #5
 800339c:	e023      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 800339e:	2304      	movs	r3, #4
 80033a0:	e021      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 80033a2:	2303      	movs	r3, #3
 80033a4:	e01f      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e01d      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e01b      	b.n	80033e6 <HAL_GPIO_Init+0x26a>
 80033ae:	bf00      	nop
 80033b0:	58000080 	.word	0x58000080
 80033b4:	58024400 	.word	0x58024400
 80033b8:	58000400 	.word	0x58000400
 80033bc:	58020000 	.word	0x58020000
 80033c0:	58020400 	.word	0x58020400
 80033c4:	58020800 	.word	0x58020800
 80033c8:	58020c00 	.word	0x58020c00
 80033cc:	58021000 	.word	0x58021000
 80033d0:	58021400 	.word	0x58021400
 80033d4:	58021800 	.word	0x58021800
 80033d8:	58021c00 	.word	0x58021c00
 80033dc:	58022000 	.word	0x58022000
 80033e0:	58022400 	.word	0x58022400
 80033e4:	2300      	movs	r3, #0
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	f002 0203 	and.w	r2, r2, #3
 80033ec:	0092      	lsls	r2, r2, #2
 80033ee:	4093      	lsls	r3, r2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f6:	4938      	ldr	r1, [pc, #224]	; (80034d8 <HAL_GPIO_Init+0x35c>)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800347e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	3301      	adds	r3, #1
 80034b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f47f ae63 	bne.w	8003190 <HAL_GPIO_Init+0x14>
  }
}
 80034ca:	bf00      	nop
 80034cc:	3724      	adds	r7, #36	; 0x24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	58000400 	.word	0x58000400

080034dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
 80034e8:	4613      	mov	r3, r2
 80034ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ec:	787b      	ldrb	r3, [r7, #1]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034f8:	e003      	b.n	8003502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034fa:	887b      	ldrh	r3, [r7, #2]
 80034fc:	041a      	lsls	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	619a      	str	r2, [r3, #24]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_PWREx_ConfigSupply+0x70>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d00a      	beq.n	800353a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003524:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_PWREx_ConfigSupply+0x70>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	d001      	beq.n	8003536 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e01f      	b.n	8003576 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e01d      	b.n	8003576 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_PWREx_ConfigSupply+0x70>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	490f      	ldr	r1, [pc, #60]	; (8003580 <HAL_PWREx_ConfigSupply+0x70>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4313      	orrs	r3, r2
 8003548:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800354a:	f7fd ff6b 	bl	8001424 <HAL_GetTick>
 800354e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003550:	e009      	b.n	8003566 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003552:	f7fd ff67 	bl	8001424 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003560:	d901      	bls.n	8003566 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e007      	b.n	8003576 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_PWREx_ConfigSupply+0x70>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	d1ee      	bne.n	8003552 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	58024800 	.word	0x58024800

08003584 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08c      	sub	sp, #48	; 0x30
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e3ff      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8087 	beq.w	80036b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a4:	4b99      	ldr	r3, [pc, #612]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035ae:	4b97      	ldr	r3, [pc, #604]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d007      	beq.n	80035ca <HAL_RCC_OscConfig+0x46>
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	2b18      	cmp	r3, #24
 80035be:	d110      	bne.n	80035e2 <HAL_RCC_OscConfig+0x5e>
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d10b      	bne.n	80035e2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ca:	4b90      	ldr	r3, [pc, #576]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d06c      	beq.n	80036b0 <HAL_RCC_OscConfig+0x12c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d168      	bne.n	80036b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e3d9      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_OscConfig+0x76>
 80035ec:	4b87      	ldr	r3, [pc, #540]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a86      	ldr	r2, [pc, #536]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	e02e      	b.n	8003658 <HAL_RCC_OscConfig+0xd4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x98>
 8003602:	4b82      	ldr	r3, [pc, #520]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a81      	ldr	r2, [pc, #516]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b7f      	ldr	r3, [pc, #508]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7e      	ldr	r2, [pc, #504]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e01d      	b.n	8003658 <HAL_RCC_OscConfig+0xd4>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0xbc>
 8003626:	4b79      	ldr	r3, [pc, #484]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a78      	ldr	r2, [pc, #480]	; (800380c <HAL_RCC_OscConfig+0x288>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b76      	ldr	r3, [pc, #472]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a75      	ldr	r2, [pc, #468]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0xd4>
 8003640:	4b72      	ldr	r3, [pc, #456]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a71      	ldr	r2, [pc, #452]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b6f      	ldr	r3, [pc, #444]	; (800380c <HAL_RCC_OscConfig+0x288>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6e      	ldr	r2, [pc, #440]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fd fee0 	bl	8001424 <HAL_GetTick>
 8003664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fd fedc 	bl	8001424 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e38d      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800367a:	4b64      	ldr	r3, [pc, #400]	; (800380c <HAL_RCC_OscConfig+0x288>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0xe4>
 8003686:	e014      	b.n	80036b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd fecc 	bl	8001424 <HAL_GetTick>
 800368c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7fd fec8 	bl	8001424 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e379      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036a2:	4b5a      	ldr	r3, [pc, #360]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x10c>
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80ae 	beq.w	800381c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c0:	4b52      	ldr	r3, [pc, #328]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ca:	4b50      	ldr	r3, [pc, #320]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_RCC_OscConfig+0x162>
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	2b18      	cmp	r3, #24
 80036da:	d13a      	bne.n	8003752 <HAL_RCC_OscConfig+0x1ce>
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d135      	bne.n	8003752 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e6:	4b49      	ldr	r3, [pc, #292]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_RCC_OscConfig+0x17a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e34b      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fe:	f7fd febf 	bl	8001480 <HAL_GetREVID>
 8003702:	4602      	mov	r2, r0
 8003704:	f241 0303 	movw	r3, #4099	; 0x1003
 8003708:	429a      	cmp	r2, r3
 800370a:	d817      	bhi.n	800373c <HAL_RCC_OscConfig+0x1b8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d108      	bne.n	8003726 <HAL_RCC_OscConfig+0x1a2>
 8003714:	4b3d      	ldr	r3, [pc, #244]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800371c:	4a3b      	ldr	r2, [pc, #236]	; (800380c <HAL_RCC_OscConfig+0x288>)
 800371e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003722:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003724:	e07a      	b.n	800381c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003726:	4b39      	ldr	r3, [pc, #228]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	031b      	lsls	r3, r3, #12
 8003734:	4935      	ldr	r1, [pc, #212]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800373a:	e06f      	b.n	800381c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_RCC_OscConfig+0x288>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	4930      	ldr	r1, [pc, #192]	; (800380c <HAL_RCC_OscConfig+0x288>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003750:	e064      	b.n	800381c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d045      	beq.n	80037e6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800375a:	4b2c      	ldr	r3, [pc, #176]	; (800380c <HAL_RCC_OscConfig+0x288>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 0219 	bic.w	r2, r3, #25
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4929      	ldr	r1, [pc, #164]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fd fe5a 	bl	8001424 <HAL_GetTick>
 8003770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003774:	f7fd fe56 	bl	8001424 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e307      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <HAL_RCC_OscConfig+0x288>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003792:	f7fd fe75 	bl	8001480 <HAL_GetREVID>
 8003796:	4602      	mov	r2, r0
 8003798:	f241 0303 	movw	r3, #4099	; 0x1003
 800379c:	429a      	cmp	r2, r3
 800379e:	d817      	bhi.n	80037d0 <HAL_RCC_OscConfig+0x24c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d108      	bne.n	80037ba <HAL_RCC_OscConfig+0x236>
 80037a8:	4b18      	ldr	r3, [pc, #96]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037b0:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b6:	6053      	str	r3, [r2, #4]
 80037b8:	e030      	b.n	800381c <HAL_RCC_OscConfig+0x298>
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	031b      	lsls	r3, r3, #12
 80037c8:	4910      	ldr	r1, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
 80037ce:	e025      	b.n	800381c <HAL_RCC_OscConfig+0x298>
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	490b      	ldr	r1, [pc, #44]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	e01a      	b.n	800381c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a08      	ldr	r2, [pc, #32]	; (800380c <HAL_RCC_OscConfig+0x288>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fd fe17 	bl	8001424 <HAL_GetTick>
 80037f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fd fe13 	bl	8001424 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d903      	bls.n	8003810 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e2c4      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
 800380c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003810:	4ba4      	ldr	r3, [pc, #656]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ee      	bne.n	80037fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80a9 	beq.w	800397c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382a:	4b9e      	ldr	r3, [pc, #632]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003832:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003834:	4b9b      	ldr	r3, [pc, #620]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d007      	beq.n	8003850 <HAL_RCC_OscConfig+0x2cc>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b18      	cmp	r3, #24
 8003844:	d13a      	bne.n	80038bc <HAL_RCC_OscConfig+0x338>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d135      	bne.n	80038bc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003850:	4b94      	ldr	r3, [pc, #592]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_OscConfig+0x2e4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	2b80      	cmp	r3, #128	; 0x80
 8003862:	d001      	beq.n	8003868 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e296      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003868:	f7fd fe0a 	bl	8001480 <HAL_GetREVID>
 800386c:	4602      	mov	r2, r0
 800386e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003872:	429a      	cmp	r2, r3
 8003874:	d817      	bhi.n	80038a6 <HAL_RCC_OscConfig+0x322>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	2b20      	cmp	r3, #32
 800387c:	d108      	bne.n	8003890 <HAL_RCC_OscConfig+0x30c>
 800387e:	4b89      	ldr	r3, [pc, #548]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003886:	4a87      	ldr	r2, [pc, #540]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800388c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800388e:	e075      	b.n	800397c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003890:	4b84      	ldr	r3, [pc, #528]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	069b      	lsls	r3, r3, #26
 800389e:	4981      	ldr	r1, [pc, #516]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038a4:	e06a      	b.n	800397c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038a6:	4b7f      	ldr	r3, [pc, #508]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	061b      	lsls	r3, r3, #24
 80038b4:	497b      	ldr	r1, [pc, #492]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ba:	e05f      	b.n	800397c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d042      	beq.n	800394a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038c4:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a76      	ldr	r2, [pc, #472]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80038ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fd fda8 	bl	8001424 <HAL_GetTick>
 80038d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80038d8:	f7fd fda4 	bl	8001424 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e255      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038ea:	4b6e      	ldr	r3, [pc, #440]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038f6:	f7fd fdc3 	bl	8001480 <HAL_GetREVID>
 80038fa:	4602      	mov	r2, r0
 80038fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003900:	429a      	cmp	r2, r3
 8003902:	d817      	bhi.n	8003934 <HAL_RCC_OscConfig+0x3b0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	2b20      	cmp	r3, #32
 800390a:	d108      	bne.n	800391e <HAL_RCC_OscConfig+0x39a>
 800390c:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003914:	4a63      	ldr	r2, [pc, #396]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003916:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800391a:	6053      	str	r3, [r2, #4]
 800391c:	e02e      	b.n	800397c <HAL_RCC_OscConfig+0x3f8>
 800391e:	4b61      	ldr	r3, [pc, #388]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	069b      	lsls	r3, r3, #26
 800392c:	495d      	ldr	r1, [pc, #372]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
 8003932:	e023      	b.n	800397c <HAL_RCC_OscConfig+0x3f8>
 8003934:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	4958      	ldr	r1, [pc, #352]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003944:	4313      	orrs	r3, r2
 8003946:	60cb      	str	r3, [r1, #12]
 8003948:	e018      	b.n	800397c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800394a:	4b56      	ldr	r3, [pc, #344]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a55      	ldr	r2, [pc, #340]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fd fd65 	bl	8001424 <HAL_GetTick>
 800395a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800395e:	f7fd fd61 	bl	8001424 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e212      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003970:	4b4c      	ldr	r3, [pc, #304]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d036      	beq.n	80039f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d019      	beq.n	80039c4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003990:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fd fd42 	bl	8001424 <HAL_GetTick>
 80039a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a4:	f7fd fd3e 	bl	8001424 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1ef      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039b6:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80039b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x420>
 80039c2:	e018      	b.n	80039f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c4:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80039c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c8:	4a36      	ldr	r2, [pc, #216]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fd fd28 	bl	8001424 <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d8:	f7fd fd24 	bl	8001424 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1d5      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 80039ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d036      	beq.n	8003a70 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d019      	beq.n	8003a3e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a0a:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a16:	f7fd fd05 	bl	8001424 <HAL_GetTick>
 8003a1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a1e:	f7fd fd01 	bl	8001424 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e1b2      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a30:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x49a>
 8003a3c:	e018      	b.n	8003a70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a3e:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a4a:	f7fd fceb 	bl	8001424 <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a52:	f7fd fce7 	bl	8001424 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e198      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_RCC_OscConfig+0x520>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8085 	beq.w	8003b88 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_RCC_OscConfig+0x524>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <HAL_RCC_OscConfig+0x524>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a8a:	f7fd fccb 	bl	8001424 <HAL_GetTick>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a90:	e00c      	b.n	8003aac <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fd fcc7 	bl	8001424 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b64      	cmp	r3, #100	; 0x64
 8003a9e:	d905      	bls.n	8003aac <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e178      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aac:	4b96      	ldr	r3, [pc, #600]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ec      	beq.n	8003a92 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x54a>
 8003ac0:	4b92      	ldr	r3, [pc, #584]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a91      	ldr	r2, [pc, #580]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
 8003acc:	e02d      	b.n	8003b2a <HAL_RCC_OscConfig+0x5a6>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x56c>
 8003ad6:	4b8d      	ldr	r3, [pc, #564]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a8c      	ldr	r2, [pc, #560]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae2:	4b8a      	ldr	r3, [pc, #552]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a89      	ldr	r2, [pc, #548]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003ae8:	f023 0304 	bic.w	r3, r3, #4
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70
 8003aee:	e01c      	b.n	8003b2a <HAL_RCC_OscConfig+0x5a6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCC_OscConfig+0x58e>
 8003af8:	4b84      	ldr	r3, [pc, #528]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a83      	ldr	r2, [pc, #524]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
 8003b04:	4b81      	ldr	r3, [pc, #516]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a80      	ldr	r2, [pc, #512]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	e00b      	b.n	8003b2a <HAL_RCC_OscConfig+0x5a6>
 8003b12:	4b7e      	ldr	r3, [pc, #504]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a7d      	ldr	r2, [pc, #500]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	4b7b      	ldr	r3, [pc, #492]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a7a      	ldr	r2, [pc, #488]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d015      	beq.n	8003b5e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fd fc77 	bl	8001424 <HAL_GetTick>
 8003b36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fd fc73 	bl	8001424 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e122      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b50:	4b6e      	ldr	r3, [pc, #440]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ee      	beq.n	8003b3a <HAL_RCC_OscConfig+0x5b6>
 8003b5c:	e014      	b.n	8003b88 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fc61 	bl	8001424 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fd fc5d 	bl	8001424 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e10c      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b7c:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ee      	bne.n	8003b66 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8101 	beq.w	8003d94 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b92:	4b5e      	ldr	r3, [pc, #376]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b9a:	2b18      	cmp	r3, #24
 8003b9c:	f000 80bc 	beq.w	8003d18 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	f040 8095 	bne.w	8003cd4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003baa:	4b58      	ldr	r3, [pc, #352]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a57      	ldr	r2, [pc, #348]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb6:	f7fd fc35 	bl	8001424 <HAL_GetTick>
 8003bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbe:	f7fd fc31 	bl	8001424 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e0e2      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd0:	4b4e      	ldr	r3, [pc, #312]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f0      	bne.n	8003bbe <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bdc:	4b4b      	ldr	r3, [pc, #300]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be0:	4b4b      	ldr	r3, [pc, #300]	; (8003d10 <HAL_RCC_OscConfig+0x78c>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bec:	0112      	lsls	r2, r2, #4
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	4946      	ldr	r1, [pc, #280]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	628b      	str	r3, [r1, #40]	; 0x28
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	3b01      	subs	r3, #1
 8003c06:	025b      	lsls	r3, r3, #9
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	3b01      	subs	r3, #1
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c26:	4939      	ldr	r1, [pc, #228]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003c2c:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4a36      	ldr	r2, [pc, #216]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c38:	4b34      	ldr	r3, [pc, #208]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c3c:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <HAL_RCC_OscConfig+0x790>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c44:	00d2      	lsls	r2, r2, #3
 8003c46:	4931      	ldr	r1, [pc, #196]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c4c:	4b2f      	ldr	r3, [pc, #188]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	f023 020c 	bic.w	r2, r3, #12
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	492c      	ldr	r1, [pc, #176]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	f023 0202 	bic.w	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	4928      	ldr	r1, [pc, #160]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c70:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a25      	ldr	r2, [pc, #148]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c7c:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	4a1f      	ldr	r2, [pc, #124]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fd fbba 	bl	8001424 <HAL_GetTick>
 8003cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fd fbb6 	bl	8001424 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e067      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x730>
 8003cd2:	e05f      	b.n	8003d94 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fba0 	bl	8001424 <HAL_GetTick>
 8003ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd fb9c 	bl	8001424 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04d      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x764>
 8003d06:	e045      	b.n	8003d94 <HAL_RCC_OscConfig+0x810>
 8003d08:	58024800 	.word	0x58024800
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	fffffc0c 	.word	0xfffffc0c
 8003d14:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_RCC_OscConfig+0x81c>)
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCC_OscConfig+0x81c>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d031      	beq.n	8003d90 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f003 0203 	and.w	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d12a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d122      	bne.n	8003d90 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	0a5b      	lsrs	r3, r3, #9
 8003d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d111      	bne.n	8003d90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	0c1b      	lsrs	r3, r3, #16
 8003d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d108      	bne.n	8003d90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	0e1b      	lsrs	r3, r3, #24
 8003d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3730      	adds	r7, #48	; 0x30
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	58024400 	.word	0x58024400

08003da4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e19c      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b8a      	ldr	r3, [pc, #552]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d910      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b87      	ldr	r3, [pc, #540]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 020f 	bic.w	r2, r3, #15
 8003dce:	4985      	ldr	r1, [pc, #532]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b83      	ldr	r3, [pc, #524]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e184      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d010      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	4b7b      	ldr	r3, [pc, #492]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d908      	bls.n	8003e16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e04:	4b78      	ldr	r3, [pc, #480]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	4975      	ldr	r1, [pc, #468]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d010      	beq.n	8003e44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	4b70      	ldr	r3, [pc, #448]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d908      	bls.n	8003e44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e32:	4b6d      	ldr	r3, [pc, #436]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	496a      	ldr	r1, [pc, #424]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d908      	bls.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e60:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	495e      	ldr	r1, [pc, #376]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d908      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e8e:	4b56      	ldr	r3, [pc, #344]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4953      	ldr	r1, [pc, #332]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d010      	beq.n	8003ece <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4b4d      	ldr	r3, [pc, #308]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d908      	bls.n	8003ece <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b4a      	ldr	r3, [pc, #296]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f023 020f 	bic.w	r2, r3, #15
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4947      	ldr	r1, [pc, #284]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d055      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003eda:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	4940      	ldr	r1, [pc, #256]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ef4:	4b3c      	ldr	r3, [pc, #240]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d121      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0f6      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f0c:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d115      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0ea      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f24:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0de      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f34:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0d6      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f44:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f023 0207 	bic.w	r2, r3, #7
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4925      	ldr	r1, [pc, #148]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fd fa65 	bl	8001424 <HAL_GetTick>
 8003f5a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5e:	f7fd fa61 	bl	8001424 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e0be      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f74:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d1eb      	bne.n	8003f5e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d208      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa2:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f023 020f 	bic.w	r2, r3, #15
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d214      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 020f 	bic.w	r2, r3, #15
 8003fca:	4906      	ldr	r1, [pc, #24]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <HAL_RCC_ClockConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e086      	b.n	80040f2 <HAL_RCC_ClockConfig+0x34e>
 8003fe4:	52002000 	.word	0x52002000
 8003fe8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004004:	429a      	cmp	r2, r3
 8004006:	d208      	bcs.n	800401a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004008:	4b3c      	ldr	r3, [pc, #240]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4939      	ldr	r1, [pc, #228]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004016:	4313      	orrs	r3, r2
 8004018:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	4b34      	ldr	r3, [pc, #208]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004032:	429a      	cmp	r2, r3
 8004034:	d208      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004036:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	492e      	ldr	r1, [pc, #184]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004044:	4313      	orrs	r3, r2
 8004046:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004060:	429a      	cmp	r2, r3
 8004062:	d208      	bcs.n	8004076 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004064:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	4922      	ldr	r1, [pc, #136]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004072:	4313      	orrs	r3, r2
 8004074:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800408e:	429a      	cmp	r2, r3
 8004090:	d208      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4917      	ldr	r1, [pc, #92]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040a4:	f000 f834 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040a8:	4601      	mov	r1, r0
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	4a12      	ldr	r2, [pc, #72]	; (8004100 <HAL_RCC_ClockConfig+0x35c>)
 80040b6:	5cd3      	ldrb	r3, [r2, r3]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	fa21 f303 	lsr.w	r3, r1, r3
 80040c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040c2:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_RCC_ClockConfig+0x358>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	4a0d      	ldr	r2, [pc, #52]	; (8004100 <HAL_RCC_ClockConfig+0x35c>)
 80040cc:	5cd3      	ldrb	r3, [r2, r3]
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <HAL_RCC_ClockConfig+0x360>)
 80040da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040dc:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <HAL_RCC_ClockConfig+0x364>)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <HAL_RCC_ClockConfig+0x368>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fdfa 	bl	8000ce0 <HAL_InitTick>
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	58024400 	.word	0x58024400
 8004100:	08014fd0 	.word	0x08014fd0
 8004104:	24000004 	.word	0x24000004
 8004108:	24000000 	.word	0x24000000
 800410c:	24000008 	.word	0x24000008

08004110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004116:	4baf      	ldr	r3, [pc, #700]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800411e:	2b18      	cmp	r3, #24
 8004120:	f200 814e 	bhi.w	80043c0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004124:	a201      	add	r2, pc, #4	; (adr r2, 800412c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	08004191 	.word	0x08004191
 8004130:	080043c1 	.word	0x080043c1
 8004134:	080043c1 	.word	0x080043c1
 8004138:	080043c1 	.word	0x080043c1
 800413c:	080043c1 	.word	0x080043c1
 8004140:	080043c1 	.word	0x080043c1
 8004144:	080043c1 	.word	0x080043c1
 8004148:	080043c1 	.word	0x080043c1
 800414c:	080041b7 	.word	0x080041b7
 8004150:	080043c1 	.word	0x080043c1
 8004154:	080043c1 	.word	0x080043c1
 8004158:	080043c1 	.word	0x080043c1
 800415c:	080043c1 	.word	0x080043c1
 8004160:	080043c1 	.word	0x080043c1
 8004164:	080043c1 	.word	0x080043c1
 8004168:	080043c1 	.word	0x080043c1
 800416c:	080041bd 	.word	0x080041bd
 8004170:	080043c1 	.word	0x080043c1
 8004174:	080043c1 	.word	0x080043c1
 8004178:	080043c1 	.word	0x080043c1
 800417c:	080043c1 	.word	0x080043c1
 8004180:	080043c1 	.word	0x080043c1
 8004184:	080043c1 	.word	0x080043c1
 8004188:	080043c1 	.word	0x080043c1
 800418c:	080041c3 	.word	0x080041c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004190:	4b90      	ldr	r3, [pc, #576]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800419c:	4b8d      	ldr	r3, [pc, #564]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	08db      	lsrs	r3, r3, #3
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	4a8c      	ldr	r2, [pc, #560]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80041ae:	e10a      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041b0:	4b89      	ldr	r3, [pc, #548]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80041b2:	61bb      	str	r3, [r7, #24]
    break;
 80041b4:	e107      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80041b6:	4b89      	ldr	r3, [pc, #548]	; (80043dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80041b8:	61bb      	str	r3, [r7, #24]
    break;
 80041ba:	e104      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80041bc:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80041be:	61bb      	str	r3, [r7, #24]
    break;
 80041c0:	e101      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041c2:	4b84      	ldr	r3, [pc, #528]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80041cc:	4b81      	ldr	r3, [pc, #516]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041d8:	4b7e      	ldr	r3, [pc, #504]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80041e2:	4b7c      	ldr	r3, [pc, #496]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	08db      	lsrs	r3, r3, #3
 80041e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80da 	beq.w	80043ba <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d05a      	beq.n	80042c2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800420c:	2b01      	cmp	r3, #1
 800420e:	d302      	bcc.n	8004216 <HAL_RCC_GetSysClockFreq+0x106>
 8004210:	2b02      	cmp	r3, #2
 8004212:	d078      	beq.n	8004306 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004214:	e099      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004216:	4b6f      	ldr	r3, [pc, #444]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d02d      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004222:	4b6c      	ldr	r3, [pc, #432]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	08db      	lsrs	r3, r3, #3
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	4a6a      	ldr	r2, [pc, #424]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800422e:	fa22 f303 	lsr.w	r3, r2, r3
 8004232:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004260:	eddf 5a60 	vldr	s11, [pc, #384]	; 80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004278:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800427c:	e087      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004288:	eddf 6a57 	vldr	s13, [pc, #348]	; 80043e8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800428c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004290:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004298:	ee07 3a90 	vmov	s15, r3
 800429c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80042a4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80042a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042c0:	e065      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042cc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80043ec <HAL_RCC_GetSysClockFreq+0x2dc>
 80042d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d4:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80042ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004300:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004304:	e043      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004310:	eddf 6a37 	vldr	s13, [pc, #220]	; 80043f0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004318:	4b2e      	ldr	r3, [pc, #184]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004328:	ed97 6a02 	vldr	s12, [r7, #8]
 800432c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004344:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004348:	e021      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004354:	eddf 6a25 	vldr	s13, [pc, #148]	; 80043ec <HAL_RCC_GetSysClockFreq+0x2dc>
 8004358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004370:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80043e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004388:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800438c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	0a5b      	lsrs	r3, r3, #9
 8004394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004398:	3301      	adds	r3, #1
 800439a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b2:	ee17 3a90 	vmov	r3, s15
 80043b6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80043b8:	e005      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
    break;
 80043be:	e002      	b.n	80043c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80043c2:	61bb      	str	r3, [r7, #24]
    break;
 80043c4:	bf00      	nop
  }

  return sysclockfreq;
 80043c6:	69bb      	ldr	r3, [r7, #24]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3724      	adds	r7, #36	; 0x24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	58024400 	.word	0x58024400
 80043d8:	03d09000 	.word	0x03d09000
 80043dc:	003d0900 	.word	0x003d0900
 80043e0:	007a1200 	.word	0x007a1200
 80043e4:	46000000 	.word	0x46000000
 80043e8:	4c742400 	.word	0x4c742400
 80043ec:	4a742400 	.word	0x4a742400
 80043f0:	4af42400 	.word	0x4af42400

080043f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043fa:	f7ff fe89 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80043fe:	4601      	mov	r1, r0
 8004400:	4b10      	ldr	r3, [pc, #64]	; (8004444 <HAL_RCC_GetHCLKFreq+0x50>)
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	4a0f      	ldr	r2, [pc, #60]	; (8004448 <HAL_RCC_GetHCLKFreq+0x54>)
 800440c:	5cd3      	ldrb	r3, [r2, r3]
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	fa21 f303 	lsr.w	r3, r1, r3
 8004416:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <HAL_RCC_GetHCLKFreq+0x50>)
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	4a09      	ldr	r2, [pc, #36]	; (8004448 <HAL_RCC_GetHCLKFreq+0x54>)
 8004422:	5cd3      	ldrb	r3, [r2, r3]
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a07      	ldr	r2, [pc, #28]	; (800444c <HAL_RCC_GetHCLKFreq+0x58>)
 8004430:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004432:	4a07      	ldr	r2, [pc, #28]	; (8004450 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <HAL_RCC_GetHCLKFreq+0x58>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	58024400 	.word	0x58024400
 8004448:	08014fd0 	.word	0x08014fd0
 800444c:	24000004 	.word	0x24000004
 8004450:	24000000 	.word	0x24000000

08004454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004458:	f7ff ffcc 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 800445c:	4601      	mov	r1, r0
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <HAL_RCC_GetPCLK1Freq+0x28>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	58024400 	.word	0x58024400
 800447c:	08014fd0 	.word	0x08014fd0

08004480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004484:	f7ff ffb6 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004488:	4601      	mov	r1, r0
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	58024400 	.word	0x58024400
 80044a8:	08014fd0 	.word	0x08014fd0

080044ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223f      	movs	r2, #63	; 0x3f
 80044ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044bc:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <HAL_RCC_GetClockConfig+0x7c>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0207 	and.w	r2, r3, #7
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80044c8:	4b17      	ldr	r3, [pc, #92]	; (8004528 <HAL_RCC_GetClockConfig+0x7c>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <HAL_RCC_GetClockConfig+0x7c>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80044e0:	4b11      	ldr	r3, [pc, #68]	; (8004528 <HAL_RCC_GetClockConfig+0x7c>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80044ec:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <HAL_RCC_GetClockConfig+0x7c>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_GetClockConfig+0x7c>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <HAL_RCC_GetClockConfig+0x7c>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCC_GetClockConfig+0x80>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	601a      	str	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	58024400 	.word	0x58024400
 800452c:	52002000 	.word	0x52002000

08004530 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004538:	2300      	movs	r3, #0
 800453a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800453c:	2300      	movs	r3, #0
 800453e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d03d      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004554:	d013      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d802      	bhi.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004560:	e01f      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004566:	d013      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004568:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800456c:	d01c      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800456e:	e018      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004570:	4baf      	ldr	r3, [pc, #700]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	4aae      	ldr	r2, [pc, #696]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800457c:	e015      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3304      	adds	r3, #4
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f001 f96f 	bl	8005868 <RCCEx_PLL2_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800458e:	e00c      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3324      	adds	r3, #36	; 0x24
 8004594:	2102      	movs	r1, #2
 8004596:	4618      	mov	r0, r3
 8004598:	f001 fa18 	bl	80059cc <RCCEx_PLL3_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045a0:	e003      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	75fb      	strb	r3, [r7, #23]
      break;
 80045a6:	e000      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80045a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045aa:	7dfb      	ldrb	r3, [r7, #23]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045b0:	4b9f      	ldr	r3, [pc, #636]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045bc:	499c      	ldr	r1, [pc, #624]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	650b      	str	r3, [r1, #80]	; 0x50
 80045c2:	e001      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d03d      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d826      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	080045f9 	.word	0x080045f9
 80045e8:	08004607 	.word	0x08004607
 80045ec:	08004619 	.word	0x08004619
 80045f0:	08004631 	.word	0x08004631
 80045f4:	08004631 	.word	0x08004631
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b8d      	ldr	r3, [pc, #564]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	4a8c      	ldr	r2, [pc, #560]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004604:	e015      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f92b 	bl	8005868 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004616:	e00c      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f001 f9d4 	bl	80059cc <RCCEx_PLL3_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
      break;
 800462e:	e000      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004638:	4b7d      	ldr	r3, [pc, #500]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	f023 0207 	bic.w	r2, r3, #7
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004644:	497a      	ldr	r1, [pc, #488]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004646:	4313      	orrs	r3, r2
 8004648:	650b      	str	r3, [r1, #80]	; 0x50
 800464a:	e001      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004658:	2b00      	cmp	r3, #0
 800465a:	d03e      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	2b80      	cmp	r3, #128	; 0x80
 8004662:	d01c      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d804      	bhi.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d00d      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004670:	e01e      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004672:	2bc0      	cmp	r3, #192	; 0xc0
 8004674:	d01f      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467a:	d01e      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800467c:	e018      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467e:	4b6c      	ldr	r3, [pc, #432]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	4a6b      	ldr	r2, [pc, #428]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800468a:	e017      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f001 f8e8 	bl	8005868 <RCCEx_PLL2_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800469c:	e00e      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3324      	adds	r3, #36	; 0x24
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 f991 	bl	80059cc <RCCEx_PLL3_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046ae:	e005      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	75fb      	strb	r3, [r7, #23]
      break;
 80046b4:	e002      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80046b6:	bf00      	nop
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80046ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046c2:	4b5b      	ldr	r3, [pc, #364]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ce:	4958      	ldr	r1, [pc, #352]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	650b      	str	r3, [r1, #80]	; 0x50
 80046d4:	e001      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d044      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f0:	d01f      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80046f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f6:	d805      	bhi.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004700:	d00e      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004702:	e01f      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004704:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004708:	d01f      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800470a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800470e:	d01e      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004710:	e018      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	4a46      	ldr	r2, [pc, #280]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800471e:	e017      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f001 f89e 	bl	8005868 <RCCEx_PLL2_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004730:	e00e      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3324      	adds	r3, #36	; 0x24
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f001 f947 	bl	80059cc <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004742:	e005      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
      break;
 8004748:	e002      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800474e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004756:	4b36      	ldr	r3, [pc, #216]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004764:	4932      	ldr	r1, [pc, #200]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004766:	4313      	orrs	r3, r2
 8004768:	658b      	str	r3, [r1, #88]	; 0x58
 800476a:	e001      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004778:	2b00      	cmp	r3, #0
 800477a:	d044      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004786:	d01f      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800478c:	d805      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004792:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004796:	d00e      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004798:	e01f      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800479a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800479e:	d01f      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80047a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a4:	d01e      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80047a6:	e018      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047b4:	e017      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3304      	adds	r3, #4
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 f853 	bl	8005868 <RCCEx_PLL2_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047c6:	e00e      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3324      	adds	r3, #36	; 0x24
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f8fc 	bl	80059cc <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047d8:	e005      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	75fb      	strb	r3, [r7, #23]
      break;
 80047de:	e002      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80047e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047ec:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047fa:	490d      	ldr	r1, [pc, #52]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	658b      	str	r3, [r1, #88]	; 0x58
 8004800:	e001      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d035      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004816:	2b10      	cmp	r3, #16
 8004818:	d00c      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800481a:	2b10      	cmp	r3, #16
 800481c:	d802      	bhi.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01b      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004822:	e017      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004824:	2b20      	cmp	r3, #32
 8004826:	d00c      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004828:	2b30      	cmp	r3, #48	; 0x30
 800482a:	d018      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800482c:	e012      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800482e:	bf00      	nop
 8004830:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004834:	4baf      	ldr	r3, [pc, #700]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4aae      	ldr	r2, [pc, #696]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800483a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004840:	e00e      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	2102      	movs	r1, #2
 8004848:	4618      	mov	r0, r3
 800484a:	f001 f80d 	bl	8005868 <RCCEx_PLL2_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004852:	e005      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	e002      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800485e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004866:	4ba3      	ldr	r3, [pc, #652]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004872:	49a0      	ldr	r1, [pc, #640]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004878:	e001      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d042      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004892:	d01f      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004898:	d805      	bhi.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	d00e      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80048a4:	e01f      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80048a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048aa:	d01f      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80048ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b0:	d01e      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80048b2:	e018      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b4:	4b8f      	ldr	r3, [pc, #572]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4a8e      	ldr	r2, [pc, #568]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048c0:	e017      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 ffcd 	bl	8005868 <RCCEx_PLL2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048d2:	e00e      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3324      	adds	r3, #36	; 0x24
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f001 f876 	bl	80059cc <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048e4:	e005      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
      break;
 80048ea:	e002      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80048ec:	bf00      	nop
 80048ee:	e000      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80048f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80048f8:	4b7e      	ldr	r3, [pc, #504]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	497b      	ldr	r1, [pc, #492]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004906:	4313      	orrs	r3, r2
 8004908:	650b      	str	r3, [r1, #80]	; 0x50
 800490a:	e001      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d042      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004924:	d01b      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800492a:	d805      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d022      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004936:	e01b      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004938:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800493c:	d01d      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800493e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004942:	d01c      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004944:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004948:	d01b      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800494a:	e011      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f000 ff88 	bl	8005868 <RCCEx_PLL2_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800495c:	e012      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3324      	adds	r3, #36	; 0x24
 8004962:	2101      	movs	r1, #1
 8004964:	4618      	mov	r0, r3
 8004966:	f001 f831 	bl	80059cc <RCCEx_PLL3_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800496e:	e009      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	75fb      	strb	r3, [r7, #23]
      break;
 8004974:	e006      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004976:	bf00      	nop
 8004978:	e004      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800497a:	bf00      	nop
 800497c:	e002      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800498a:	4b5a      	ldr	r3, [pc, #360]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004996:	4957      	ldr	r1, [pc, #348]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004998:	4313      	orrs	r3, r2
 800499a:	650b      	str	r3, [r1, #80]	; 0x50
 800499c:	e001      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d044      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b8:	d01b      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80049ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049be:	d805      	bhi.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d022      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80049c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80049ca:	e01b      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d0:	d01d      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80049d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049d6:	d01c      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80049d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049dc:	d01b      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80049de:	e011      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 ff3e 	bl	8005868 <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80049f0:	e012      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 ffe7 	bl	80059cc <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a02:	e009      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
      break;
 8004a08:	e006      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e004      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a1e:	4b35      	ldr	r3, [pc, #212]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a2c:	4931      	ldr	r1, [pc, #196]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	658b      	str	r3, [r1, #88]	; 0x58
 8004a32:	e001      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d02d      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a4c:	d005      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a52:	d009      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d013      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004a58:	e00f      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5a:	4b26      	ldr	r3, [pc, #152]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	4a25      	ldr	r2, [pc, #148]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a66:	e00c      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fefa 	bl	8005868 <RCCEx_PLL2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7e:	e000      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a94:	4917      	ldr	r1, [pc, #92]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	650b      	str	r3, [r1, #80]	; 0x50
 8004a9a:	e001      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
 8004a9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d035      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d81b      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004af9 	.word	0x08004af9
 8004ac0:	08004acd 	.word	0x08004acd
 8004ac4:	08004adb 	.word	0x08004adb
 8004ac8:	08004af9 	.word	0x08004af9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	4a08      	ldr	r2, [pc, #32]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ad8:	e00f      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	2102      	movs	r1, #2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fec1 	bl	8005868 <RCCEx_PLL2_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004aea:	e006      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
      break;
 8004af0:	e003      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004af2:	bf00      	nop
 8004af4:	58024400 	.word	0x58024400
      break;
 8004af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b00:	4bba      	ldr	r3, [pc, #744]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	f023 0203 	bic.w	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	49b7      	ldr	r1, [pc, #732]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b12:	e001      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8086 	beq.w	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b26:	4bb2      	ldr	r3, [pc, #712]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4ab1      	ldr	r2, [pc, #708]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b32:	f7fc fc77 	bl	8001424 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b38:	e009      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3a:	f7fc fc73 	bl	8001424 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b64      	cmp	r3, #100	; 0x64
 8004b46:	d902      	bls.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	75fb      	strb	r3, [r7, #23]
        break;
 8004b4c:	e005      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b4e:	4ba8      	ldr	r3, [pc, #672]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d166      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b60:	4ba2      	ldr	r3, [pc, #648]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b6a:	4053      	eors	r3, r2
 8004b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b74:	4b9d      	ldr	r3, [pc, #628]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b7e:	4b9b      	ldr	r3, [pc, #620]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	4a9a      	ldr	r2, [pc, #616]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b8a:	4b98      	ldr	r3, [pc, #608]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	4a97      	ldr	r2, [pc, #604]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b94:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b96:	4a95      	ldr	r2, [pc, #596]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba6:	d115      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fc fc3c 	bl	8001424 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bae:	e00b      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb0:	f7fc fc38 	bl	8001424 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d902      	bls.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	75fb      	strb	r3, [r7, #23]
            break;
 8004bc6:	e005      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bc8:	4b88      	ldr	r3, [pc, #544]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ed      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d126      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be8:	d10d      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004bea:	4b80      	ldr	r3, [pc, #512]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bf8:	0919      	lsrs	r1, r3, #4
 8004bfa:	4b7e      	ldr	r3, [pc, #504]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004bfc:	400b      	ands	r3, r1
 8004bfe:	497b      	ldr	r1, [pc, #492]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	610b      	str	r3, [r1, #16]
 8004c04:	e005      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004c06:	4b79      	ldr	r3, [pc, #484]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	4a78      	ldr	r2, [pc, #480]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c10:	6113      	str	r3, [r2, #16]
 8004c12:	4b76      	ldr	r3, [pc, #472]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c20:	4972      	ldr	r1, [pc, #456]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	670b      	str	r3, [r1, #112]	; 0x70
 8004c26:	e004      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	75bb      	strb	r3, [r7, #22]
 8004c2c:	e001      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d07d      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c42:	2b28      	cmp	r3, #40	; 0x28
 8004c44:	d866      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004c46:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004d1b 	.word	0x08004d1b
 8004c50:	08004d15 	.word	0x08004d15
 8004c54:	08004d15 	.word	0x08004d15
 8004c58:	08004d15 	.word	0x08004d15
 8004c5c:	08004d15 	.word	0x08004d15
 8004c60:	08004d15 	.word	0x08004d15
 8004c64:	08004d15 	.word	0x08004d15
 8004c68:	08004d15 	.word	0x08004d15
 8004c6c:	08004cf1 	.word	0x08004cf1
 8004c70:	08004d15 	.word	0x08004d15
 8004c74:	08004d15 	.word	0x08004d15
 8004c78:	08004d15 	.word	0x08004d15
 8004c7c:	08004d15 	.word	0x08004d15
 8004c80:	08004d15 	.word	0x08004d15
 8004c84:	08004d15 	.word	0x08004d15
 8004c88:	08004d15 	.word	0x08004d15
 8004c8c:	08004d03 	.word	0x08004d03
 8004c90:	08004d15 	.word	0x08004d15
 8004c94:	08004d15 	.word	0x08004d15
 8004c98:	08004d15 	.word	0x08004d15
 8004c9c:	08004d15 	.word	0x08004d15
 8004ca0:	08004d15 	.word	0x08004d15
 8004ca4:	08004d15 	.word	0x08004d15
 8004ca8:	08004d15 	.word	0x08004d15
 8004cac:	08004d1b 	.word	0x08004d1b
 8004cb0:	08004d15 	.word	0x08004d15
 8004cb4:	08004d15 	.word	0x08004d15
 8004cb8:	08004d15 	.word	0x08004d15
 8004cbc:	08004d15 	.word	0x08004d15
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004d15 	.word	0x08004d15
 8004cc8:	08004d15 	.word	0x08004d15
 8004ccc:	08004d1b 	.word	0x08004d1b
 8004cd0:	08004d15 	.word	0x08004d15
 8004cd4:	08004d15 	.word	0x08004d15
 8004cd8:	08004d15 	.word	0x08004d15
 8004cdc:	08004d15 	.word	0x08004d15
 8004ce0:	08004d15 	.word	0x08004d15
 8004ce4:	08004d15 	.word	0x08004d15
 8004ce8:	08004d15 	.word	0x08004d15
 8004cec:	08004d1b 	.word	0x08004d1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fdb6 	bl	8005868 <RCCEx_PLL2_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d00:	e00c      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3324      	adds	r3, #36	; 0x24
 8004d06:	2101      	movs	r1, #1
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fe5f 	bl	80059cc <RCCEx_PLL3_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d12:	e003      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	75fb      	strb	r3, [r7, #23]
      break;
 8004d18:	e000      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d22:	4b32      	ldr	r3, [pc, #200]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2e:	492f      	ldr	r1, [pc, #188]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	654b      	str	r3, [r1, #84]	; 0x54
 8004d34:	e001      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d037      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d820      	bhi.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d97 	.word	0x08004d97
 8004d58:	08004d6d 	.word	0x08004d6d
 8004d5c:	08004d7f 	.word	0x08004d7f
 8004d60:	08004d97 	.word	0x08004d97
 8004d64:	08004d97 	.word	0x08004d97
 8004d68:	08004d97 	.word	0x08004d97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	2101      	movs	r1, #1
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fd78 	bl	8005868 <RCCEx_PLL2_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d7c:	e00c      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3324      	adds	r3, #36	; 0x24
 8004d82:	2101      	movs	r1, #1
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fe21 	bl	80059cc <RCCEx_PLL3_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d8e:	e003      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	75fb      	strb	r3, [r7, #23]
      break;
 8004d94:	e000      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d9e:	4b13      	ldr	r3, [pc, #76]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	f023 0207 	bic.w	r2, r3, #7
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004daa:	4910      	ldr	r1, [pc, #64]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	654b      	str	r3, [r1, #84]	; 0x54
 8004db0:	e001      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d040      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d827      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004dcc:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004e23 	.word	0x08004e23
 8004dd8:	08004df9 	.word	0x08004df9
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e23 	.word	0x08004e23
 8004de4:	08004e23 	.word	0x08004e23
 8004de8:	08004e23 	.word	0x08004e23
 8004dec:	58024400 	.word	0x58024400
 8004df0:	58024800 	.word	0x58024800
 8004df4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fd32 	bl	8005868 <RCCEx_PLL2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e08:	e00c      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3324      	adds	r3, #36	; 0x24
 8004e0e:	2101      	movs	r1, #1
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fddb 	bl	80059cc <RCCEx_PLL3_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e1a:	e003      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e2a:	4bb2      	ldr	r3, [pc, #712]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	f023 0207 	bic.w	r2, r3, #7
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	49ae      	ldr	r1, [pc, #696]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e3e:	e001      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d044      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e5a:	d01b      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e60:	d805      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d022      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004e6c:	e01b      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d01d      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e78:	d01c      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004e7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e7e:	d01b      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004e80:	e011      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3304      	adds	r3, #4
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fced 	bl	8005868 <RCCEx_PLL2_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e92:	e012      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3324      	adds	r3, #36	; 0x24
 8004e98:	2102      	movs	r1, #2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fd96 	bl	80059cc <RCCEx_PLL3_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ea4:	e009      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eaa:	e006      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004eac:	bf00      	nop
 8004eae:	e004      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004eb0:	bf00      	nop
 8004eb2:	e002      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004eb4:	bf00      	nop
 8004eb6:	e000      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ec0:	4b8c      	ldr	r3, [pc, #560]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ece:	4989      	ldr	r1, [pc, #548]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	654b      	str	r3, [r1, #84]	; 0x54
 8004ed4:	e001      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d044      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef0:	d01b      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef6:	d805      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d022      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004f02:	e01b      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f08:	d01d      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004f0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f0e:	d01c      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f14:	d01b      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004f16:	e011      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fca2 	bl	8005868 <RCCEx_PLL2_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f28:	e012      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3324      	adds	r3, #36	; 0x24
 8004f2e:	2102      	movs	r1, #2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fd4b 	bl	80059cc <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f3a:	e009      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004f42:	bf00      	nop
 8004f44:	e004      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f56:	4b67      	ldr	r3, [pc, #412]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f64:	4963      	ldr	r1, [pc, #396]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	658b      	str	r3, [r1, #88]	; 0x58
 8004f6a:	e001      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d044      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f86:	d01b      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f8c:	d805      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d022      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004f98:	e01b      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9e:	d01d      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004fa0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004fa4:	d01c      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004fa6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004faa:	d01b      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004fac:	e011      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fc57 	bl	8005868 <RCCEx_PLL2_Config>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004fbe:	e012      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3324      	adds	r3, #36	; 0x24
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fd00 	bl	80059cc <RCCEx_PLL3_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004fd0:	e009      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd6:	e006      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004fd8:	bf00      	nop
 8004fda:	e004      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004fdc:	bf00      	nop
 8004fde:	e002      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004fe0:	bf00      	nop
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004fec:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ffa:	493e      	ldr	r1, [pc, #248]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	658b      	str	r3, [r1, #88]	; 0x58
 8005000:	e001      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501c:	d10a      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3324      	adds	r3, #36	; 0x24
 8005022:	2102      	movs	r1, #2
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fcd1 	bl	80059cc <RCCEx_PLL3_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005034:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005042:	492c      	ldr	r1, [pc, #176]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005044:	4313      	orrs	r3, r2
 8005046:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d10a      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3324      	adds	r3, #36	; 0x24
 8005064:	2102      	movs	r1, #2
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fcb0 	bl	80059cc <RCCEx_PLL3_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005084:	491b      	ldr	r1, [pc, #108]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005086:	4313      	orrs	r3, r2
 8005088:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d032      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a0:	d00d      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80050a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a6:	d016      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d111      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fbd8 	bl	8005868 <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050bc:	e00c      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3324      	adds	r3, #36	; 0x24
 80050c2:	2102      	movs	r1, #2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fc81 	bl	80059cc <RCCEx_PLL3_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80050ce:	e003      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
      break;
 80050d4:	e000      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80050d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050ec:	4901      	ldr	r1, [pc, #4]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	658b      	str	r3, [r1, #88]	; 0x58
 80050f2:	e003      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80050f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d02f      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005112:	d00c      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005114:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005118:	d015      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800511a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511e:	d10f      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005120:	4b79      	ldr	r3, [pc, #484]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	4a78      	ldr	r2, [pc, #480]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800512a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800512c:	e00c      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3324      	adds	r3, #36	; 0x24
 8005132:	2101      	movs	r1, #1
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fc49 	bl	80059cc <RCCEx_PLL3_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800513e:	e003      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
      break;
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005148:	7dfb      	ldrb	r3, [r7, #23]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800514e:	4b6e      	ldr	r3, [pc, #440]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515c:	496a      	ldr	r1, [pc, #424]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800515e:	4313      	orrs	r3, r2
 8005160:	654b      	str	r3, [r1, #84]	; 0x54
 8005162:	e001      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d029      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d007      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005182:	e00f      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005184:	4b60      	ldr	r3, [pc, #384]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	4a5f      	ldr	r2, [pc, #380]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800518a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005190:	e00b      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	2102      	movs	r1, #2
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fb65 	bl	8005868 <RCCEx_PLL2_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80051a2:	e002      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051b0:	4b55      	ldr	r3, [pc, #340]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80051b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	4952      	ldr	r1, [pc, #328]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051c2:	e001      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c4:	7dfb      	ldrb	r3, [r7, #23]
 80051c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3324      	adds	r3, #36	; 0x24
 80051d8:	2102      	movs	r1, #2
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fbf6 	bl	80059cc <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d02f      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051fe:	d00c      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005204:	d802      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d011      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800520a:	e00d      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800520c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005210:	d00f      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005216:	d00e      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005218:	e006      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800521a:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a3a      	ldr	r2, [pc, #232]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005226:	e007      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
      break;
 800522c:	e004      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800522e:	bf00      	nop
 8005230:	e002      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800523e:	4b32      	ldr	r3, [pc, #200]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800524a:	492f      	ldr	r1, [pc, #188]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800524c:	4313      	orrs	r3, r2
 800524e:	654b      	str	r3, [r1, #84]	; 0x54
 8005250:	e001      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005262:	4b29      	ldr	r3, [pc, #164]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005266:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	4926      	ldr	r1, [pc, #152]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005270:	4313      	orrs	r3, r2
 8005272:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005280:	4b21      	ldr	r3, [pc, #132]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800528e:	491e      	ldr	r1, [pc, #120]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005290:	4313      	orrs	r3, r2
 8005292:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ac:	4916      	ldr	r1, [pc, #88]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	4a11      	ldr	r2, [pc, #68]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052c8:	6113      	str	r3, [r2, #16]
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052d4:	490c      	ldr	r1, [pc, #48]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da08      	bge.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ee:	4906      	ldr	r1, [pc, #24]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80052f4:	7dbb      	ldrb	r3, [r7, #22]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e000      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	58024400 	.word	0x58024400

0800530c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005310:	f7ff f870 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8005314:	4601      	mov	r1, r0
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	4a04      	ldr	r2, [pc, #16]	; (8005334 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005322:	5cd3      	ldrb	r3, [r2, r3]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800532c:	4618      	mov	r0, r3
 800532e:	bd80      	pop	{r7, pc}
 8005330:	58024400 	.word	0x58024400
 8005334:	08014fd0 	.word	0x08014fd0

08005338 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005338:	b480      	push	{r7}
 800533a:	b089      	sub	sp, #36	; 0x24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005340:	4b9d      	ldr	r3, [pc, #628]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800534a:	4b9b      	ldr	r3, [pc, #620]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	0b1b      	lsrs	r3, r3, #12
 8005350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005354:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005356:	4b98      	ldr	r3, [pc, #608]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005362:	4b95      	ldr	r3, [pc, #596]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	08db      	lsrs	r3, r3, #3
 8005368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 810a 	beq.w	800559a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d05a      	beq.n	8005442 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800538c:	2b01      	cmp	r3, #1
 800538e:	d302      	bcc.n	8005396 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005390:	2b02      	cmp	r3, #2
 8005392:	d078      	beq.n	8005486 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005394:	e099      	b.n	80054ca <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005396:	4b88      	ldr	r3, [pc, #544]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d02d      	beq.n	80053fe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053a2:	4b85      	ldr	r3, [pc, #532]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	08db      	lsrs	r3, r3, #3
 80053a8:	f003 0303 	and.w	r3, r3, #3
 80053ac:	4a83      	ldr	r2, [pc, #524]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80053ae:	fa22 f303 	lsr.w	r3, r2, r3
 80053b2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053cc:	4b7a      	ldr	r3, [pc, #488]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d4:	ee07 3a90 	vmov	s15, r3
 80053d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80053e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053fc:	e087      	b.n	800550e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005408:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800540c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005410:	4b69      	ldr	r3, [pc, #420]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005418:	ee07 3a90 	vmov	s15, r3
 800541c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005420:	ed97 6a03 	vldr	s12, [r7, #12]
 8005424:	eddf 5a66 	vldr	s11, [pc, #408]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005440:	e065      	b.n	800550e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	ee07 3a90 	vmov	s15, r3
 8005448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005454:	4b58      	ldr	r3, [pc, #352]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005464:	ed97 6a03 	vldr	s12, [r7, #12]
 8005468:	eddf 5a55 	vldr	s11, [pc, #340]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800546c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005480:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005484:	e043      	b.n	800550e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	ee07 3a90 	vmov	s15, r3
 800548c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005490:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80055cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005498:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a0:	ee07 3a90 	vmov	s15, r3
 80054a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80054b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054c8:	e021      	b.n	800550e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	ee07 3a90 	vmov	s15, r3
 80054d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80054d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054dc:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80054f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005508:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800550c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800550e:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	0a5b      	lsrs	r3, r3, #9
 8005514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005524:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005528:	edd7 6a07 	vldr	s13, [r7, #28]
 800552c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005534:	ee17 2a90 	vmov	r2, s15
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800553c:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005556:	edd7 6a07 	vldr	s13, [r7, #28]
 800555a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005562:	ee17 2a90 	vmov	r2, s15
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800556a:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	0e1b      	lsrs	r3, r3, #24
 8005570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005584:	edd7 6a07 	vldr	s13, [r7, #28]
 8005588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005590:	ee17 2a90 	vmov	r2, s15
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005598:	e008      	b.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	3724      	adds	r7, #36	; 0x24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	58024400 	.word	0x58024400
 80055bc:	03d09000 	.word	0x03d09000
 80055c0:	46000000 	.word	0x46000000
 80055c4:	4c742400 	.word	0x4c742400
 80055c8:	4a742400 	.word	0x4a742400
 80055cc:	4af42400 	.word	0x4af42400

080055d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b089      	sub	sp, #36	; 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055d8:	4b9d      	ldr	r3, [pc, #628]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80055e2:	4b9b      	ldr	r3, [pc, #620]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	0d1b      	lsrs	r3, r3, #20
 80055e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80055ee:	4b98      	ldr	r3, [pc, #608]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80055fa:	4b95      	ldr	r3, [pc, #596]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	08db      	lsrs	r3, r3, #3
 8005600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005612:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 810a 	beq.w	8005832 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d05a      	beq.n	80056da <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005624:	2b01      	cmp	r3, #1
 8005626:	d302      	bcc.n	800562e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005628:	2b02      	cmp	r3, #2
 800562a:	d078      	beq.n	800571e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800562c:	e099      	b.n	8005762 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800562e:	4b88      	ldr	r3, [pc, #544]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d02d      	beq.n	8005696 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800563a:	4b85      	ldr	r3, [pc, #532]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	08db      	lsrs	r3, r3, #3
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	4a83      	ldr	r2, [pc, #524]	; (8005854 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005646:	fa22 f303 	lsr.w	r3, r2, r3
 800564a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005664:	4b7a      	ldr	r3, [pc, #488]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005674:	ed97 6a03 	vldr	s12, [r7, #12]
 8005678:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800567c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005690:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005694:	e087      	b.n	80057a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800585c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80056a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a8:	4b69      	ldr	r3, [pc, #420]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80056bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80056c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056d8:	e065      	b.n	80057a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80056e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ec:	4b58      	ldr	r3, [pc, #352]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005700:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800571c:	e043      	b.n	80057a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	ee07 3a90 	vmov	s15, r3
 8005724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005728:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800572c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005730:	4b47      	ldr	r3, [pc, #284]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005738:	ee07 3a90 	vmov	s15, r3
 800573c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005740:	ed97 6a03 	vldr	s12, [r7, #12]
 8005744:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005748:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005760:	e021      	b.n	80057a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005774:	4b36      	ldr	r3, [pc, #216]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577c:	ee07 3a90 	vmov	s15, r3
 8005780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005784:	ed97 6a03 	vldr	s12, [r7, #12]
 8005788:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800578c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057a4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80057a6:	4b2a      	ldr	r3, [pc, #168]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	0a5b      	lsrs	r3, r3, #9
 80057ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057cc:	ee17 2a90 	vmov	r2, s15
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80057d4:	4b1e      	ldr	r3, [pc, #120]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	0c1b      	lsrs	r3, r3, #16
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fa:	ee17 2a90 	vmov	r2, s15
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	0e1b      	lsrs	r3, r3, #24
 8005808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580c:	ee07 3a90 	vmov	s15, r3
 8005810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800581c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005828:	ee17 2a90 	vmov	r2, s15
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005830:	e008      	b.n	8005844 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	3724      	adds	r7, #36	; 0x24
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	58024400 	.word	0x58024400
 8005854:	03d09000 	.word	0x03d09000
 8005858:	46000000 	.word	0x46000000
 800585c:	4c742400 	.word	0x4c742400
 8005860:	4a742400 	.word	0x4a742400
 8005864:	4af42400 	.word	0x4af42400

08005868 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005876:	4b53      	ldr	r3, [pc, #332]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	2b03      	cmp	r3, #3
 8005880:	d101      	bne.n	8005886 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e099      	b.n	80059ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005886:	4b4f      	ldr	r3, [pc, #316]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a4e      	ldr	r2, [pc, #312]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800588c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005892:	f7fb fdc7 	bl	8001424 <HAL_GetTick>
 8005896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005898:	e008      	b.n	80058ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800589a:	f7fb fdc3 	bl	8001424 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e086      	b.n	80059ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058ac:	4b45      	ldr	r3, [pc, #276]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058b8:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	031b      	lsls	r3, r3, #12
 80058c6:	493f      	ldr	r1, [pc, #252]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	628b      	str	r3, [r1, #40]	; 0x28
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	3b01      	subs	r3, #1
 80058dc:	025b      	lsls	r3, r3, #9
 80058de:	b29b      	uxth	r3, r3
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	041b      	lsls	r3, r3, #16
 80058ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	061b      	lsls	r3, r3, #24
 80058f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058fc:	4931      	ldr	r1, [pc, #196]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005902:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	492d      	ldr	r1, [pc, #180]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005910:	4313      	orrs	r3, r2
 8005912:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005914:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	f023 0220 	bic.w	r2, r3, #32
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	4928      	ldr	r1, [pc, #160]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005922:	4313      	orrs	r3, r2
 8005924:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005926:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800592c:	f023 0310 	bic.w	r3, r3, #16
 8005930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005932:	4b24      	ldr	r3, [pc, #144]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005936:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <RCCEx_PLL2_Config+0x160>)
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	69d2      	ldr	r2, [r2, #28]
 800593e:	00d2      	lsls	r2, r2, #3
 8005940:	4920      	ldr	r1, [pc, #128]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005942:	4313      	orrs	r3, r2
 8005944:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005946:	4b1f      	ldr	r3, [pc, #124]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800594c:	f043 0310 	orr.w	r3, r3, #16
 8005950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005958:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800595e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005962:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005964:	e00f      	b.n	8005986 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d106      	bne.n	800597a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800596c:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	4a14      	ldr	r2, [pc, #80]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005978:	e005      	b.n	8005986 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800597a:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005984:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005986:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a0e      	ldr	r2, [pc, #56]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 800598c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005992:	f7fb fd47 	bl	8001424 <HAL_GetTick>
 8005996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005998:	e008      	b.n	80059ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800599a:	f7fb fd43 	bl	8001424 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e006      	b.n	80059ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <RCCEx_PLL2_Config+0x15c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
 80059c8:	ffff0007 	.word	0xffff0007

080059cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059da:	4b53      	ldr	r3, [pc, #332]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d101      	bne.n	80059ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e099      	b.n	8005b1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80059ea:	4b4f      	ldr	r3, [pc, #316]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4e      	ldr	r2, [pc, #312]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 80059f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f6:	f7fb fd15 	bl	8001424 <HAL_GetTick>
 80059fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059fc:	e008      	b.n	8005a10 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059fe:	f7fb fd11 	bl	8001424 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e086      	b.n	8005b1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a10:	4b45      	ldr	r3, [pc, #276]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f0      	bne.n	80059fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a1c:	4b42      	ldr	r3, [pc, #264]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	051b      	lsls	r3, r3, #20
 8005a2a:	493f      	ldr	r1, [pc, #252]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	025b      	lsls	r3, r3, #9
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	061b      	lsls	r3, r3, #24
 8005a5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a60:	4931      	ldr	r1, [pc, #196]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a66:	4b30      	ldr	r3, [pc, #192]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	492d      	ldr	r1, [pc, #180]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a78:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	4928      	ldr	r1, [pc, #160]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a8a:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	4a26      	ldr	r2, [pc, #152]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <RCCEx_PLL3_Config+0x160>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	69d2      	ldr	r2, [r2, #28]
 8005aa2:	00d2      	lsls	r2, r2, #3
 8005aa4:	4920      	ldr	r1, [pc, #128]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005aaa:	4b1f      	ldr	r3, [pc, #124]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005abc:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ac2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ac6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ac8:	e00f      	b.n	8005aea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d106      	bne.n	8005ade <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ad0:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ad6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ada:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005adc:	e005      	b.n	8005aea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ade:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005ae4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ae8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005aea:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a0e      	ldr	r2, [pc, #56]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af6:	f7fb fc95 	bl	8001424 <HAL_GetTick>
 8005afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005afc:	e008      	b.n	8005b10 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005afe:	f7fb fc91 	bl	8001424 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e006      	b.n	8005b1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <RCCEx_PLL3_Config+0x15c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f0      	beq.n	8005afe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	58024400 	.word	0x58024400
 8005b2c:	ffff0007 	.word	0xffff0007

08005b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e049      	b.n	8005bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f841 	bl	8005bde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 f9be 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d001      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e021      	b.n	8005c50 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <HAL_TIM_Base_Start_IT+0x68>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b06      	cmp	r3, #6
 8005c34:	d00b      	beq.n	8005c4e <HAL_TIM_Base_Start_IT+0x5a>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d007      	beq.n	8005c4e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	00010007 	.word	0x00010007

08005c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d122      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d11b      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0202 	mvn.w	r2, #2
 8005c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f905 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005ca8:	e005      	b.n	8005cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f8f7 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f908 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d122      	bne.n	8005d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d11b      	bne.n	8005d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0204 	mvn.w	r2, #4
 8005ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f8db 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005cfc:	e005      	b.n	8005d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f8cd 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f8de 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d122      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d11b      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0208 	mvn.w	r2, #8
 8005d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2204      	movs	r2, #4
 8005d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f8b1 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005d50:	e005      	b.n	8005d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8a3 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f8b4 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b10      	cmp	r3, #16
 8005d70:	d122      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d11b      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0210 	mvn.w	r2, #16
 8005d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f887 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005da4:	e005      	b.n	8005db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f879 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f88a 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d10e      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d107      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0201 	mvn.w	r2, #1
 8005ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fa ff00 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d10e      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfc:	2b80      	cmp	r3, #128	; 0x80
 8005dfe:	d107      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f914 	bl	8006038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1e:	d10e      	bne.n	8005e3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2a:	2b80      	cmp	r3, #128	; 0x80
 8005e2c:	d107      	bne.n	8005e3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f907 	bl	800604c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	d10e      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	d107      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f838 	bl	8005eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d10e      	bne.n	8005e96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d107      	bne.n	8005e96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f06f 0220 	mvn.w	r2, #32
 8005e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8c7 	bl	8006024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a40      	ldr	r2, [pc, #256]	; (8006004 <TIM_Base_SetConfig+0x114>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d00f      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a3d      	ldr	r2, [pc, #244]	; (8006008 <TIM_Base_SetConfig+0x118>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a3c      	ldr	r2, [pc, #240]	; (800600c <TIM_Base_SetConfig+0x11c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a3b      	ldr	r2, [pc, #236]	; (8006010 <TIM_Base_SetConfig+0x120>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a3a      	ldr	r2, [pc, #232]	; (8006014 <TIM_Base_SetConfig+0x124>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d108      	bne.n	8005f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <TIM_Base_SetConfig+0x114>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01f      	beq.n	8005f8a <TIM_Base_SetConfig+0x9a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f50:	d01b      	beq.n	8005f8a <TIM_Base_SetConfig+0x9a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <TIM_Base_SetConfig+0x118>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d017      	beq.n	8005f8a <TIM_Base_SetConfig+0x9a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2b      	ldr	r2, [pc, #172]	; (800600c <TIM_Base_SetConfig+0x11c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d013      	beq.n	8005f8a <TIM_Base_SetConfig+0x9a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <TIM_Base_SetConfig+0x120>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00f      	beq.n	8005f8a <TIM_Base_SetConfig+0x9a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a29      	ldr	r2, [pc, #164]	; (8006014 <TIM_Base_SetConfig+0x124>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <TIM_Base_SetConfig+0x9a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a28      	ldr	r2, [pc, #160]	; (8006018 <TIM_Base_SetConfig+0x128>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <TIM_Base_SetConfig+0x9a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <TIM_Base_SetConfig+0x12c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_Base_SetConfig+0x9a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a26      	ldr	r2, [pc, #152]	; (8006020 <TIM_Base_SetConfig+0x130>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d108      	bne.n	8005f9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a10      	ldr	r2, [pc, #64]	; (8006004 <TIM_Base_SetConfig+0x114>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_Base_SetConfig+0xf8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a12      	ldr	r2, [pc, #72]	; (8006014 <TIM_Base_SetConfig+0x124>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_Base_SetConfig+0xf8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a11      	ldr	r2, [pc, #68]	; (8006018 <TIM_Base_SetConfig+0x128>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_Base_SetConfig+0xf8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a10      	ldr	r2, [pc, #64]	; (800601c <TIM_Base_SetConfig+0x12c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0xf8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a0f      	ldr	r2, [pc, #60]	; (8006020 <TIM_Base_SetConfig+0x130>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d103      	bne.n	8005ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	615a      	str	r2, [r3, #20]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40010400 	.word	0x40010400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800

08006024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e042      	b.n	80060f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fa fde1 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2224      	movs	r2, #36	; 0x24
 800608e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f82c 	bl	8006100 <UART_SetConfig>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e022      	b.n	80060f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fdd0 	bl	8006c60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fe57 	bl	8006da4 <UART_CheckIdleState>
 80060f6:	4603      	mov	r3, r0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006100:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006104:	b08e      	sub	sp, #56	; 0x38
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	4313      	orrs	r3, r2
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800612c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800612e:	4313      	orrs	r3, r2
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4bc1      	ldr	r3, [pc, #772]	; (8006440 <UART_SetConfig+0x340>)
 800613a:	4013      	ands	r3, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006142:	430b      	orrs	r3, r1
 8006144:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4ab7      	ldr	r2, [pc, #732]	; (8006444 <UART_SetConfig+0x344>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006172:	4313      	orrs	r3, r2
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	4bb2      	ldr	r3, [pc, #712]	; (8006448 <UART_SetConfig+0x348>)
 800617e:	4013      	ands	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006186:	430b      	orrs	r3, r1
 8006188:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	f023 010f 	bic.w	r1, r3, #15
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4aa9      	ldr	r2, [pc, #676]	; (800644c <UART_SetConfig+0x34c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d177      	bne.n	800629a <UART_SetConfig+0x19a>
 80061aa:	4ba9      	ldr	r3, [pc, #676]	; (8006450 <UART_SetConfig+0x350>)
 80061ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061b2:	2b28      	cmp	r3, #40	; 0x28
 80061b4:	d86c      	bhi.n	8006290 <UART_SetConfig+0x190>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0xbc>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	08006261 	.word	0x08006261
 80061c0:	08006291 	.word	0x08006291
 80061c4:	08006291 	.word	0x08006291
 80061c8:	08006291 	.word	0x08006291
 80061cc:	08006291 	.word	0x08006291
 80061d0:	08006291 	.word	0x08006291
 80061d4:	08006291 	.word	0x08006291
 80061d8:	08006291 	.word	0x08006291
 80061dc:	08006269 	.word	0x08006269
 80061e0:	08006291 	.word	0x08006291
 80061e4:	08006291 	.word	0x08006291
 80061e8:	08006291 	.word	0x08006291
 80061ec:	08006291 	.word	0x08006291
 80061f0:	08006291 	.word	0x08006291
 80061f4:	08006291 	.word	0x08006291
 80061f8:	08006291 	.word	0x08006291
 80061fc:	08006271 	.word	0x08006271
 8006200:	08006291 	.word	0x08006291
 8006204:	08006291 	.word	0x08006291
 8006208:	08006291 	.word	0x08006291
 800620c:	08006291 	.word	0x08006291
 8006210:	08006291 	.word	0x08006291
 8006214:	08006291 	.word	0x08006291
 8006218:	08006291 	.word	0x08006291
 800621c:	08006279 	.word	0x08006279
 8006220:	08006291 	.word	0x08006291
 8006224:	08006291 	.word	0x08006291
 8006228:	08006291 	.word	0x08006291
 800622c:	08006291 	.word	0x08006291
 8006230:	08006291 	.word	0x08006291
 8006234:	08006291 	.word	0x08006291
 8006238:	08006291 	.word	0x08006291
 800623c:	08006281 	.word	0x08006281
 8006240:	08006291 	.word	0x08006291
 8006244:	08006291 	.word	0x08006291
 8006248:	08006291 	.word	0x08006291
 800624c:	08006291 	.word	0x08006291
 8006250:	08006291 	.word	0x08006291
 8006254:	08006291 	.word	0x08006291
 8006258:	08006291 	.word	0x08006291
 800625c:	08006289 	.word	0x08006289
 8006260:	2301      	movs	r3, #1
 8006262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006266:	e233      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626e:	e22f      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006276:	e22b      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627e:	e227      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006280:	2320      	movs	r3, #32
 8006282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006286:	e223      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	e21f      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006296:	bf00      	nop
 8006298:	e21a      	b.n	80066d0 <UART_SetConfig+0x5d0>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a6d      	ldr	r2, [pc, #436]	; (8006454 <UART_SetConfig+0x354>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d132      	bne.n	800630a <UART_SetConfig+0x20a>
 80062a4:	4b6a      	ldr	r3, [pc, #424]	; (8006450 <UART_SetConfig+0x350>)
 80062a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	d827      	bhi.n	8006300 <UART_SetConfig+0x200>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x1b8>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062d1 	.word	0x080062d1
 80062bc:	080062d9 	.word	0x080062d9
 80062c0:	080062e1 	.word	0x080062e1
 80062c4:	080062e9 	.word	0x080062e9
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	080062f9 	.word	0x080062f9
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d6:	e1fb      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80062d8:	2304      	movs	r3, #4
 80062da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062de:	e1f7      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80062e0:	2308      	movs	r3, #8
 80062e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062e6:	e1f3      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80062e8:	2310      	movs	r3, #16
 80062ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ee:	e1ef      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80062f0:	2320      	movs	r3, #32
 80062f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f6:	e1eb      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80062f8:	2340      	movs	r3, #64	; 0x40
 80062fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fe:	e1e7      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006300:	2380      	movs	r3, #128	; 0x80
 8006302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006306:	bf00      	nop
 8006308:	e1e2      	b.n	80066d0 <UART_SetConfig+0x5d0>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a52      	ldr	r2, [pc, #328]	; (8006458 <UART_SetConfig+0x358>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d132      	bne.n	800637a <UART_SetConfig+0x27a>
 8006314:	4b4e      	ldr	r3, [pc, #312]	; (8006450 <UART_SetConfig+0x350>)
 8006316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	2b05      	cmp	r3, #5
 800631e:	d827      	bhi.n	8006370 <UART_SetConfig+0x270>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <UART_SetConfig+0x228>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	08006341 	.word	0x08006341
 800632c:	08006349 	.word	0x08006349
 8006330:	08006351 	.word	0x08006351
 8006334:	08006359 	.word	0x08006359
 8006338:	08006361 	.word	0x08006361
 800633c:	08006369 	.word	0x08006369
 8006340:	2300      	movs	r3, #0
 8006342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006346:	e1c3      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006348:	2304      	movs	r3, #4
 800634a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800634e:	e1bf      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006350:	2308      	movs	r3, #8
 8006352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006356:	e1bb      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006358:	2310      	movs	r3, #16
 800635a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635e:	e1b7      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006360:	2320      	movs	r3, #32
 8006362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006366:	e1b3      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006368:	2340      	movs	r3, #64	; 0x40
 800636a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636e:	e1af      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006370:	2380      	movs	r3, #128	; 0x80
 8006372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006376:	bf00      	nop
 8006378:	e1aa      	b.n	80066d0 <UART_SetConfig+0x5d0>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a37      	ldr	r2, [pc, #220]	; (800645c <UART_SetConfig+0x35c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d132      	bne.n	80063ea <UART_SetConfig+0x2ea>
 8006384:	4b32      	ldr	r3, [pc, #200]	; (8006450 <UART_SetConfig+0x350>)
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	2b05      	cmp	r3, #5
 800638e:	d827      	bhi.n	80063e0 <UART_SetConfig+0x2e0>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0x298>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063b9 	.word	0x080063b9
 80063a0:	080063c1 	.word	0x080063c1
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	080063d1 	.word	0x080063d1
 80063ac:	080063d9 	.word	0x080063d9
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063b6:	e18b      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80063b8:	2304      	movs	r3, #4
 80063ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063be:	e187      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80063c0:	2308      	movs	r3, #8
 80063c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c6:	e183      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80063c8:	2310      	movs	r3, #16
 80063ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ce:	e17f      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80063d0:	2320      	movs	r3, #32
 80063d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d6:	e17b      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80063d8:	2340      	movs	r3, #64	; 0x40
 80063da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063de:	e177      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063e6:	bf00      	nop
 80063e8:	e172      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1c      	ldr	r2, [pc, #112]	; (8006460 <UART_SetConfig+0x360>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d144      	bne.n	800647e <UART_SetConfig+0x37e>
 80063f4:	4b16      	ldr	r3, [pc, #88]	; (8006450 <UART_SetConfig+0x350>)
 80063f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	2b05      	cmp	r3, #5
 80063fe:	d839      	bhi.n	8006474 <UART_SetConfig+0x374>
 8006400:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <UART_SetConfig+0x308>)
 8006402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006406:	bf00      	nop
 8006408:	08006421 	.word	0x08006421
 800640c:	08006429 	.word	0x08006429
 8006410:	08006431 	.word	0x08006431
 8006414:	08006439 	.word	0x08006439
 8006418:	08006465 	.word	0x08006465
 800641c:	0800646d 	.word	0x0800646d
 8006420:	2300      	movs	r3, #0
 8006422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006426:	e153      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006428:	2304      	movs	r3, #4
 800642a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800642e:	e14f      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006430:	2308      	movs	r3, #8
 8006432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006436:	e14b      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006438:	2310      	movs	r3, #16
 800643a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800643e:	e147      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006440:	cfff69f3 	.word	0xcfff69f3
 8006444:	58000c00 	.word	0x58000c00
 8006448:	11fff4ff 	.word	0x11fff4ff
 800644c:	40011000 	.word	0x40011000
 8006450:	58024400 	.word	0x58024400
 8006454:	40004400 	.word	0x40004400
 8006458:	40004800 	.word	0x40004800
 800645c:	40004c00 	.word	0x40004c00
 8006460:	40005000 	.word	0x40005000
 8006464:	2320      	movs	r3, #32
 8006466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646a:	e131      	b.n	80066d0 <UART_SetConfig+0x5d0>
 800646c:	2340      	movs	r3, #64	; 0x40
 800646e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006472:	e12d      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800647a:	bf00      	nop
 800647c:	e128      	b.n	80066d0 <UART_SetConfig+0x5d0>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4ab6      	ldr	r2, [pc, #728]	; (800675c <UART_SetConfig+0x65c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d178      	bne.n	800657a <UART_SetConfig+0x47a>
 8006488:	4bb5      	ldr	r3, [pc, #724]	; (8006760 <UART_SetConfig+0x660>)
 800648a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006490:	2b28      	cmp	r3, #40	; 0x28
 8006492:	d86d      	bhi.n	8006570 <UART_SetConfig+0x470>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <UART_SetConfig+0x39c>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	08006541 	.word	0x08006541
 80064a0:	08006571 	.word	0x08006571
 80064a4:	08006571 	.word	0x08006571
 80064a8:	08006571 	.word	0x08006571
 80064ac:	08006571 	.word	0x08006571
 80064b0:	08006571 	.word	0x08006571
 80064b4:	08006571 	.word	0x08006571
 80064b8:	08006571 	.word	0x08006571
 80064bc:	08006549 	.word	0x08006549
 80064c0:	08006571 	.word	0x08006571
 80064c4:	08006571 	.word	0x08006571
 80064c8:	08006571 	.word	0x08006571
 80064cc:	08006571 	.word	0x08006571
 80064d0:	08006571 	.word	0x08006571
 80064d4:	08006571 	.word	0x08006571
 80064d8:	08006571 	.word	0x08006571
 80064dc:	08006551 	.word	0x08006551
 80064e0:	08006571 	.word	0x08006571
 80064e4:	08006571 	.word	0x08006571
 80064e8:	08006571 	.word	0x08006571
 80064ec:	08006571 	.word	0x08006571
 80064f0:	08006571 	.word	0x08006571
 80064f4:	08006571 	.word	0x08006571
 80064f8:	08006571 	.word	0x08006571
 80064fc:	08006559 	.word	0x08006559
 8006500:	08006571 	.word	0x08006571
 8006504:	08006571 	.word	0x08006571
 8006508:	08006571 	.word	0x08006571
 800650c:	08006571 	.word	0x08006571
 8006510:	08006571 	.word	0x08006571
 8006514:	08006571 	.word	0x08006571
 8006518:	08006571 	.word	0x08006571
 800651c:	08006561 	.word	0x08006561
 8006520:	08006571 	.word	0x08006571
 8006524:	08006571 	.word	0x08006571
 8006528:	08006571 	.word	0x08006571
 800652c:	08006571 	.word	0x08006571
 8006530:	08006571 	.word	0x08006571
 8006534:	08006571 	.word	0x08006571
 8006538:	08006571 	.word	0x08006571
 800653c:	08006569 	.word	0x08006569
 8006540:	2301      	movs	r3, #1
 8006542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006546:	e0c3      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006548:	2304      	movs	r3, #4
 800654a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654e:	e0bf      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006550:	2308      	movs	r3, #8
 8006552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006556:	e0bb      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006558:	2310      	movs	r3, #16
 800655a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800655e:	e0b7      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006560:	2320      	movs	r3, #32
 8006562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006566:	e0b3      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006568:	2340      	movs	r3, #64	; 0x40
 800656a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800656e:	e0af      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006576:	bf00      	nop
 8006578:	e0aa      	b.n	80066d0 <UART_SetConfig+0x5d0>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a79      	ldr	r2, [pc, #484]	; (8006764 <UART_SetConfig+0x664>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d132      	bne.n	80065ea <UART_SetConfig+0x4ea>
 8006584:	4b76      	ldr	r3, [pc, #472]	; (8006760 <UART_SetConfig+0x660>)
 8006586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	2b05      	cmp	r3, #5
 800658e:	d827      	bhi.n	80065e0 <UART_SetConfig+0x4e0>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <UART_SetConfig+0x498>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065b1 	.word	0x080065b1
 800659c:	080065b9 	.word	0x080065b9
 80065a0:	080065c1 	.word	0x080065c1
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065d1 	.word	0x080065d1
 80065ac:	080065d9 	.word	0x080065d9
 80065b0:	2300      	movs	r3, #0
 80065b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065b6:	e08b      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80065b8:	2304      	movs	r3, #4
 80065ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065be:	e087      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80065c0:	2308      	movs	r3, #8
 80065c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c6:	e083      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80065c8:	2310      	movs	r3, #16
 80065ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ce:	e07f      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80065d0:	2320      	movs	r3, #32
 80065d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d6:	e07b      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80065d8:	2340      	movs	r3, #64	; 0x40
 80065da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065de:	e077      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065e6:	bf00      	nop
 80065e8:	e072      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a5e      	ldr	r2, [pc, #376]	; (8006768 <UART_SetConfig+0x668>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d132      	bne.n	800665a <UART_SetConfig+0x55a>
 80065f4:	4b5a      	ldr	r3, [pc, #360]	; (8006760 <UART_SetConfig+0x660>)
 80065f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	2b05      	cmp	r3, #5
 80065fe:	d827      	bhi.n	8006650 <UART_SetConfig+0x550>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0x508>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	08006621 	.word	0x08006621
 800660c:	08006629 	.word	0x08006629
 8006610:	08006631 	.word	0x08006631
 8006614:	08006639 	.word	0x08006639
 8006618:	08006641 	.word	0x08006641
 800661c:	08006649 	.word	0x08006649
 8006620:	2300      	movs	r3, #0
 8006622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006626:	e053      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006628:	2304      	movs	r3, #4
 800662a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662e:	e04f      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006630:	2308      	movs	r3, #8
 8006632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006636:	e04b      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006638:	2310      	movs	r3, #16
 800663a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663e:	e047      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006640:	2320      	movs	r3, #32
 8006642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006646:	e043      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664e:	e03f      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006656:	bf00      	nop
 8006658:	e03a      	b.n	80066d0 <UART_SetConfig+0x5d0>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a43      	ldr	r2, [pc, #268]	; (800676c <UART_SetConfig+0x66c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d132      	bne.n	80066ca <UART_SetConfig+0x5ca>
 8006664:	4b3e      	ldr	r3, [pc, #248]	; (8006760 <UART_SetConfig+0x660>)
 8006666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	2b05      	cmp	r3, #5
 800666e:	d827      	bhi.n	80066c0 <UART_SetConfig+0x5c0>
 8006670:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <UART_SetConfig+0x578>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	08006691 	.word	0x08006691
 800667c:	08006699 	.word	0x08006699
 8006680:	080066a1 	.word	0x080066a1
 8006684:	080066a9 	.word	0x080066a9
 8006688:	080066b1 	.word	0x080066b1
 800668c:	080066b9 	.word	0x080066b9
 8006690:	2302      	movs	r3, #2
 8006692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006696:	e01b      	b.n	80066d0 <UART_SetConfig+0x5d0>
 8006698:	2304      	movs	r3, #4
 800669a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800669e:	e017      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80066a0:	2308      	movs	r3, #8
 80066a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066a6:	e013      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ae:	e00f      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80066b0:	2320      	movs	r3, #32
 80066b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066b6:	e00b      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80066b8:	2340      	movs	r3, #64	; 0x40
 80066ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066be:	e007      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c6:	bf00      	nop
 80066c8:	e002      	b.n	80066d0 <UART_SetConfig+0x5d0>
 80066ca:	2380      	movs	r3, #128	; 0x80
 80066cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a25      	ldr	r2, [pc, #148]	; (800676c <UART_SetConfig+0x66c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	f040 80b8 	bne.w	800684c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d019      	beq.n	8006718 <UART_SetConfig+0x618>
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	dc04      	bgt.n	80066f2 <UART_SetConfig+0x5f2>
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d009      	beq.n	8006700 <UART_SetConfig+0x600>
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d00b      	beq.n	8006708 <UART_SetConfig+0x608>
 80066f0:	e042      	b.n	8006778 <UART_SetConfig+0x678>
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d02b      	beq.n	800674e <UART_SetConfig+0x64e>
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d02c      	beq.n	8006754 <UART_SetConfig+0x654>
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d014      	beq.n	8006728 <UART_SetConfig+0x628>
 80066fe:	e03b      	b.n	8006778 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006700:	f7fe fe04 	bl	800530c <HAL_RCCEx_GetD3PCLK1Freq>
 8006704:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006706:	e03d      	b.n	8006784 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	4618      	mov	r0, r3
 800670e:	f7fe fe13 	bl	8005338 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006716:	e035      	b.n	8006784 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006718:	f107 0308 	add.w	r3, r7, #8
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe ff57 	bl	80055d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006726:	e02d      	b.n	8006784 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <UART_SetConfig+0x660>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <UART_SetConfig+0x660>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	08db      	lsrs	r3, r3, #3
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	4a0c      	ldr	r2, [pc, #48]	; (8006770 <UART_SetConfig+0x670>)
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006746:	e01d      	b.n	8006784 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006748:	4b09      	ldr	r3, [pc, #36]	; (8006770 <UART_SetConfig+0x670>)
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800674c:	e01a      	b.n	8006784 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <UART_SetConfig+0x674>)
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006752:	e017      	b.n	8006784 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800675a:	e013      	b.n	8006784 <UART_SetConfig+0x684>
 800675c:	40011400 	.word	0x40011400
 8006760:	58024400 	.word	0x58024400
 8006764:	40007800 	.word	0x40007800
 8006768:	40007c00 	.word	0x40007c00
 800676c:	58000c00 	.word	0x58000c00
 8006770:	03d09000 	.word	0x03d09000
 8006774:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006782:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 824d 	beq.w	8006c26 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	4aad      	ldr	r2, [pc, #692]	; (8006a48 <UART_SetConfig+0x948>)
 8006792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006796:	461a      	mov	r2, r3
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	fbb3 f3f2 	udiv	r3, r3, r2
 800679e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	4413      	add	r3, r2
 80067aa:	6a3a      	ldr	r2, [r7, #32]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d305      	bcc.n	80067bc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067b6:	6a3a      	ldr	r2, [r7, #32]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d903      	bls.n	80067c4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80067c2:	e230      	b.n	8006c26 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	4618      	mov	r0, r3
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	4a9d      	ldr	r2, [pc, #628]	; (8006a48 <UART_SetConfig+0x948>)
 80067d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f04f 0400 	mov.w	r4, #0
 80067dc:	461a      	mov	r2, r3
 80067de:	4623      	mov	r3, r4
 80067e0:	f7f9 fdce 	bl	8000380 <__aeabi_uldivmod>
 80067e4:	4603      	mov	r3, r0
 80067e6:	460c      	mov	r4, r1
 80067e8:	4619      	mov	r1, r3
 80067ea:	4622      	mov	r2, r4
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	f04f 0400 	mov.w	r4, #0
 80067f4:	0214      	lsls	r4, r2, #8
 80067f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067fa:	020b      	lsls	r3, r1, #8
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6852      	ldr	r2, [r2, #4]
 8006800:	0852      	lsrs	r2, r2, #1
 8006802:	4611      	mov	r1, r2
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	eb13 0b01 	adds.w	fp, r3, r1
 800680c:	eb44 0c02 	adc.w	ip, r4, r2
 8006810:	4658      	mov	r0, fp
 8006812:	4661      	mov	r1, ip
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f04f 0400 	mov.w	r4, #0
 800681c:	461a      	mov	r2, r3
 800681e:	4623      	mov	r3, r4
 8006820:	f7f9 fdae 	bl	8000380 <__aeabi_uldivmod>
 8006824:	4603      	mov	r3, r0
 8006826:	460c      	mov	r4, r1
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006830:	d308      	bcc.n	8006844 <UART_SetConfig+0x744>
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006838:	d204      	bcs.n	8006844 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006840:	60da      	str	r2, [r3, #12]
 8006842:	e1f0      	b.n	8006c26 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800684a:	e1ec      	b.n	8006c26 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006854:	f040 8100 	bne.w	8006a58 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	f200 80b7 	bhi.w	80069d0 <UART_SetConfig+0x8d0>
 8006862:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <UART_SetConfig+0x768>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	0800696d 	.word	0x0800696d
 800686c:	08006975 	.word	0x08006975
 8006870:	080069d1 	.word	0x080069d1
 8006874:	080069d1 	.word	0x080069d1
 8006878:	0800697d 	.word	0x0800697d
 800687c:	080069d1 	.word	0x080069d1
 8006880:	080069d1 	.word	0x080069d1
 8006884:	080069d1 	.word	0x080069d1
 8006888:	0800698d 	.word	0x0800698d
 800688c:	080069d1 	.word	0x080069d1
 8006890:	080069d1 	.word	0x080069d1
 8006894:	080069d1 	.word	0x080069d1
 8006898:	080069d1 	.word	0x080069d1
 800689c:	080069d1 	.word	0x080069d1
 80068a0:	080069d1 	.word	0x080069d1
 80068a4:	080069d1 	.word	0x080069d1
 80068a8:	0800699d 	.word	0x0800699d
 80068ac:	080069d1 	.word	0x080069d1
 80068b0:	080069d1 	.word	0x080069d1
 80068b4:	080069d1 	.word	0x080069d1
 80068b8:	080069d1 	.word	0x080069d1
 80068bc:	080069d1 	.word	0x080069d1
 80068c0:	080069d1 	.word	0x080069d1
 80068c4:	080069d1 	.word	0x080069d1
 80068c8:	080069d1 	.word	0x080069d1
 80068cc:	080069d1 	.word	0x080069d1
 80068d0:	080069d1 	.word	0x080069d1
 80068d4:	080069d1 	.word	0x080069d1
 80068d8:	080069d1 	.word	0x080069d1
 80068dc:	080069d1 	.word	0x080069d1
 80068e0:	080069d1 	.word	0x080069d1
 80068e4:	080069d1 	.word	0x080069d1
 80068e8:	080069c3 	.word	0x080069c3
 80068ec:	080069d1 	.word	0x080069d1
 80068f0:	080069d1 	.word	0x080069d1
 80068f4:	080069d1 	.word	0x080069d1
 80068f8:	080069d1 	.word	0x080069d1
 80068fc:	080069d1 	.word	0x080069d1
 8006900:	080069d1 	.word	0x080069d1
 8006904:	080069d1 	.word	0x080069d1
 8006908:	080069d1 	.word	0x080069d1
 800690c:	080069d1 	.word	0x080069d1
 8006910:	080069d1 	.word	0x080069d1
 8006914:	080069d1 	.word	0x080069d1
 8006918:	080069d1 	.word	0x080069d1
 800691c:	080069d1 	.word	0x080069d1
 8006920:	080069d1 	.word	0x080069d1
 8006924:	080069d1 	.word	0x080069d1
 8006928:	080069d1 	.word	0x080069d1
 800692c:	080069d1 	.word	0x080069d1
 8006930:	080069d1 	.word	0x080069d1
 8006934:	080069d1 	.word	0x080069d1
 8006938:	080069d1 	.word	0x080069d1
 800693c:	080069d1 	.word	0x080069d1
 8006940:	080069d1 	.word	0x080069d1
 8006944:	080069d1 	.word	0x080069d1
 8006948:	080069d1 	.word	0x080069d1
 800694c:	080069d1 	.word	0x080069d1
 8006950:	080069d1 	.word	0x080069d1
 8006954:	080069d1 	.word	0x080069d1
 8006958:	080069d1 	.word	0x080069d1
 800695c:	080069d1 	.word	0x080069d1
 8006960:	080069d1 	.word	0x080069d1
 8006964:	080069d1 	.word	0x080069d1
 8006968:	080069c9 	.word	0x080069c9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800696c:	f7fd fd72 	bl	8004454 <HAL_RCC_GetPCLK1Freq>
 8006970:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006972:	e033      	b.n	80069dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006974:	f7fd fd84 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 8006978:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800697a:	e02f      	b.n	80069dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe fcd9 	bl	8005338 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800698a:	e027      	b.n	80069dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800698c:	f107 0308 	add.w	r3, r7, #8
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fe1d 	bl	80055d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800699a:	e01f      	b.n	80069dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800699c:	4b2b      	ldr	r3, [pc, #172]	; (8006a4c <UART_SetConfig+0x94c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d009      	beq.n	80069bc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069a8:	4b28      	ldr	r3, [pc, #160]	; (8006a4c <UART_SetConfig+0x94c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	08db      	lsrs	r3, r3, #3
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	4a27      	ldr	r2, [pc, #156]	; (8006a50 <UART_SetConfig+0x950>)
 80069b4:	fa22 f303 	lsr.w	r3, r2, r3
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069ba:	e00f      	b.n	80069dc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80069bc:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <UART_SetConfig+0x950>)
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069c0:	e00c      	b.n	80069dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <UART_SetConfig+0x954>)
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069c6:	e009      	b.n	80069dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069ce:	e005      	b.n	80069dc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80069da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 8121 	beq.w	8006c26 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <UART_SetConfig+0x948>)
 80069ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80069f6:	005a      	lsls	r2, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	441a      	add	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	2b0f      	cmp	r3, #15
 8006a10:	d916      	bls.n	8006a40 <UART_SetConfig+0x940>
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a18:	d212      	bcs.n	8006a40 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f023 030f 	bic.w	r3, r3, #15
 8006a22:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a32:	4313      	orrs	r3, r2
 8006a34:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	e0f2      	b.n	8006c26 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006a46:	e0ee      	b.n	8006c26 <UART_SetConfig+0xb26>
 8006a48:	08014fe0 	.word	0x08014fe0
 8006a4c:	58024400 	.word	0x58024400
 8006a50:	03d09000 	.word	0x03d09000
 8006a54:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	f200 80b7 	bhi.w	8006bd0 <UART_SetConfig+0xad0>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <UART_SetConfig+0x968>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006b6d 	.word	0x08006b6d
 8006a6c:	08006b75 	.word	0x08006b75
 8006a70:	08006bd1 	.word	0x08006bd1
 8006a74:	08006bd1 	.word	0x08006bd1
 8006a78:	08006b7d 	.word	0x08006b7d
 8006a7c:	08006bd1 	.word	0x08006bd1
 8006a80:	08006bd1 	.word	0x08006bd1
 8006a84:	08006bd1 	.word	0x08006bd1
 8006a88:	08006b8d 	.word	0x08006b8d
 8006a8c:	08006bd1 	.word	0x08006bd1
 8006a90:	08006bd1 	.word	0x08006bd1
 8006a94:	08006bd1 	.word	0x08006bd1
 8006a98:	08006bd1 	.word	0x08006bd1
 8006a9c:	08006bd1 	.word	0x08006bd1
 8006aa0:	08006bd1 	.word	0x08006bd1
 8006aa4:	08006bd1 	.word	0x08006bd1
 8006aa8:	08006b9d 	.word	0x08006b9d
 8006aac:	08006bd1 	.word	0x08006bd1
 8006ab0:	08006bd1 	.word	0x08006bd1
 8006ab4:	08006bd1 	.word	0x08006bd1
 8006ab8:	08006bd1 	.word	0x08006bd1
 8006abc:	08006bd1 	.word	0x08006bd1
 8006ac0:	08006bd1 	.word	0x08006bd1
 8006ac4:	08006bd1 	.word	0x08006bd1
 8006ac8:	08006bd1 	.word	0x08006bd1
 8006acc:	08006bd1 	.word	0x08006bd1
 8006ad0:	08006bd1 	.word	0x08006bd1
 8006ad4:	08006bd1 	.word	0x08006bd1
 8006ad8:	08006bd1 	.word	0x08006bd1
 8006adc:	08006bd1 	.word	0x08006bd1
 8006ae0:	08006bd1 	.word	0x08006bd1
 8006ae4:	08006bd1 	.word	0x08006bd1
 8006ae8:	08006bc3 	.word	0x08006bc3
 8006aec:	08006bd1 	.word	0x08006bd1
 8006af0:	08006bd1 	.word	0x08006bd1
 8006af4:	08006bd1 	.word	0x08006bd1
 8006af8:	08006bd1 	.word	0x08006bd1
 8006afc:	08006bd1 	.word	0x08006bd1
 8006b00:	08006bd1 	.word	0x08006bd1
 8006b04:	08006bd1 	.word	0x08006bd1
 8006b08:	08006bd1 	.word	0x08006bd1
 8006b0c:	08006bd1 	.word	0x08006bd1
 8006b10:	08006bd1 	.word	0x08006bd1
 8006b14:	08006bd1 	.word	0x08006bd1
 8006b18:	08006bd1 	.word	0x08006bd1
 8006b1c:	08006bd1 	.word	0x08006bd1
 8006b20:	08006bd1 	.word	0x08006bd1
 8006b24:	08006bd1 	.word	0x08006bd1
 8006b28:	08006bd1 	.word	0x08006bd1
 8006b2c:	08006bd1 	.word	0x08006bd1
 8006b30:	08006bd1 	.word	0x08006bd1
 8006b34:	08006bd1 	.word	0x08006bd1
 8006b38:	08006bd1 	.word	0x08006bd1
 8006b3c:	08006bd1 	.word	0x08006bd1
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006bd1 	.word	0x08006bd1
 8006b48:	08006bd1 	.word	0x08006bd1
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006bd1 	.word	0x08006bd1
 8006b60:	08006bd1 	.word	0x08006bd1
 8006b64:	08006bd1 	.word	0x08006bd1
 8006b68:	08006bc9 	.word	0x08006bc9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b6c:	f7fd fc72 	bl	8004454 <HAL_RCC_GetPCLK1Freq>
 8006b70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b72:	e033      	b.n	8006bdc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b74:	f7fd fc84 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 8006b78:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006b7a:	e02f      	b.n	8006bdc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b7c:	f107 0314 	add.w	r3, r7, #20
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fbd9 	bl	8005338 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b8a:	e027      	b.n	8006bdc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b8c:	f107 0308 	add.w	r3, r7, #8
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe fd1d 	bl	80055d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b9a:	e01f      	b.n	8006bdc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b9c:	4b2c      	ldr	r3, [pc, #176]	; (8006c50 <UART_SetConfig+0xb50>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0320 	and.w	r3, r3, #32
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ba8:	4b29      	ldr	r3, [pc, #164]	; (8006c50 <UART_SetConfig+0xb50>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	08db      	lsrs	r3, r3, #3
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	4a28      	ldr	r2, [pc, #160]	; (8006c54 <UART_SetConfig+0xb54>)
 8006bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bba:	e00f      	b.n	8006bdc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006bbc:	4b25      	ldr	r3, [pc, #148]	; (8006c54 <UART_SetConfig+0xb54>)
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bc0:	e00c      	b.n	8006bdc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bc2:	4b25      	ldr	r3, [pc, #148]	; (8006c58 <UART_SetConfig+0xb58>)
 8006bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bc6:	e009      	b.n	8006bdc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bce:	e005      	b.n	8006bdc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006bda:	bf00      	nop
    }

    if (pclk != 0U)
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d021      	beq.n	8006c26 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	4a1d      	ldr	r2, [pc, #116]	; (8006c5c <UART_SetConfig+0xb5c>)
 8006be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	441a      	add	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	2b0f      	cmp	r3, #15
 8006c0c:	d908      	bls.n	8006c20 <UART_SetConfig+0xb20>
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c14:	d204      	bcs.n	8006c20 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1c:	60da      	str	r2, [r3, #12]
 8006c1e:	e002      	b.n	8006c26 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006c42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3738      	adds	r7, #56	; 0x38
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006c50:	58024400 	.word	0x58024400
 8006c54:	03d09000 	.word	0x03d09000
 8006c58:	003d0900 	.word	0x003d0900
 8006c5c:	08014fe0 	.word	0x08014fe0

08006c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01a      	beq.n	8006d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d5e:	d10a      	bne.n	8006d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	605a      	str	r2, [r3, #4]
  }
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006db4:	f7fa fb36 	bl	8001424 <HAL_GetTick>
 8006db8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0308 	and.w	r3, r3, #8
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d10e      	bne.n	8006de6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f82c 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e022      	b.n	8006e2c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d10e      	bne.n	8006e12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f816 	bl	8006e34 <UART_WaitOnFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e00c      	b.n	8006e2c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	4613      	mov	r3, r2
 8006e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e44:	e062      	b.n	8006f0c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d05e      	beq.n	8006f0c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4e:	f7fa fae9 	bl	8001424 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d302      	bcc.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11d      	bne.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e72:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0201 	bic.w	r2, r2, #1
 8006e82:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e045      	b.n	8006f2c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d02e      	beq.n	8006f0c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ebc:	d126      	bne.n	8006f0c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ec6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ed6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0201 	bic.w	r2, r2, #1
 8006ee6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e00f      	b.n	8006f2c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4013      	ands	r3, r2
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d08d      	beq.n	8006e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_UARTEx_DisableFifoMode+0x16>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e027      	b.n	8006f9a <HAL_UARTEx_DisableFifoMode+0x66>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2224      	movs	r2, #36	; 0x24
 8006f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d101      	bne.n	8006fbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e02d      	b.n	800701a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2224      	movs	r2, #36	; 0x24
 8006fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f850 	bl	80070a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007036:	2302      	movs	r3, #2
 8007038:	e02d      	b.n	8007096 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2224      	movs	r2, #36	; 0x24
 8007046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0201 	bic.w	r2, r2, #1
 8007060:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f812 	bl	80070a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b089      	sub	sp, #36	; 0x24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80070a8:	4a2f      	ldr	r2, [pc, #188]	; (8007168 <UARTEx_SetNbDataToProcess+0xc8>)
 80070aa:	f107 0314 	add.w	r3, r7, #20
 80070ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070b2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80070b6:	4a2d      	ldr	r2, [pc, #180]	; (800716c <UARTEx_SetNbDataToProcess+0xcc>)
 80070b8:	f107 030c 	add.w	r3, r7, #12
 80070bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070c0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d108      	bne.n	80070de <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070dc:	e03d      	b.n	800715a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070de:	2310      	movs	r3, #16
 80070e0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070e2:	2310      	movs	r3, #16
 80070e4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	0e5b      	lsrs	r3, r3, #25
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	0f5b      	lsrs	r3, r3, #29
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007106:	7fbb      	ldrb	r3, [r7, #30]
 8007108:	7f3a      	ldrb	r2, [r7, #28]
 800710a:	f107 0120 	add.w	r1, r7, #32
 800710e:	440a      	add	r2, r1
 8007110:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007114:	fb02 f303 	mul.w	r3, r2, r3
 8007118:	7f3a      	ldrb	r2, [r7, #28]
 800711a:	f107 0120 	add.w	r1, r7, #32
 800711e:	440a      	add	r2, r1
 8007120:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007124:	fb93 f3f2 	sdiv	r3, r3, r2
 8007128:	b29a      	uxth	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007130:	7ffb      	ldrb	r3, [r7, #31]
 8007132:	7f7a      	ldrb	r2, [r7, #29]
 8007134:	f107 0120 	add.w	r1, r7, #32
 8007138:	440a      	add	r2, r1
 800713a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800713e:	fb02 f303 	mul.w	r3, r2, r3
 8007142:	7f7a      	ldrb	r2, [r7, #29]
 8007144:	f107 0120 	add.w	r1, r7, #32
 8007148:	440a      	add	r2, r1
 800714a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800714e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007152:	b29a      	uxth	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800715a:	bf00      	nop
 800715c:	3724      	adds	r7, #36	; 0x24
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	080125e0 	.word	0x080125e0
 800716c:	080125e8 	.word	0x080125e8

08007170 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007176:	4b8b      	ldr	r3, [pc, #556]	; (80073a4 <MX_LWIP_Init+0x234>)
 8007178:	22c0      	movs	r2, #192	; 0xc0
 800717a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800717c:	4b89      	ldr	r3, [pc, #548]	; (80073a4 <MX_LWIP_Init+0x234>)
 800717e:	22a8      	movs	r2, #168	; 0xa8
 8007180:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007182:	4b88      	ldr	r3, [pc, #544]	; (80073a4 <MX_LWIP_Init+0x234>)
 8007184:	2201      	movs	r2, #1
 8007186:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8007188:	4b86      	ldr	r3, [pc, #536]	; (80073a4 <MX_LWIP_Init+0x234>)
 800718a:	2264      	movs	r2, #100	; 0x64
 800718c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800718e:	4b86      	ldr	r3, [pc, #536]	; (80073a8 <MX_LWIP_Init+0x238>)
 8007190:	22ff      	movs	r2, #255	; 0xff
 8007192:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007194:	4b84      	ldr	r3, [pc, #528]	; (80073a8 <MX_LWIP_Init+0x238>)
 8007196:	22ff      	movs	r2, #255	; 0xff
 8007198:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800719a:	4b83      	ldr	r3, [pc, #524]	; (80073a8 <MX_LWIP_Init+0x238>)
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80071a0:	4b81      	ldr	r3, [pc, #516]	; (80073a8 <MX_LWIP_Init+0x238>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80071a6:	4b81      	ldr	r3, [pc, #516]	; (80073ac <MX_LWIP_Init+0x23c>)
 80071a8:	22c0      	movs	r2, #192	; 0xc0
 80071aa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80071ac:	4b7f      	ldr	r3, [pc, #508]	; (80073ac <MX_LWIP_Init+0x23c>)
 80071ae:	22a8      	movs	r2, #168	; 0xa8
 80071b0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80071b2:	4b7e      	ldr	r3, [pc, #504]	; (80073ac <MX_LWIP_Init+0x23c>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80071b8:	4b7c      	ldr	r3, [pc, #496]	; (80073ac <MX_LWIP_Init+0x23c>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80071be:	f000 fdcd 	bl	8007d5c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80071c2:	4b78      	ldr	r3, [pc, #480]	; (80073a4 <MX_LWIP_Init+0x234>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	061a      	lsls	r2, r3, #24
 80071c8:	4b76      	ldr	r3, [pc, #472]	; (80073a4 <MX_LWIP_Init+0x234>)
 80071ca:	785b      	ldrb	r3, [r3, #1]
 80071cc:	041b      	lsls	r3, r3, #16
 80071ce:	431a      	orrs	r2, r3
 80071d0:	4b74      	ldr	r3, [pc, #464]	; (80073a4 <MX_LWIP_Init+0x234>)
 80071d2:	789b      	ldrb	r3, [r3, #2]
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	4313      	orrs	r3, r2
 80071d8:	4a72      	ldr	r2, [pc, #456]	; (80073a4 <MX_LWIP_Init+0x234>)
 80071da:	78d2      	ldrb	r2, [r2, #3]
 80071dc:	4313      	orrs	r3, r2
 80071de:	061a      	lsls	r2, r3, #24
 80071e0:	4b70      	ldr	r3, [pc, #448]	; (80073a4 <MX_LWIP_Init+0x234>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	0619      	lsls	r1, r3, #24
 80071e6:	4b6f      	ldr	r3, [pc, #444]	; (80073a4 <MX_LWIP_Init+0x234>)
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	041b      	lsls	r3, r3, #16
 80071ec:	4319      	orrs	r1, r3
 80071ee:	4b6d      	ldr	r3, [pc, #436]	; (80073a4 <MX_LWIP_Init+0x234>)
 80071f0:	789b      	ldrb	r3, [r3, #2]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	430b      	orrs	r3, r1
 80071f6:	496b      	ldr	r1, [pc, #428]	; (80073a4 <MX_LWIP_Init+0x234>)
 80071f8:	78c9      	ldrb	r1, [r1, #3]
 80071fa:	430b      	orrs	r3, r1
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007202:	431a      	orrs	r2, r3
 8007204:	4b67      	ldr	r3, [pc, #412]	; (80073a4 <MX_LWIP_Init+0x234>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	0619      	lsls	r1, r3, #24
 800720a:	4b66      	ldr	r3, [pc, #408]	; (80073a4 <MX_LWIP_Init+0x234>)
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	4319      	orrs	r1, r3
 8007212:	4b64      	ldr	r3, [pc, #400]	; (80073a4 <MX_LWIP_Init+0x234>)
 8007214:	789b      	ldrb	r3, [r3, #2]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	430b      	orrs	r3, r1
 800721a:	4962      	ldr	r1, [pc, #392]	; (80073a4 <MX_LWIP_Init+0x234>)
 800721c:	78c9      	ldrb	r1, [r1, #3]
 800721e:	430b      	orrs	r3, r1
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007226:	431a      	orrs	r2, r3
 8007228:	4b5e      	ldr	r3, [pc, #376]	; (80073a4 <MX_LWIP_Init+0x234>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	0619      	lsls	r1, r3, #24
 800722e:	4b5d      	ldr	r3, [pc, #372]	; (80073a4 <MX_LWIP_Init+0x234>)
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	4319      	orrs	r1, r3
 8007236:	4b5b      	ldr	r3, [pc, #364]	; (80073a4 <MX_LWIP_Init+0x234>)
 8007238:	789b      	ldrb	r3, [r3, #2]
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	430b      	orrs	r3, r1
 800723e:	4959      	ldr	r1, [pc, #356]	; (80073a4 <MX_LWIP_Init+0x234>)
 8007240:	78c9      	ldrb	r1, [r1, #3]
 8007242:	430b      	orrs	r3, r1
 8007244:	0e1b      	lsrs	r3, r3, #24
 8007246:	4313      	orrs	r3, r2
 8007248:	4a59      	ldr	r2, [pc, #356]	; (80073b0 <MX_LWIP_Init+0x240>)
 800724a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800724c:	4b56      	ldr	r3, [pc, #344]	; (80073a8 <MX_LWIP_Init+0x238>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	061a      	lsls	r2, r3, #24
 8007252:	4b55      	ldr	r3, [pc, #340]	; (80073a8 <MX_LWIP_Init+0x238>)
 8007254:	785b      	ldrb	r3, [r3, #1]
 8007256:	041b      	lsls	r3, r3, #16
 8007258:	431a      	orrs	r2, r3
 800725a:	4b53      	ldr	r3, [pc, #332]	; (80073a8 <MX_LWIP_Init+0x238>)
 800725c:	789b      	ldrb	r3, [r3, #2]
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	4313      	orrs	r3, r2
 8007262:	4a51      	ldr	r2, [pc, #324]	; (80073a8 <MX_LWIP_Init+0x238>)
 8007264:	78d2      	ldrb	r2, [r2, #3]
 8007266:	4313      	orrs	r3, r2
 8007268:	061a      	lsls	r2, r3, #24
 800726a:	4b4f      	ldr	r3, [pc, #316]	; (80073a8 <MX_LWIP_Init+0x238>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	0619      	lsls	r1, r3, #24
 8007270:	4b4d      	ldr	r3, [pc, #308]	; (80073a8 <MX_LWIP_Init+0x238>)
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	041b      	lsls	r3, r3, #16
 8007276:	4319      	orrs	r1, r3
 8007278:	4b4b      	ldr	r3, [pc, #300]	; (80073a8 <MX_LWIP_Init+0x238>)
 800727a:	789b      	ldrb	r3, [r3, #2]
 800727c:	021b      	lsls	r3, r3, #8
 800727e:	430b      	orrs	r3, r1
 8007280:	4949      	ldr	r1, [pc, #292]	; (80073a8 <MX_LWIP_Init+0x238>)
 8007282:	78c9      	ldrb	r1, [r1, #3]
 8007284:	430b      	orrs	r3, r1
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800728c:	431a      	orrs	r2, r3
 800728e:	4b46      	ldr	r3, [pc, #280]	; (80073a8 <MX_LWIP_Init+0x238>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	0619      	lsls	r1, r3, #24
 8007294:	4b44      	ldr	r3, [pc, #272]	; (80073a8 <MX_LWIP_Init+0x238>)
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	041b      	lsls	r3, r3, #16
 800729a:	4319      	orrs	r1, r3
 800729c:	4b42      	ldr	r3, [pc, #264]	; (80073a8 <MX_LWIP_Init+0x238>)
 800729e:	789b      	ldrb	r3, [r3, #2]
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	430b      	orrs	r3, r1
 80072a4:	4940      	ldr	r1, [pc, #256]	; (80073a8 <MX_LWIP_Init+0x238>)
 80072a6:	78c9      	ldrb	r1, [r1, #3]
 80072a8:	430b      	orrs	r3, r1
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072b0:	431a      	orrs	r2, r3
 80072b2:	4b3d      	ldr	r3, [pc, #244]	; (80073a8 <MX_LWIP_Init+0x238>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	0619      	lsls	r1, r3, #24
 80072b8:	4b3b      	ldr	r3, [pc, #236]	; (80073a8 <MX_LWIP_Init+0x238>)
 80072ba:	785b      	ldrb	r3, [r3, #1]
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	4319      	orrs	r1, r3
 80072c0:	4b39      	ldr	r3, [pc, #228]	; (80073a8 <MX_LWIP_Init+0x238>)
 80072c2:	789b      	ldrb	r3, [r3, #2]
 80072c4:	021b      	lsls	r3, r3, #8
 80072c6:	430b      	orrs	r3, r1
 80072c8:	4937      	ldr	r1, [pc, #220]	; (80073a8 <MX_LWIP_Init+0x238>)
 80072ca:	78c9      	ldrb	r1, [r1, #3]
 80072cc:	430b      	orrs	r3, r1
 80072ce:	0e1b      	lsrs	r3, r3, #24
 80072d0:	4313      	orrs	r3, r2
 80072d2:	4a38      	ldr	r2, [pc, #224]	; (80073b4 <MX_LWIP_Init+0x244>)
 80072d4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80072d6:	4b35      	ldr	r3, [pc, #212]	; (80073ac <MX_LWIP_Init+0x23c>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	061a      	lsls	r2, r3, #24
 80072dc:	4b33      	ldr	r3, [pc, #204]	; (80073ac <MX_LWIP_Init+0x23c>)
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	431a      	orrs	r2, r3
 80072e4:	4b31      	ldr	r3, [pc, #196]	; (80073ac <MX_LWIP_Init+0x23c>)
 80072e6:	789b      	ldrb	r3, [r3, #2]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	4313      	orrs	r3, r2
 80072ec:	4a2f      	ldr	r2, [pc, #188]	; (80073ac <MX_LWIP_Init+0x23c>)
 80072ee:	78d2      	ldrb	r2, [r2, #3]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	061a      	lsls	r2, r3, #24
 80072f4:	4b2d      	ldr	r3, [pc, #180]	; (80073ac <MX_LWIP_Init+0x23c>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	0619      	lsls	r1, r3, #24
 80072fa:	4b2c      	ldr	r3, [pc, #176]	; (80073ac <MX_LWIP_Init+0x23c>)
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	041b      	lsls	r3, r3, #16
 8007300:	4319      	orrs	r1, r3
 8007302:	4b2a      	ldr	r3, [pc, #168]	; (80073ac <MX_LWIP_Init+0x23c>)
 8007304:	789b      	ldrb	r3, [r3, #2]
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	430b      	orrs	r3, r1
 800730a:	4928      	ldr	r1, [pc, #160]	; (80073ac <MX_LWIP_Init+0x23c>)
 800730c:	78c9      	ldrb	r1, [r1, #3]
 800730e:	430b      	orrs	r3, r1
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007316:	431a      	orrs	r2, r3
 8007318:	4b24      	ldr	r3, [pc, #144]	; (80073ac <MX_LWIP_Init+0x23c>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	0619      	lsls	r1, r3, #24
 800731e:	4b23      	ldr	r3, [pc, #140]	; (80073ac <MX_LWIP_Init+0x23c>)
 8007320:	785b      	ldrb	r3, [r3, #1]
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	4319      	orrs	r1, r3
 8007326:	4b21      	ldr	r3, [pc, #132]	; (80073ac <MX_LWIP_Init+0x23c>)
 8007328:	789b      	ldrb	r3, [r3, #2]
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	430b      	orrs	r3, r1
 800732e:	491f      	ldr	r1, [pc, #124]	; (80073ac <MX_LWIP_Init+0x23c>)
 8007330:	78c9      	ldrb	r1, [r1, #3]
 8007332:	430b      	orrs	r3, r1
 8007334:	0a1b      	lsrs	r3, r3, #8
 8007336:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800733a:	431a      	orrs	r2, r3
 800733c:	4b1b      	ldr	r3, [pc, #108]	; (80073ac <MX_LWIP_Init+0x23c>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	0619      	lsls	r1, r3, #24
 8007342:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <MX_LWIP_Init+0x23c>)
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	4319      	orrs	r1, r3
 800734a:	4b18      	ldr	r3, [pc, #96]	; (80073ac <MX_LWIP_Init+0x23c>)
 800734c:	789b      	ldrb	r3, [r3, #2]
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	430b      	orrs	r3, r1
 8007352:	4916      	ldr	r1, [pc, #88]	; (80073ac <MX_LWIP_Init+0x23c>)
 8007354:	78c9      	ldrb	r1, [r1, #3]
 8007356:	430b      	orrs	r3, r1
 8007358:	0e1b      	lsrs	r3, r3, #24
 800735a:	4313      	orrs	r3, r2
 800735c:	4a16      	ldr	r2, [pc, #88]	; (80073b8 <MX_LWIP_Init+0x248>)
 800735e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007360:	4b16      	ldr	r3, [pc, #88]	; (80073bc <MX_LWIP_Init+0x24c>)
 8007362:	9302      	str	r3, [sp, #8]
 8007364:	4b16      	ldr	r3, [pc, #88]	; (80073c0 <MX_LWIP_Init+0x250>)
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	2300      	movs	r3, #0
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <MX_LWIP_Init+0x248>)
 800736e:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <MX_LWIP_Init+0x244>)
 8007370:	490f      	ldr	r1, [pc, #60]	; (80073b0 <MX_LWIP_Init+0x240>)
 8007372:	4814      	ldr	r0, [pc, #80]	; (80073c4 <MX_LWIP_Init+0x254>)
 8007374:	f001 f9da 	bl	800872c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007378:	4812      	ldr	r0, [pc, #72]	; (80073c4 <MX_LWIP_Init+0x254>)
 800737a:	f001 fb87 	bl	8008a8c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800737e:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <MX_LWIP_Init+0x254>)
 8007380:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007390:	480c      	ldr	r0, [pc, #48]	; (80073c4 <MX_LWIP_Init+0x254>)
 8007392:	f001 fb8b 	bl	8008aac <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007396:	e002      	b.n	800739e <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8007398:	480a      	ldr	r0, [pc, #40]	; (80073c4 <MX_LWIP_Init+0x254>)
 800739a:	f001 fbf3 	bl	8008b84 <netif_set_down>
}
 800739e:	bf00      	nop
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	24001bd8 	.word	0x24001bd8
 80073a8:	24001bd4 	.word	0x24001bd4
 80073ac:	24001b9c 	.word	0x24001b9c
 80073b0:	24001bd0 	.word	0x24001bd0
 80073b4:	24001bdc 	.word	0x24001bdc
 80073b8:	24001be0 	.word	0x24001be0
 80073bc:	08011551 	.word	0x08011551
 80073c0:	08007959 	.word	0x08007959
 80073c4:	24001ba0 	.word	0x24001ba0

080073c8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80073cc:	4803      	ldr	r0, [pc, #12]	; (80073dc <MX_LWIP_Process+0x14>)
 80073ce:	f000 faa3 	bl	8007918 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80073d2:	f007 fcb7 	bl	800ed44 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80073d6:	bf00      	nop
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	24001ba0 	.word	0x24001ba0

080073e0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80073f2:	2320      	movs	r3, #32
 80073f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80073f6:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80073fa:	e00b      	b.n	8007414 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80073fc:	4a0c      	ldr	r2, [pc, #48]	; (8007430 <SCB_InvalidateDCache_by_Addr+0x50>)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4413      	add	r3, r2
 800740a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	dcf0      	bgt.n	80073fc <SCB_InvalidateDCache_by_Addr+0x1c>
 800741a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800741e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	e000ed00 	.word	0xe000ed00

08007434 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08e      	sub	sp, #56	; 0x38
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800743c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a61      	ldr	r2, [pc, #388]	; (80075d8 <HAL_ETH_MspInit+0x1a4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	f040 80bb 	bne.w	80075ce <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007458:	4b60      	ldr	r3, [pc, #384]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 800745a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800745e:	4a5f      	ldr	r2, [pc, #380]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 8007460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007464:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007468:	4b5c      	ldr	r3, [pc, #368]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 800746a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800746e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007472:	623b      	str	r3, [r7, #32]
 8007474:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007476:	4b59      	ldr	r3, [pc, #356]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 8007478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800747c:	4a57      	ldr	r2, [pc, #348]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 800747e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007482:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007486:	4b55      	ldr	r3, [pc, #340]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 8007488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800748c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007490:	61fb      	str	r3, [r7, #28]
 8007492:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007494:	4b51      	ldr	r3, [pc, #324]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 8007496:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800749a:	4a50      	ldr	r2, [pc, #320]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 800749c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80074a4:	4b4d      	ldr	r3, [pc, #308]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 80074a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ae:	61bb      	str	r3, [r7, #24]
 80074b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074b2:	4b4a      	ldr	r3, [pc, #296]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 80074b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074b8:	4a48      	ldr	r2, [pc, #288]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 80074ba:	f043 0304 	orr.w	r3, r3, #4
 80074be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074c2:	4b46      	ldr	r3, [pc, #280]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 80074c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074d0:	4b42      	ldr	r3, [pc, #264]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 80074d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074d6:	4a41      	ldr	r2, [pc, #260]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074e0:	4b3e      	ldr	r3, [pc, #248]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 80074e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ee:	4b3b      	ldr	r3, [pc, #236]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 80074f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074f4:	4a39      	ldr	r2, [pc, #228]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 80074f6:	f043 0302 	orr.w	r3, r3, #2
 80074fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074fe:	4b37      	ldr	r3, [pc, #220]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 8007500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800750c:	4b33      	ldr	r3, [pc, #204]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 800750e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007512:	4a32      	ldr	r2, [pc, #200]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 8007514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800751c:	4b2f      	ldr	r3, [pc, #188]	; (80075dc <HAL_ETH_MspInit+0x1a8>)
 800751e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	60bb      	str	r3, [r7, #8]
 8007528:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin;
 800752a:	2302      	movs	r3, #2
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800752e:	2302      	movs	r3, #2
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007532:	2300      	movs	r3, #0
 8007534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007536:	2300      	movs	r3, #0
 8007538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800753a:	230b      	movs	r3, #11
 800753c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 800753e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007542:	4619      	mov	r1, r3
 8007544:	4826      	ldr	r0, [pc, #152]	; (80075e0 <HAL_ETH_MspInit+0x1ac>)
 8007546:	f7fb fe19 	bl	800317c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800754a:	2386      	movs	r3, #134	; 0x86
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754e:	2302      	movs	r3, #2
 8007550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007552:	2300      	movs	r3, #0
 8007554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007556:	2302      	movs	r3, #2
 8007558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800755a:	230b      	movs	r3, #11
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800755e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007562:	4619      	mov	r1, r3
 8007564:	481f      	ldr	r0, [pc, #124]	; (80075e4 <HAL_ETH_MspInit+0x1b0>)
 8007566:	f7fb fe09 	bl	800317c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 800756a:	2330      	movs	r3, #48	; 0x30
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800756e:	2302      	movs	r3, #2
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007572:	2300      	movs	r3, #0
 8007574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007576:	2302      	movs	r3, #2
 8007578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800757a:	230b      	movs	r3, #11
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800757e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007582:	4619      	mov	r1, r3
 8007584:	4816      	ldr	r0, [pc, #88]	; (80075e0 <HAL_ETH_MspInit+0x1ac>)
 8007586:	f7fb fdf9 	bl	800317c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800758a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007590:	2302      	movs	r3, #2
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007594:	2300      	movs	r3, #0
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007598:	2302      	movs	r3, #2
 800759a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800759c:	230b      	movs	r3, #11
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80075a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a4:	4619      	mov	r1, r3
 80075a6:	4810      	ldr	r0, [pc, #64]	; (80075e8 <HAL_ETH_MspInit+0x1b4>)
 80075a8:	f7fb fde8 	bl	800317c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80075ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b2:	2302      	movs	r3, #2
 80075b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075ba:	2302      	movs	r3, #2
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075be:	230b      	movs	r3, #11
 80075c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80075c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075c6:	4619      	mov	r1, r3
 80075c8:	4808      	ldr	r0, [pc, #32]	; (80075ec <HAL_ETH_MspInit+0x1b8>)
 80075ca:	f7fb fdd7 	bl	800317c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80075ce:	bf00      	nop
 80075d0:	3738      	adds	r7, #56	; 0x38
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40028000 	.word	0x40028000
 80075dc:	58024400 	.word	0x58024400
 80075e0:	58020800 	.word	0x58020800
 80075e4:	58020000 	.word	0x58020000
 80075e8:	58020400 	.word	0x58020400
 80075ec:	58021800 	.word	0x58021800

080075f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007600:	4b4a      	ldr	r3, [pc, #296]	; (800772c <low_level_init+0x13c>)
 8007602:	4a4b      	ldr	r2, [pc, #300]	; (8007730 <low_level_init+0x140>)
 8007604:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007606:	2300      	movs	r3, #0
 8007608:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800760a:	2380      	movs	r3, #128	; 0x80
 800760c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800760e:	23e1      	movs	r3, #225	; 0xe1
 8007610:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8007616:	2300      	movs	r3, #0
 8007618:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800761a:	2300      	movs	r3, #0
 800761c:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800761e:	4a43      	ldr	r2, [pc, #268]	; (800772c <low_level_init+0x13c>)
 8007620:	f107 030c 	add.w	r3, r7, #12
 8007624:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007626:	4b41      	ldr	r3, [pc, #260]	; (800772c <low_level_init+0x13c>)
 8007628:	2201      	movs	r2, #1
 800762a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800762c:	4b3f      	ldr	r3, [pc, #252]	; (800772c <low_level_init+0x13c>)
 800762e:	4a41      	ldr	r2, [pc, #260]	; (8007734 <low_level_init+0x144>)
 8007630:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007632:	4b3e      	ldr	r3, [pc, #248]	; (800772c <low_level_init+0x13c>)
 8007634:	4a40      	ldr	r2, [pc, #256]	; (8007738 <low_level_init+0x148>)
 8007636:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8007638:	4b3c      	ldr	r3, [pc, #240]	; (800772c <low_level_init+0x13c>)
 800763a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800763e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007640:	483a      	ldr	r0, [pc, #232]	; (800772c <low_level_init+0x13c>)
 8007642:	f7fa f895 	bl	8001770 <HAL_ETH_Init>
 8007646:	4603      	mov	r3, r0
 8007648:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800764a:	2234      	movs	r2, #52	; 0x34
 800764c:	2100      	movs	r1, #0
 800764e:	483b      	ldr	r0, [pc, #236]	; (800773c <low_level_init+0x14c>)
 8007650:	f00a f892 	bl	8011778 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007654:	4b39      	ldr	r3, [pc, #228]	; (800773c <low_level_init+0x14c>)
 8007656:	2221      	movs	r2, #33	; 0x21
 8007658:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800765a:	4b38      	ldr	r3, [pc, #224]	; (800773c <low_level_init+0x14c>)
 800765c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007660:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007662:	4b36      	ldr	r3, [pc, #216]	; (800773c <low_level_init+0x14c>)
 8007664:	2200      	movs	r2, #0
 8007666:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007668:	4835      	ldr	r0, [pc, #212]	; (8007740 <low_level_init+0x150>)
 800766a:	f000 ff27 	bl	80084bc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2206      	movs	r2, #6
 8007672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007676:	4b2d      	ldr	r3, [pc, #180]	; (800772c <low_level_init+0x13c>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	781a      	ldrb	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007682:	4b2a      	ldr	r3, [pc, #168]	; (800772c <low_level_init+0x13c>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	785a      	ldrb	r2, [r3, #1]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800768e:	4b27      	ldr	r3, [pc, #156]	; (800772c <low_level_init+0x13c>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	789a      	ldrb	r2, [r3, #2]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800769a:	4b24      	ldr	r3, [pc, #144]	; (800772c <low_level_init+0x13c>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	78da      	ldrb	r2, [r3, #3]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80076a6:	4b21      	ldr	r3, [pc, #132]	; (800772c <low_level_init+0x13c>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	791a      	ldrb	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80076b2:	4b1e      	ldr	r3, [pc, #120]	; (800772c <low_level_init+0x13c>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	795a      	ldrb	r2, [r3, #5]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80076c4:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80076cc:	f043 030a 	orr.w	r3, r3, #10
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	e00e      	b.n	80076fc <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80076e4:	fb02 f303 	mul.w	r3, r2, r3
 80076e8:	4a16      	ldr	r2, [pc, #88]	; (8007744 <low_level_init+0x154>)
 80076ea:	441a      	add	r2, r3
 80076ec:	2300      	movs	r3, #0
 80076ee:	6979      	ldr	r1, [r7, #20]
 80076f0:	480e      	ldr	r0, [pc, #56]	; (800772c <low_level_init+0x13c>)
 80076f2:	f7fa f917 	bl	8001924 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	3301      	adds	r3, #1
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d9ed      	bls.n	80076de <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007702:	4911      	ldr	r1, [pc, #68]	; (8007748 <low_level_init+0x158>)
 8007704:	4811      	ldr	r0, [pc, #68]	; (800774c <low_level_init+0x15c>)
 8007706:	f7f9 fcdc 	bl	80010c2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800770a:	4810      	ldr	r0, [pc, #64]	; (800774c <low_level_init+0x15c>)
 800770c:	f7f9 fd0b 	bl	8001126 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007710:	7cfb      	ldrb	r3, [r7, #19]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d103      	bne.n	800771e <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9b2 	bl	8007a80 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800771c:	e001      	b.n	8007722 <low_level_init+0x132>
    Error_Handler();
 800771e:	f7f9 fa73 	bl	8000c08 <Error_Handler>
}
 8007722:	bf00      	nop
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	24001cd0 	.word	0x24001cd0
 8007730:	40028000 	.word	0x40028000
 8007734:	240000f4 	.word	0x240000f4
 8007738:	24000094 	.word	0x24000094
 800773c:	24001d40 	.word	0x24001d40
 8007740:	08014ff8 	.word	0x08014ff8
 8007744:	24000154 	.word	0x24000154
 8007748:	24000010 	.word	0x24000010
 800774c:	24001cb0 	.word	0x24001cb0

08007750 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b092      	sub	sp, #72	; 0x48
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800775a:	2300      	movs	r3, #0
 800775c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007764:	f107 030c 	add.w	r3, r7, #12
 8007768:	2230      	movs	r2, #48	; 0x30
 800776a:	2100      	movs	r1, #0
 800776c:	4618      	mov	r0, r3
 800776e:	f00a f803 	bl	8011778 <memset>

  for(q = p; q != NULL; q = q->next)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	643b      	str	r3, [r7, #64]	; 0x40
 8007776:	e049      	b.n	800780c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800777a:	2b03      	cmp	r3, #3
 800777c:	d902      	bls.n	8007784 <low_level_output+0x34>
      return ERR_IF;
 800777e:	f06f 030b 	mvn.w	r3, #11
 8007782:	e056      	b.n	8007832 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8007784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007786:	6859      	ldr	r1, [r3, #4]
 8007788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007796:	4413      	add	r3, r2
 8007798:	3b3c      	subs	r3, #60	; 0x3c
 800779a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800779c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779e:	895b      	ldrh	r3, [r3, #10]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a4:	4613      	mov	r3, r2
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80077b0:	4413      	add	r3, r2
 80077b2:	3b38      	subs	r3, #56	; 0x38
 80077b4:	6019      	str	r1, [r3, #0]

    if(i>0)
 80077b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d012      	beq.n	80077e2 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80077bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077be:	1e5a      	subs	r2, r3, #1
 80077c0:	f107 000c 	add.w	r0, r7, #12
 80077c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077c6:	460b      	mov	r3, r1
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	440b      	add	r3, r1
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	18c1      	adds	r1, r0, r3
 80077d0:	4613      	mov	r3, r2
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80077dc:	4413      	add	r3, r2
 80077de:	3b34      	subs	r3, #52	; 0x34
 80077e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80077e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 80077ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077ec:	4613      	mov	r3, r2
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80077f8:	4413      	add	r3, r2
 80077fa:	3b34      	subs	r3, #52	; 0x34
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007802:	3301      	adds	r3, #1
 8007804:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	643b      	str	r3, [r7, #64]	; 0x40
 800780c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1b2      	bne.n	8007778 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	891b      	ldrh	r3, [r3, #8]
 8007816:	461a      	mov	r2, r3
 8007818:	4b08      	ldr	r3, [pc, #32]	; (800783c <low_level_output+0xec>)
 800781a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800781c:	4a07      	ldr	r2, [pc, #28]	; (800783c <low_level_output+0xec>)
 800781e:	f107 030c 	add.w	r3, r7, #12
 8007822:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007824:	2214      	movs	r2, #20
 8007826:	4905      	ldr	r1, [pc, #20]	; (800783c <low_level_output+0xec>)
 8007828:	4805      	ldr	r0, [pc, #20]	; (8007840 <low_level_output+0xf0>)
 800782a:	f7fa f968 	bl	8001afe <HAL_ETH_Transmit>

  return errval;
 800782e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007832:	4618      	mov	r0, r3
 8007834:	3748      	adds	r7, #72	; 0x48
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	24001d40 	.word	0x24001d40
 8007840:	24001cd0 	.word	0x24001cd0

08007844 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b094      	sub	sp, #80	; 0x50
 8007848:	af02      	add	r7, sp, #8
 800784a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800784c:	2300      	movs	r3, #0
 800784e:	643b      	str	r3, [r7, #64]	; 0x40
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	60bb      	str	r3, [r7, #8]
 8007854:	2300      	movs	r3, #0
 8007856:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007858:	f107 030c 	add.w	r3, r7, #12
 800785c:	2230      	movs	r2, #48	; 0x30
 800785e:	2100      	movs	r1, #0
 8007860:	4618      	mov	r0, r3
 8007862:	f009 ff89 	bl	8011778 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8007866:	2300      	movs	r3, #0
 8007868:	647b      	str	r3, [r7, #68]	; 0x44
 800786a:	e015      	b.n	8007898 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800786c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	f107 010c 	add.w	r1, r7, #12
 8007874:	4613      	mov	r3, r2
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4419      	add	r1, r3
 800787e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007880:	4613      	mov	r3, r2
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800788c:	4413      	add	r3, r2
 800788e:	3b34      	subs	r3, #52	; 0x34
 8007890:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8007892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007894:	3301      	adds	r3, #1
 8007896:	647b      	str	r3, [r7, #68]	; 0x44
 8007898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789a:	2b02      	cmp	r3, #2
 800789c:	d9e6      	bls.n	800786c <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 800789e:	481b      	ldr	r0, [pc, #108]	; (800790c <low_level_input+0xc8>)
 80078a0:	f7fa f9b6 	bl	8001c10 <HAL_ETH_IsRxDataAvailable>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d02a      	beq.n	8007900 <low_level_input+0xbc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 80078aa:	f107 030c 	add.w	r3, r7, #12
 80078ae:	4619      	mov	r1, r3
 80078b0:	4816      	ldr	r0, [pc, #88]	; (800790c <low_level_input+0xc8>)
 80078b2:	f7fa fa9d 	bl	8001df0 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 80078b6:	f107 0308 	add.w	r3, r7, #8
 80078ba:	4619      	mov	r1, r3
 80078bc:	4813      	ldr	r0, [pc, #76]	; (800790c <low_level_input+0xc8>)
 80078be:	f7fa fb35 	bl	8001f2c <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 80078c2:	4812      	ldr	r0, [pc, #72]	; (800790c <low_level_input+0xc8>)
 80078c4:	f7fa fb65 	bl	8001f92 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	4611      	mov	r1, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff fd86 	bl	80073e0 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80078d4:	480e      	ldr	r0, [pc, #56]	; (8007910 <low_level_input+0xcc>)
 80078d6:	f000 fe65 	bl	80085a4 <memp_malloc_pool>
 80078da:	63f8      	str	r0, [r7, #60]	; 0x3c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 80078dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078de:	4a0d      	ldr	r2, [pc, #52]	; (8007914 <low_level_input+0xd0>)
 80078e0:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	b299      	uxth	r1, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	b292      	uxth	r2, r2
 80078ec:	9201      	str	r2, [sp, #4]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f2:	2241      	movs	r2, #65	; 0x41
 80078f4:	2000      	movs	r0, #0
 80078f6:	f001 fb7b 	bl	8008ff0 <pbuf_alloced_custom>
 80078fa:	6438      	str	r0, [r7, #64]	; 0x40

    return p;
 80078fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fe:	e000      	b.n	8007902 <low_level_input+0xbe>
  }
  else
  {
    return NULL;
 8007900:	2300      	movs	r3, #0
  }
}
 8007902:	4618      	mov	r0, r3
 8007904:	3748      	adds	r7, #72	; 0x48
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	24001cd0 	.word	0x24001cd0
 8007910:	08014ff8 	.word	0x08014ff8
 8007914:	080079b5 	.word	0x080079b5

08007918 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff ff8f 	bl	8007844 <low_level_input>
 8007926:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d010      	beq.n	8007950 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	4798      	blx	r3
 8007938:	4603      	mov	r3, r0
 800793a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800793c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d006      	beq.n	8007952 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f001 fd0d 	bl	8009364 <pbuf_free>
    p = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e000      	b.n	8007952 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007950:	bf00      	nop
  }

}
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <ethernetif_init+0x1c>
 8007966:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <ethernetif_init+0x48>)
 8007968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800796c:	490d      	ldr	r1, [pc, #52]	; (80079a4 <ethernetif_init+0x4c>)
 800796e:	480e      	ldr	r0, [pc, #56]	; (80079a8 <ethernetif_init+0x50>)
 8007970:	f009 ff0a 	bl	8011788 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2273      	movs	r2, #115	; 0x73
 8007978:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2274      	movs	r2, #116	; 0x74
 8007980:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <ethernetif_init+0x54>)
 8007988:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <ethernetif_init+0x58>)
 800798e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff fe2d 	bl	80075f0 <low_level_init>

  return ERR_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	080125f0 	.word	0x080125f0
 80079a4:	0801260c 	.word	0x0801260c
 80079a8:	0801261c 	.word	0x0801261c
 80079ac:	0800f9d5 	.word	0x0800f9d5
 80079b0:	08007751 	.word	0x08007751

080079b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80079c0:	68f9      	ldr	r1, [r7, #12]
 80079c2:	4803      	ldr	r0, [pc, #12]	; (80079d0 <pbuf_free_custom+0x1c>)
 80079c4:	f000 fe5c 	bl	8008680 <memp_free_pool>
}
 80079c8:	bf00      	nop
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	08014ff8 	.word	0x08014ff8

080079d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80079d8:	f7f9 fd24 	bl	8001424 <HAL_GetTick>
 80079dc:	4603      	mov	r3, r0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80079e8:	4802      	ldr	r0, [pc, #8]	; (80079f4 <ETH_PHY_IO_Init+0x10>)
 80079ea:	f7fa fddf 	bl	80025ac <HAL_ETH_SetMDIOClockRange>

  return 0;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	24001cd0 	.word	0x24001cd0

080079f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
  return 0;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	68f9      	ldr	r1, [r7, #12]
 8007a1a:	4807      	ldr	r0, [pc, #28]	; (8007a38 <ETH_PHY_IO_ReadReg+0x30>)
 8007a1c:	f7fa fb2f 	bl	800207e <HAL_ETH_ReadPHYRegister>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	e000      	b.n	8007a2e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	24001cd0 	.word	0x24001cd0

08007a3c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	68f9      	ldr	r1, [r7, #12]
 8007a4e:	4807      	ldr	r0, [pc, #28]	; (8007a6c <ETH_PHY_IO_WriteReg+0x30>)
 8007a50:	f7fa fb6a 	bl	8002128 <HAL_ETH_WritePHYRegister>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5e:	e000      	b.n	8007a62 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	24001cd0 	.word	0x24001cd0

08007a70 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007a74:	f7f9 fcd6 	bl	8001424 <HAL_GetTick>
 8007a78:	4603      	mov	r3, r0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b0a0      	sub	sp, #128	; 0x80
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a90:	2300      	movs	r3, #0
 8007a92:	677b      	str	r3, [r7, #116]	; 0x74

//  struct netif *netif = (struct netif *) argument;
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007a94:	483a      	ldr	r0, [pc, #232]	; (8007b80 <ethernet_link_check_state+0x100>)
 8007a96:	f7f9 fbee 	bl	8001276 <LAN8742_GetLinkState>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	673b      	str	r3, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007aa4:	089b      	lsrs	r3, r3, #2
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00c      	beq.n	8007aca <ethernet_link_check_state+0x4a>
 8007ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d809      	bhi.n	8007aca <ethernet_link_check_state+0x4a>
  {
    HAL_ETH_Stop(&heth);
 8007ab6:	4833      	ldr	r0, [pc, #204]	; (8007b84 <ethernet_link_check_state+0x104>)
 8007ab8:	f7f9 ffd1 	bl	8001a5e <HAL_ETH_Stop>
    netif_set_down(netif);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f861 	bl	8008b84 <netif_set_down>
    netif_set_link_down(netif);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 f8bc 	bl	8008c40 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007ac8:	e055      	b.n	8007b76 <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d14e      	bne.n	8007b76 <ethernet_link_check_state+0xf6>
 8007ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d94b      	bls.n	8007b76 <ethernet_link_check_state+0xf6>
    switch (PHYLinkState)
 8007ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae0:	3b02      	subs	r3, #2
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d82a      	bhi.n	8007b3c <ethernet_link_check_state+0xbc>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <ethernet_link_check_state+0x6c>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007afd 	.word	0x08007afd
 8007af0:	08007b0f 	.word	0x08007b0f
 8007af4:	08007b1f 	.word	0x08007b1f
 8007af8:	08007b2f 	.word	0x08007b2f
      duplex = ETH_FULLDUPLEX_MODE;
 8007afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b00:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b06:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b0c:	e017      	b.n	8007b3e <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007b12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b16:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b1c:	e00f      	b.n	8007b3e <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 8007b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b22:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007b24:	2300      	movs	r3, #0
 8007b26:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b2c:	e007      	b.n	8007b3e <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007b32:	2300      	movs	r3, #0
 8007b34:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007b36:	2301      	movs	r3, #1
 8007b38:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007b3a:	e000      	b.n	8007b3e <ethernet_link_check_state+0xbe>
      break;
 8007b3c:	bf00      	nop
    if(linkchanged)
 8007b3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d018      	beq.n	8007b76 <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007b44:	f107 030c 	add.w	r3, r7, #12
 8007b48:	4619      	mov	r1, r3
 8007b4a:	480e      	ldr	r0, [pc, #56]	; (8007b84 <ethernet_link_check_state+0x104>)
 8007b4c:	f7fa fb40 	bl	80021d0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b56:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007b58:	f107 030c 	add.w	r3, r7, #12
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4809      	ldr	r0, [pc, #36]	; (8007b84 <ethernet_link_check_state+0x104>)
 8007b60:	f7fa fd0a 	bl	8002578 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007b64:	4807      	ldr	r0, [pc, #28]	; (8007b84 <ethernet_link_check_state+0x104>)
 8007b66:	f7f9 ff1e 	bl	80019a6 <HAL_ETH_Start>
      netif_set_up(netif);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 ff9e 	bl	8008aac <netif_set_up>
      netif_set_link_up(netif);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f839 	bl	8008be8 <netif_set_link_up>
}
 8007b76:	bf00      	nop
 8007b78:	3780      	adds	r7, #128	; 0x80
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	24001cb0 	.word	0x24001cb0
 8007b84:	24001cd0 	.word	0x24001cd0

08007b88 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	b21a      	sxth	r2, r3
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	b21b      	sxth	r3, r3
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	b21b      	sxth	r3, r3
 8007ba4:	b29b      	uxth	r3, r3
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	061a      	lsls	r2, r3, #24
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	0a1b      	lsrs	r3, r3, #8
 8007bcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	0e1b      	lsrs	r3, r3, #24
 8007bd6:	4313      	orrs	r3, r2
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b089      	sub	sp, #36	; 0x24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00d      	beq.n	8007c24 <lwip_standard_chksum+0x40>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dd0a      	ble.n	8007c24 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	1c53      	adds	r3, r2, #1
 8007c12:	61fb      	str	r3, [r7, #28]
 8007c14:	f107 030e 	add.w	r3, r7, #14
 8007c18:	3301      	adds	r3, #1
 8007c1a:	7812      	ldrb	r2, [r2, #0]
 8007c1c:	701a      	strb	r2, [r3, #0]
    len--;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8007c28:	e00a      	b.n	8007c40 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	1c9a      	adds	r2, r3, #2
 8007c2e:	61ba      	str	r2, [r7, #24]
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	4413      	add	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]
    len -= 2;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	3b02      	subs	r3, #2
 8007c3e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	dcf1      	bgt.n	8007c2a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	dd04      	ble.n	8007c56 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8007c4c:	f107 030e 	add.w	r3, r7, #14
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8007c56:	89fb      	ldrh	r3, [r7, #14]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	0c1a      	lsrs	r2, r3, #16
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	4413      	add	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	0c1a      	lsrs	r2, r3, #16
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	4413      	add	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	b29b      	uxth	r3, r3
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3724      	adds	r7, #36	; 0x24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8007caa:	887b      	ldrh	r3, [r7, #2]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff ff98 	bl	8007be4 <lwip_standard_chksum>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	b29b      	uxth	r3, r3
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b086      	sub	sp, #24
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	613b      	str	r3, [r7, #16]
 8007cd6:	e02b      	b.n	8007d30 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	895b      	ldrh	r3, [r3, #10]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f7ff ff7e 	bl	8007be4 <lwip_standard_chksum>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	461a      	mov	r2, r3
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	4413      	add	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	0c1a      	lsrs	r2, r3, #16
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	895b      	ldrh	r3, [r3, #10]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00e      	beq.n	8007d2a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bf0c      	ite	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	2300      	movne	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	0a1b      	lsrs	r3, r3, #8
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	4313      	orrs	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1d0      	bne.n	8007cd8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	0a1b      	lsrs	r3, r3, #8
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	43db      	mvns	r3, r3
 8007d52:	b29b      	uxth	r3, r3
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007d66:	f000 f8d5 	bl	8007f14 <mem_init>
  memp_init();
 8007d6a:	f000 fbd7 	bl	800851c <memp_init>
  pbuf_init();
  netif_init();
 8007d6e:	f000 fcd5 	bl	800871c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007d72:	f007 f829 	bl	800edc8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007d76:	f001 fd83 	bl	8009880 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007d7a:	f006 ff9d 	bl	800ecb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <ptr_to_mem+0x20>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	88fb      	ldrh	r3, [r7, #6]
 8007d98:	4413      	add	r3, r2
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	24001948 	.word	0x24001948

08007dac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <mem_to_ptr+0x20>)
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	b29b      	uxth	r3, r3
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	24001948 	.word	0x24001948

08007dd0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007dd0:	b590      	push	{r4, r7, lr}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007dd8:	4b45      	ldr	r3, [pc, #276]	; (8007ef0 <plug_holes+0x120>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d206      	bcs.n	8007df0 <plug_holes+0x20>
 8007de2:	4b44      	ldr	r3, [pc, #272]	; (8007ef4 <plug_holes+0x124>)
 8007de4:	f240 12df 	movw	r2, #479	; 0x1df
 8007de8:	4943      	ldr	r1, [pc, #268]	; (8007ef8 <plug_holes+0x128>)
 8007dea:	4844      	ldr	r0, [pc, #272]	; (8007efc <plug_holes+0x12c>)
 8007dec:	f009 fccc 	bl	8011788 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007df0:	4b43      	ldr	r3, [pc, #268]	; (8007f00 <plug_holes+0x130>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d306      	bcc.n	8007e08 <plug_holes+0x38>
 8007dfa:	4b3e      	ldr	r3, [pc, #248]	; (8007ef4 <plug_holes+0x124>)
 8007dfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007e00:	4940      	ldr	r1, [pc, #256]	; (8007f04 <plug_holes+0x134>)
 8007e02:	483e      	ldr	r0, [pc, #248]	; (8007efc <plug_holes+0x12c>)
 8007e04:	f009 fcc0 	bl	8011788 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	791b      	ldrb	r3, [r3, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d006      	beq.n	8007e1e <plug_holes+0x4e>
 8007e10:	4b38      	ldr	r3, [pc, #224]	; (8007ef4 <plug_holes+0x124>)
 8007e12:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007e16:	493c      	ldr	r1, [pc, #240]	; (8007f08 <plug_holes+0x138>)
 8007e18:	4838      	ldr	r0, [pc, #224]	; (8007efc <plug_holes+0x12c>)
 8007e1a:	f009 fcb5 	bl	8011788 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e26:	d906      	bls.n	8007e36 <plug_holes+0x66>
 8007e28:	4b32      	ldr	r3, [pc, #200]	; (8007ef4 <plug_holes+0x124>)
 8007e2a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007e2e:	4937      	ldr	r1, [pc, #220]	; (8007f0c <plug_holes+0x13c>)
 8007e30:	4832      	ldr	r0, [pc, #200]	; (8007efc <plug_holes+0x12c>)
 8007e32:	f009 fca9 	bl	8011788 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff ffa4 	bl	8007d88 <ptr_to_mem>
 8007e40:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d024      	beq.n	8007e94 <plug_holes+0xc4>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	791b      	ldrb	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d120      	bne.n	8007e94 <plug_holes+0xc4>
 8007e52:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <plug_holes+0x130>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d01b      	beq.n	8007e94 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007e5c:	4b2c      	ldr	r3, [pc, #176]	; (8007f10 <plug_holes+0x140>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d102      	bne.n	8007e6c <plug_holes+0x9c>
      lfree = mem;
 8007e66:	4a2a      	ldr	r2, [pc, #168]	; (8007f10 <plug_holes+0x140>)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	881a      	ldrh	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e7c:	d00a      	beq.n	8007e94 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff ff80 	bl	8007d88 <ptr_to_mem>
 8007e88:	4604      	mov	r4, r0
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff ff8e 	bl	8007dac <mem_to_ptr>
 8007e90:	4603      	mov	r3, r0
 8007e92:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	885b      	ldrh	r3, [r3, #2]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff ff75 	bl	8007d88 <ptr_to_mem>
 8007e9e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d01f      	beq.n	8007ee8 <plug_holes+0x118>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	791b      	ldrb	r3, [r3, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d11b      	bne.n	8007ee8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007eb0:	4b17      	ldr	r3, [pc, #92]	; (8007f10 <plug_holes+0x140>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d102      	bne.n	8007ec0 <plug_holes+0xf0>
      lfree = pmem;
 8007eba:	4a15      	ldr	r2, [pc, #84]	; (8007f10 <plug_holes+0x140>)
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	881a      	ldrh	r2, [r3, #0]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ed0:	d00a      	beq.n	8007ee8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff ff56 	bl	8007d88 <ptr_to_mem>
 8007edc:	4604      	mov	r4, r0
 8007ede:	68b8      	ldr	r0, [r7, #8]
 8007ee0:	f7ff ff64 	bl	8007dac <mem_to_ptr>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd90      	pop	{r4, r7, pc}
 8007ef0:	24001948 	.word	0x24001948
 8007ef4:	08012644 	.word	0x08012644
 8007ef8:	08012674 	.word	0x08012674
 8007efc:	0801268c 	.word	0x0801268c
 8007f00:	2400194c 	.word	0x2400194c
 8007f04:	080126b4 	.word	0x080126b4
 8007f08:	080126d0 	.word	0x080126d0
 8007f0c:	080126ec 	.word	0x080126ec
 8007f10:	24001950 	.word	0x24001950

08007f14 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007f1a:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <mem_init+0x60>)
 8007f1c:	4a16      	ldr	r2, [pc, #88]	; (8007f78 <mem_init+0x64>)
 8007f1e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007f20:	4b14      	ldr	r3, [pc, #80]	; (8007f74 <mem_init+0x60>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007f2c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007f3a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007f3e:	f7ff ff23 	bl	8007d88 <ptr_to_mem>
 8007f42:	4602      	mov	r2, r0
 8007f44:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <mem_init+0x68>)
 8007f46:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8007f48:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <mem_init+0x68>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007f50:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <mem_init+0x68>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007f58:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <mem_init+0x68>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007f62:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <mem_init+0x60>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a05      	ldr	r2, [pc, #20]	; (8007f80 <mem_init+0x6c>)
 8007f6a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	24001948 	.word	0x24001948
 8007f78:	30044000 	.word	0x30044000
 8007f7c:	2400194c 	.word	0x2400194c
 8007f80:	24001950 	.word	0x24001950

08007f84 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff ff0d 	bl	8007dac <mem_to_ptr>
 8007f92:	4603      	mov	r3, r0
 8007f94:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fef4 	bl	8007d88 <ptr_to_mem>
 8007fa0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	885b      	ldrh	r3, [r3, #2]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff feee 	bl	8007d88 <ptr_to_mem>
 8007fac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007fb6:	d818      	bhi.n	8007fea <mem_link_valid+0x66>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	885b      	ldrh	r3, [r3, #2]
 8007fbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007fc0:	d813      	bhi.n	8007fea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007fc6:	8afa      	ldrh	r2, [r7, #22]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d004      	beq.n	8007fd6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	8afa      	ldrh	r2, [r7, #22]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d109      	bne.n	8007fea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007fd6:	4b08      	ldr	r3, [pc, #32]	; (8007ff8 <mem_link_valid+0x74>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d006      	beq.n	8007fee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	885b      	ldrh	r3, [r3, #2]
 8007fe4:	8afa      	ldrh	r2, [r7, #22]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d001      	beq.n	8007fee <mem_link_valid+0x6a>
    return 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e000      	b.n	8007ff0 <mem_link_valid+0x6c>
  }
  return 1;
 8007fee:	2301      	movs	r3, #1
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	2400194c 	.word	0x2400194c

08007ffc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d04c      	beq.n	80080a4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d007      	beq.n	8008024 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008014:	4b25      	ldr	r3, [pc, #148]	; (80080ac <mem_free+0xb0>)
 8008016:	f240 2273 	movw	r2, #627	; 0x273
 800801a:	4925      	ldr	r1, [pc, #148]	; (80080b0 <mem_free+0xb4>)
 800801c:	4825      	ldr	r0, [pc, #148]	; (80080b4 <mem_free+0xb8>)
 800801e:	f009 fbb3 	bl	8011788 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008022:	e040      	b.n	80080a6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3b08      	subs	r3, #8
 8008028:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800802a:	4b23      	ldr	r3, [pc, #140]	; (80080b8 <mem_free+0xbc>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	429a      	cmp	r2, r3
 8008032:	d306      	bcc.n	8008042 <mem_free+0x46>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f103 020c 	add.w	r2, r3, #12
 800803a:	4b20      	ldr	r3, [pc, #128]	; (80080bc <mem_free+0xc0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	429a      	cmp	r2, r3
 8008040:	d907      	bls.n	8008052 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008042:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <mem_free+0xb0>)
 8008044:	f240 227f 	movw	r2, #639	; 0x27f
 8008048:	491d      	ldr	r1, [pc, #116]	; (80080c0 <mem_free+0xc4>)
 800804a:	481a      	ldr	r0, [pc, #104]	; (80080b4 <mem_free+0xb8>)
 800804c:	f009 fb9c 	bl	8011788 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008050:	e029      	b.n	80080a6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	791b      	ldrb	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d107      	bne.n	800806a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800805a:	4b14      	ldr	r3, [pc, #80]	; (80080ac <mem_free+0xb0>)
 800805c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008060:	4918      	ldr	r1, [pc, #96]	; (80080c4 <mem_free+0xc8>)
 8008062:	4814      	ldr	r0, [pc, #80]	; (80080b4 <mem_free+0xb8>)
 8008064:	f009 fb90 	bl	8011788 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008068:	e01d      	b.n	80080a6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f7ff ff8a 	bl	8007f84 <mem_link_valid>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d107      	bne.n	8008086 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008076:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <mem_free+0xb0>)
 8008078:	f240 2295 	movw	r2, #661	; 0x295
 800807c:	4912      	ldr	r1, [pc, #72]	; (80080c8 <mem_free+0xcc>)
 800807e:	480d      	ldr	r0, [pc, #52]	; (80080b4 <mem_free+0xb8>)
 8008080:	f009 fb82 	bl	8011788 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008084:	e00f      	b.n	80080a6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800808c:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <mem_free+0xd0>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	429a      	cmp	r2, r3
 8008094:	d202      	bcs.n	800809c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008096:	4a0d      	ldr	r2, [pc, #52]	; (80080cc <mem_free+0xd0>)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff fe97 	bl	8007dd0 <plug_holes>
 80080a2:	e000      	b.n	80080a6 <mem_free+0xaa>
    return;
 80080a4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	08012644 	.word	0x08012644
 80080b0:	08012718 	.word	0x08012718
 80080b4:	0801268c 	.word	0x0801268c
 80080b8:	24001948 	.word	0x24001948
 80080bc:	2400194c 	.word	0x2400194c
 80080c0:	0801273c 	.word	0x0801273c
 80080c4:	08012758 	.word	0x08012758
 80080c8:	08012780 	.word	0x08012780
 80080cc:	24001950 	.word	0x24001950

080080d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80080dc:	887b      	ldrh	r3, [r7, #2]
 80080de:	3303      	adds	r3, #3
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80080e8:	8bfb      	ldrh	r3, [r7, #30]
 80080ea:	2b0b      	cmp	r3, #11
 80080ec:	d801      	bhi.n	80080f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80080ee:	230c      	movs	r3, #12
 80080f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80080f2:	8bfb      	ldrh	r3, [r7, #30]
 80080f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80080f8:	d803      	bhi.n	8008102 <mem_trim+0x32>
 80080fa:	8bfa      	ldrh	r2, [r7, #30]
 80080fc:	887b      	ldrh	r3, [r7, #2]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d201      	bcs.n	8008106 <mem_trim+0x36>
    return NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	e0cc      	b.n	80082a0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008106:	4b68      	ldr	r3, [pc, #416]	; (80082a8 <mem_trim+0x1d8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d304      	bcc.n	800811a <mem_trim+0x4a>
 8008110:	4b66      	ldr	r3, [pc, #408]	; (80082ac <mem_trim+0x1dc>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d306      	bcc.n	8008128 <mem_trim+0x58>
 800811a:	4b65      	ldr	r3, [pc, #404]	; (80082b0 <mem_trim+0x1e0>)
 800811c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8008120:	4964      	ldr	r1, [pc, #400]	; (80082b4 <mem_trim+0x1e4>)
 8008122:	4865      	ldr	r0, [pc, #404]	; (80082b8 <mem_trim+0x1e8>)
 8008124:	f009 fb30 	bl	8011788 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008128:	4b5f      	ldr	r3, [pc, #380]	; (80082a8 <mem_trim+0x1d8>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	429a      	cmp	r2, r3
 8008130:	d304      	bcc.n	800813c <mem_trim+0x6c>
 8008132:	4b5e      	ldr	r3, [pc, #376]	; (80082ac <mem_trim+0x1dc>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	d301      	bcc.n	8008140 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	e0af      	b.n	80082a0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3b08      	subs	r3, #8
 8008144:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008146:	69b8      	ldr	r0, [r7, #24]
 8008148:	f7ff fe30 	bl	8007dac <mem_to_ptr>
 800814c:	4603      	mov	r3, r0
 800814e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	881a      	ldrh	r2, [r3, #0]
 8008154:	8afb      	ldrh	r3, [r7, #22]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	b29b      	uxth	r3, r3
 800815a:	3b08      	subs	r3, #8
 800815c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800815e:	8bfa      	ldrh	r2, [r7, #30]
 8008160:	8abb      	ldrh	r3, [r7, #20]
 8008162:	429a      	cmp	r2, r3
 8008164:	d906      	bls.n	8008174 <mem_trim+0xa4>
 8008166:	4b52      	ldr	r3, [pc, #328]	; (80082b0 <mem_trim+0x1e0>)
 8008168:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800816c:	4953      	ldr	r1, [pc, #332]	; (80082bc <mem_trim+0x1ec>)
 800816e:	4852      	ldr	r0, [pc, #328]	; (80082b8 <mem_trim+0x1e8>)
 8008170:	f009 fb0a 	bl	8011788 <iprintf>
  if (newsize > size) {
 8008174:	8bfa      	ldrh	r2, [r7, #30]
 8008176:	8abb      	ldrh	r3, [r7, #20]
 8008178:	429a      	cmp	r2, r3
 800817a:	d901      	bls.n	8008180 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	e08f      	b.n	80082a0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008180:	8bfa      	ldrh	r2, [r7, #30]
 8008182:	8abb      	ldrh	r3, [r7, #20]
 8008184:	429a      	cmp	r2, r3
 8008186:	d101      	bne.n	800818c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	e089      	b.n	80082a0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fdf9 	bl	8007d88 <ptr_to_mem>
 8008196:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	791b      	ldrb	r3, [r3, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d13f      	bne.n	8008220 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081a8:	d106      	bne.n	80081b8 <mem_trim+0xe8>
 80081aa:	4b41      	ldr	r3, [pc, #260]	; (80082b0 <mem_trim+0x1e0>)
 80081ac:	f240 22f5 	movw	r2, #757	; 0x2f5
 80081b0:	4943      	ldr	r1, [pc, #268]	; (80082c0 <mem_trim+0x1f0>)
 80081b2:	4841      	ldr	r0, [pc, #260]	; (80082b8 <mem_trim+0x1e8>)
 80081b4:	f009 fae8 	bl	8011788 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80081be:	8afa      	ldrh	r2, [r7, #22]
 80081c0:	8bfb      	ldrh	r3, [r7, #30]
 80081c2:	4413      	add	r3, r2
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	3308      	adds	r3, #8
 80081c8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80081ca:	4b3e      	ldr	r3, [pc, #248]	; (80082c4 <mem_trim+0x1f4>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d106      	bne.n	80081e2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80081d4:	89fb      	ldrh	r3, [r7, #14]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff fdd6 	bl	8007d88 <ptr_to_mem>
 80081dc:	4602      	mov	r2, r0
 80081de:	4b39      	ldr	r3, [pc, #228]	; (80082c4 <mem_trim+0x1f4>)
 80081e0:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80081e2:	89fb      	ldrh	r3, [r7, #14]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff fdcf 	bl	8007d88 <ptr_to_mem>
 80081ea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2200      	movs	r2, #0
 80081f0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	89ba      	ldrh	r2, [r7, #12]
 80081f6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	8afa      	ldrh	r2, [r7, #22]
 80081fc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	89fa      	ldrh	r2, [r7, #14]
 8008202:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800820c:	d047      	beq.n	800829e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fdb8 	bl	8007d88 <ptr_to_mem>
 8008218:	4602      	mov	r2, r0
 800821a:	89fb      	ldrh	r3, [r7, #14]
 800821c:	8053      	strh	r3, [r2, #2]
 800821e:	e03e      	b.n	800829e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008220:	8bfb      	ldrh	r3, [r7, #30]
 8008222:	f103 0214 	add.w	r2, r3, #20
 8008226:	8abb      	ldrh	r3, [r7, #20]
 8008228:	429a      	cmp	r2, r3
 800822a:	d838      	bhi.n	800829e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800822c:	8afa      	ldrh	r2, [r7, #22]
 800822e:	8bfb      	ldrh	r3, [r7, #30]
 8008230:	4413      	add	r3, r2
 8008232:	b29b      	uxth	r3, r3
 8008234:	3308      	adds	r3, #8
 8008236:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008240:	d106      	bne.n	8008250 <mem_trim+0x180>
 8008242:	4b1b      	ldr	r3, [pc, #108]	; (80082b0 <mem_trim+0x1e0>)
 8008244:	f240 3216 	movw	r2, #790	; 0x316
 8008248:	491d      	ldr	r1, [pc, #116]	; (80082c0 <mem_trim+0x1f0>)
 800824a:	481b      	ldr	r0, [pc, #108]	; (80082b8 <mem_trim+0x1e8>)
 800824c:	f009 fa9c 	bl	8011788 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008250:	89fb      	ldrh	r3, [r7, #14]
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff fd98 	bl	8007d88 <ptr_to_mem>
 8008258:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800825a:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <mem_trim+0x1f4>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	429a      	cmp	r2, r3
 8008262:	d202      	bcs.n	800826a <mem_trim+0x19a>
      lfree = mem2;
 8008264:	4a17      	ldr	r2, [pc, #92]	; (80082c4 <mem_trim+0x1f4>)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2200      	movs	r2, #0
 800826e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	881a      	ldrh	r2, [r3, #0]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	8afa      	ldrh	r2, [r7, #22]
 800827c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	89fa      	ldrh	r2, [r7, #14]
 8008282:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800828c:	d007      	beq.n	800829e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff fd78 	bl	8007d88 <ptr_to_mem>
 8008298:	4602      	mov	r2, r0
 800829a:	89fb      	ldrh	r3, [r7, #14]
 800829c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800829e:	687b      	ldr	r3, [r7, #4]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	24001948 	.word	0x24001948
 80082ac:	2400194c 	.word	0x2400194c
 80082b0:	08012644 	.word	0x08012644
 80082b4:	080127b4 	.word	0x080127b4
 80082b8:	0801268c 	.word	0x0801268c
 80082bc:	080127cc 	.word	0x080127cc
 80082c0:	080127ec 	.word	0x080127ec
 80082c4:	24001950 	.word	0x24001950

080082c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80082d2:	88fb      	ldrh	r3, [r7, #6]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <mem_malloc+0x14>
    return NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	e0d9      	b.n	8008490 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	3303      	adds	r3, #3
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	f023 0303 	bic.w	r3, r3, #3
 80082e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80082e8:	8bbb      	ldrh	r3, [r7, #28]
 80082ea:	2b0b      	cmp	r3, #11
 80082ec:	d801      	bhi.n	80082f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80082ee:	230c      	movs	r3, #12
 80082f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80082f2:	8bbb      	ldrh	r3, [r7, #28]
 80082f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082f8:	d803      	bhi.n	8008302 <mem_malloc+0x3a>
 80082fa:	8bba      	ldrh	r2, [r7, #28]
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d201      	bcs.n	8008306 <mem_malloc+0x3e>
    return NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	e0c4      	b.n	8008490 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008306:	4b64      	ldr	r3, [pc, #400]	; (8008498 <mem_malloc+0x1d0>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fd4e 	bl	8007dac <mem_to_ptr>
 8008310:	4603      	mov	r3, r0
 8008312:	83fb      	strh	r3, [r7, #30]
 8008314:	e0b4      	b.n	8008480 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008316:	8bfb      	ldrh	r3, [r7, #30]
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff fd35 	bl	8007d88 <ptr_to_mem>
 800831e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	791b      	ldrb	r3, [r3, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f040 80a4 	bne.w	8008472 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	8bfb      	ldrh	r3, [r7, #30]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	f1a3 0208 	sub.w	r2, r3, #8
 8008338:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800833a:	429a      	cmp	r2, r3
 800833c:	f0c0 8099 	bcc.w	8008472 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	8bfb      	ldrh	r3, [r7, #30]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	f1a3 0208 	sub.w	r2, r3, #8
 800834e:	8bbb      	ldrh	r3, [r7, #28]
 8008350:	3314      	adds	r3, #20
 8008352:	429a      	cmp	r2, r3
 8008354:	d333      	bcc.n	80083be <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008356:	8bfa      	ldrh	r2, [r7, #30]
 8008358:	8bbb      	ldrh	r3, [r7, #28]
 800835a:	4413      	add	r3, r2
 800835c:	b29b      	uxth	r3, r3
 800835e:	3308      	adds	r3, #8
 8008360:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008362:	8a7b      	ldrh	r3, [r7, #18]
 8008364:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008368:	d106      	bne.n	8008378 <mem_malloc+0xb0>
 800836a:	4b4c      	ldr	r3, [pc, #304]	; (800849c <mem_malloc+0x1d4>)
 800836c:	f240 3287 	movw	r2, #903	; 0x387
 8008370:	494b      	ldr	r1, [pc, #300]	; (80084a0 <mem_malloc+0x1d8>)
 8008372:	484c      	ldr	r0, [pc, #304]	; (80084a4 <mem_malloc+0x1dc>)
 8008374:	f009 fa08 	bl	8011788 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008378:	8a7b      	ldrh	r3, [r7, #18]
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff fd04 	bl	8007d88 <ptr_to_mem>
 8008380:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	881a      	ldrh	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	8bfa      	ldrh	r2, [r7, #30]
 8008394:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	8a7a      	ldrh	r2, [r7, #18]
 800839a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	2201      	movs	r2, #1
 80083a0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80083aa:	d00b      	beq.n	80083c4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff fce9 	bl	8007d88 <ptr_to_mem>
 80083b6:	4602      	mov	r2, r0
 80083b8:	8a7b      	ldrh	r3, [r7, #18]
 80083ba:	8053      	strh	r3, [r2, #2]
 80083bc:	e002      	b.n	80083c4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2201      	movs	r2, #1
 80083c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80083c4:	4b34      	ldr	r3, [pc, #208]	; (8008498 <mem_malloc+0x1d0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d127      	bne.n	800841e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80083ce:	4b32      	ldr	r3, [pc, #200]	; (8008498 <mem_malloc+0x1d0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80083d4:	e005      	b.n	80083e2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff fcd4 	bl	8007d88 <ptr_to_mem>
 80083e0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	791b      	ldrb	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d004      	beq.n	80083f4 <mem_malloc+0x12c>
 80083ea:	4b2f      	ldr	r3, [pc, #188]	; (80084a8 <mem_malloc+0x1e0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d1f0      	bne.n	80083d6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80083f4:	4a28      	ldr	r2, [pc, #160]	; (8008498 <mem_malloc+0x1d0>)
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80083fa:	4b27      	ldr	r3, [pc, #156]	; (8008498 <mem_malloc+0x1d0>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4b2a      	ldr	r3, [pc, #168]	; (80084a8 <mem_malloc+0x1e0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d00b      	beq.n	800841e <mem_malloc+0x156>
 8008406:	4b24      	ldr	r3, [pc, #144]	; (8008498 <mem_malloc+0x1d0>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	791b      	ldrb	r3, [r3, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d006      	beq.n	800841e <mem_malloc+0x156>
 8008410:	4b22      	ldr	r3, [pc, #136]	; (800849c <mem_malloc+0x1d4>)
 8008412:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008416:	4925      	ldr	r1, [pc, #148]	; (80084ac <mem_malloc+0x1e4>)
 8008418:	4822      	ldr	r0, [pc, #136]	; (80084a4 <mem_malloc+0x1dc>)
 800841a:	f009 f9b5 	bl	8011788 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800841e:	8bba      	ldrh	r2, [r7, #28]
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	4413      	add	r3, r2
 8008424:	3308      	adds	r3, #8
 8008426:	4a20      	ldr	r2, [pc, #128]	; (80084a8 <mem_malloc+0x1e0>)
 8008428:	6812      	ldr	r2, [r2, #0]
 800842a:	4293      	cmp	r3, r2
 800842c:	d906      	bls.n	800843c <mem_malloc+0x174>
 800842e:	4b1b      	ldr	r3, [pc, #108]	; (800849c <mem_malloc+0x1d4>)
 8008430:	f240 32ba 	movw	r2, #954	; 0x3ba
 8008434:	491e      	ldr	r1, [pc, #120]	; (80084b0 <mem_malloc+0x1e8>)
 8008436:	481b      	ldr	r0, [pc, #108]	; (80084a4 <mem_malloc+0x1dc>)
 8008438:	f009 f9a6 	bl	8011788 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d006      	beq.n	8008454 <mem_malloc+0x18c>
 8008446:	4b15      	ldr	r3, [pc, #84]	; (800849c <mem_malloc+0x1d4>)
 8008448:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800844c:	4919      	ldr	r1, [pc, #100]	; (80084b4 <mem_malloc+0x1ec>)
 800844e:	4815      	ldr	r0, [pc, #84]	; (80084a4 <mem_malloc+0x1dc>)
 8008450:	f009 f99a 	bl	8011788 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d006      	beq.n	800846c <mem_malloc+0x1a4>
 800845e:	4b0f      	ldr	r3, [pc, #60]	; (800849c <mem_malloc+0x1d4>)
 8008460:	f240 32be 	movw	r2, #958	; 0x3be
 8008464:	4914      	ldr	r1, [pc, #80]	; (80084b8 <mem_malloc+0x1f0>)
 8008466:	480f      	ldr	r0, [pc, #60]	; (80084a4 <mem_malloc+0x1dc>)
 8008468:	f009 f98e 	bl	8011788 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	3308      	adds	r3, #8
 8008470:	e00e      	b.n	8008490 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008472:	8bfb      	ldrh	r3, [r7, #30]
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fc87 	bl	8007d88 <ptr_to_mem>
 800847a:	4603      	mov	r3, r0
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008480:	8bfa      	ldrh	r2, [r7, #30]
 8008482:	8bbb      	ldrh	r3, [r7, #28]
 8008484:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008488:	429a      	cmp	r2, r3
 800848a:	f4ff af44 	bcc.w	8008316 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	24001950 	.word	0x24001950
 800849c:	08012644 	.word	0x08012644
 80084a0:	080127ec 	.word	0x080127ec
 80084a4:	0801268c 	.word	0x0801268c
 80084a8:	2400194c 	.word	0x2400194c
 80084ac:	08012800 	.word	0x08012800
 80084b0:	0801281c 	.word	0x0801281c
 80084b4:	0801284c 	.word	0x0801284c
 80084b8:	0801287c 	.word	0x0801287c

080084bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	3303      	adds	r3, #3
 80084d2:	f023 0303 	bic.w	r3, r3, #3
 80084d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	e011      	b.n	8008502 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4413      	add	r3, r2
 80084fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3301      	adds	r3, #1
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	885b      	ldrh	r3, [r3, #2]
 8008506:	461a      	mov	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4293      	cmp	r3, r2
 800850c:	dbe7      	blt.n	80084de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
	...

0800851c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008522:	2300      	movs	r3, #0
 8008524:	80fb      	strh	r3, [r7, #6]
 8008526:	e009      	b.n	800853c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	4a08      	ldr	r2, [pc, #32]	; (800854c <memp_init+0x30>)
 800852c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff ffc3 	bl	80084bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008536:	88fb      	ldrh	r3, [r7, #6]
 8008538:	3301      	adds	r3, #1
 800853a:	80fb      	strh	r3, [r7, #6]
 800853c:	88fb      	ldrh	r3, [r7, #6]
 800853e:	2b08      	cmp	r3, #8
 8008540:	d9f2      	bls.n	8008528 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	08015070 	.word	0x08015070

08008550 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d012      	beq.n	800858c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d006      	beq.n	8008588 <do_memp_malloc_pool+0x38>
 800857a:	4b07      	ldr	r3, [pc, #28]	; (8008598 <do_memp_malloc_pool+0x48>)
 800857c:	f240 1219 	movw	r2, #281	; 0x119
 8008580:	4906      	ldr	r1, [pc, #24]	; (800859c <do_memp_malloc_pool+0x4c>)
 8008582:	4807      	ldr	r0, [pc, #28]	; (80085a0 <do_memp_malloc_pool+0x50>)
 8008584:	f009 f900 	bl	8011788 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	e000      	b.n	800858e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	080128a0 	.word	0x080128a0
 800859c:	080128d0 	.word	0x080128d0
 80085a0:	080128f4 	.word	0x080128f4

080085a4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <memp_malloc_pool+0x1c>
 80085b2:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <memp_malloc_pool+0x38>)
 80085b4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80085b8:	4909      	ldr	r1, [pc, #36]	; (80085e0 <memp_malloc_pool+0x3c>)
 80085ba:	480a      	ldr	r0, [pc, #40]	; (80085e4 <memp_malloc_pool+0x40>)
 80085bc:	f009 f8e4 	bl	8011788 <iprintf>
  if (desc == NULL) {
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <memp_malloc_pool+0x26>
    return NULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e003      	b.n	80085d2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7ff ffc0 	bl	8008550 <do_memp_malloc_pool>
 80085d0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	080128a0 	.word	0x080128a0
 80085e0:	0801291c 	.word	0x0801291c
 80085e4:	080128f4 	.word	0x080128f4

080085e8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d908      	bls.n	800860a <memp_malloc+0x22>
 80085f8:	4b0a      	ldr	r3, [pc, #40]	; (8008624 <memp_malloc+0x3c>)
 80085fa:	f240 1257 	movw	r2, #343	; 0x157
 80085fe:	490a      	ldr	r1, [pc, #40]	; (8008628 <memp_malloc+0x40>)
 8008600:	480a      	ldr	r0, [pc, #40]	; (800862c <memp_malloc+0x44>)
 8008602:	f009 f8c1 	bl	8011788 <iprintf>
 8008606:	2300      	movs	r3, #0
 8008608:	e008      	b.n	800861c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	4a08      	ldr	r2, [pc, #32]	; (8008630 <memp_malloc+0x48>)
 800860e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff ff9c 	bl	8008550 <do_memp_malloc_pool>
 8008618:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800861a:	68fb      	ldr	r3, [r7, #12]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	080128a0 	.word	0x080128a0
 8008628:	08012930 	.word	0x08012930
 800862c:	080128f4 	.word	0x080128f4
 8008630:	08015070 	.word	0x08015070

08008634 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	f003 0303 	and.w	r3, r3, #3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d006      	beq.n	8008656 <do_memp_free_pool+0x22>
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <do_memp_free_pool+0x40>)
 800864a:	f240 126d 	movw	r2, #365	; 0x16d
 800864e:	490a      	ldr	r1, [pc, #40]	; (8008678 <do_memp_free_pool+0x44>)
 8008650:	480a      	ldr	r0, [pc, #40]	; (800867c <do_memp_free_pool+0x48>)
 8008652:	f009 f899 	bl	8011788 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	080128a0 	.word	0x080128a0
 8008678:	08012950 	.word	0x08012950
 800867c:	080128f4 	.word	0x080128f4

08008680 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <memp_free_pool+0x1e>
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <memp_free_pool+0x3c>)
 8008692:	f240 1295 	movw	r2, #405	; 0x195
 8008696:	490a      	ldr	r1, [pc, #40]	; (80086c0 <memp_free_pool+0x40>)
 8008698:	480a      	ldr	r0, [pc, #40]	; (80086c4 <memp_free_pool+0x44>)
 800869a:	f009 f875 	bl	8011788 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <memp_free_pool+0x34>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff ffc1 	bl	8008634 <do_memp_free_pool>
 80086b2:	e000      	b.n	80086b6 <memp_free_pool+0x36>
    return;
 80086b4:	bf00      	nop
}
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	080128a0 	.word	0x080128a0
 80086c0:	0801291c 	.word	0x0801291c
 80086c4:	080128f4 	.word	0x080128f4

080086c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	2b08      	cmp	r3, #8
 80086d8:	d907      	bls.n	80086ea <memp_free+0x22>
 80086da:	4b0c      	ldr	r3, [pc, #48]	; (800870c <memp_free+0x44>)
 80086dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80086e0:	490b      	ldr	r1, [pc, #44]	; (8008710 <memp_free+0x48>)
 80086e2:	480c      	ldr	r0, [pc, #48]	; (8008714 <memp_free+0x4c>)
 80086e4:	f009 f850 	bl	8011788 <iprintf>
 80086e8:	e00c      	b.n	8008704 <memp_free+0x3c>

  if (mem == NULL) {
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d008      	beq.n	8008702 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	4a09      	ldr	r2, [pc, #36]	; (8008718 <memp_free+0x50>)
 80086f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff ff9a 	bl	8008634 <do_memp_free_pool>
 8008700:	e000      	b.n	8008704 <memp_free+0x3c>
    return;
 8008702:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	080128a0 	.word	0x080128a0
 8008710:	08012970 	.word	0x08012970
 8008714:	080128f4 	.word	0x080128f4
 8008718:	08015070 	.word	0x08015070

0800871c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008720:	bf00      	nop
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
	...

0800872c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d108      	bne.n	8008752 <netif_add+0x26>
 8008740:	4b56      	ldr	r3, [pc, #344]	; (800889c <netif_add+0x170>)
 8008742:	f240 1227 	movw	r2, #295	; 0x127
 8008746:	4956      	ldr	r1, [pc, #344]	; (80088a0 <netif_add+0x174>)
 8008748:	4856      	ldr	r0, [pc, #344]	; (80088a4 <netif_add+0x178>)
 800874a:	f009 f81d 	bl	8011788 <iprintf>
 800874e:	2300      	movs	r3, #0
 8008750:	e09f      	b.n	8008892 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d108      	bne.n	800876a <netif_add+0x3e>
 8008758:	4b50      	ldr	r3, [pc, #320]	; (800889c <netif_add+0x170>)
 800875a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800875e:	4952      	ldr	r1, [pc, #328]	; (80088a8 <netif_add+0x17c>)
 8008760:	4850      	ldr	r0, [pc, #320]	; (80088a4 <netif_add+0x178>)
 8008762:	f009 f811 	bl	8011788 <iprintf>
 8008766:	2300      	movs	r3, #0
 8008768:	e093      	b.n	8008892 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008770:	4b4e      	ldr	r3, [pc, #312]	; (80088ac <netif_add+0x180>)
 8008772:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800877a:	4b4c      	ldr	r3, [pc, #304]	; (80088ac <netif_add+0x180>)
 800877c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008784:	4b49      	ldr	r3, [pc, #292]	; (80088ac <netif_add+0x180>)
 8008786:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4a44      	ldr	r2, [pc, #272]	; (80088b0 <netif_add+0x184>)
 800879e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a3a      	ldr	r2, [r7, #32]
 80087b2:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80087b4:	4b3f      	ldr	r3, [pc, #252]	; (80088b4 <netif_add+0x188>)
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087c2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 f914 	bl	80089f8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	4798      	blx	r3
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <netif_add+0xb4>
    return NULL;
 80087dc:	2300      	movs	r3, #0
 80087de:	e058      	b.n	8008892 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087e6:	2bff      	cmp	r3, #255	; 0xff
 80087e8:	d103      	bne.n	80087f2 <netif_add+0xc6>
        netif->num = 0;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80087f6:	4b30      	ldr	r3, [pc, #192]	; (80088b8 <netif_add+0x18c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e02b      	b.n	8008856 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	429a      	cmp	r2, r3
 8008804:	d106      	bne.n	8008814 <netif_add+0xe8>
 8008806:	4b25      	ldr	r3, [pc, #148]	; (800889c <netif_add+0x170>)
 8008808:	f240 128b 	movw	r2, #395	; 0x18b
 800880c:	492b      	ldr	r1, [pc, #172]	; (80088bc <netif_add+0x190>)
 800880e:	4825      	ldr	r0, [pc, #148]	; (80088a4 <netif_add+0x178>)
 8008810:	f008 ffba 	bl	8011788 <iprintf>
        num_netifs++;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	3301      	adds	r3, #1
 8008818:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	2bff      	cmp	r3, #255	; 0xff
 800881e:	dd06      	ble.n	800882e <netif_add+0x102>
 8008820:	4b1e      	ldr	r3, [pc, #120]	; (800889c <netif_add+0x170>)
 8008822:	f240 128d 	movw	r2, #397	; 0x18d
 8008826:	4926      	ldr	r1, [pc, #152]	; (80088c0 <netif_add+0x194>)
 8008828:	481e      	ldr	r0, [pc, #120]	; (80088a4 <netif_add+0x178>)
 800882a:	f008 ffad 	bl	8011788 <iprintf>
        if (netif2->num == netif->num) {
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800883a:	429a      	cmp	r2, r3
 800883c:	d108      	bne.n	8008850 <netif_add+0x124>
          netif->num++;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008844:	3301      	adds	r3, #1
 8008846:	b2da      	uxtb	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800884e:	e005      	b.n	800885c <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1d0      	bne.n	80087fe <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1be      	bne.n	80087e0 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008868:	2bfe      	cmp	r3, #254	; 0xfe
 800886a:	d103      	bne.n	8008874 <netif_add+0x148>
    netif_num = 0;
 800886c:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <netif_add+0x188>)
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	e006      	b.n	8008882 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800887a:	3301      	adds	r3, #1
 800887c:	b2da      	uxtb	r2, r3
 800887e:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <netif_add+0x188>)
 8008880:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008882:	4b0d      	ldr	r3, [pc, #52]	; (80088b8 <netif_add+0x18c>)
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800888a:	4a0b      	ldr	r2, [pc, #44]	; (80088b8 <netif_add+0x18c>)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008890:	68fb      	ldr	r3, [r7, #12]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	0801298c 	.word	0x0801298c
 80088a0:	08012a20 	.word	0x08012a20
 80088a4:	080129dc 	.word	0x080129dc
 80088a8:	08012a3c 	.word	0x08012a3c
 80088ac:	080150d4 	.word	0x080150d4
 80088b0:	08008c91 	.word	0x08008c91
 80088b4:	24001978 	.word	0x24001978
 80088b8:	24004c54 	.word	0x24004c54
 80088bc:	08012a60 	.word	0x08012a60
 80088c0:	08012a74 	.word	0x08012a74

080088c4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f002 fb11 	bl	800aef8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f006 fbff 	bl	800f0dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80088de:	bf00      	nop
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <netif_do_set_ipaddr+0x20>
 80088fa:	4b1d      	ldr	r3, [pc, #116]	; (8008970 <netif_do_set_ipaddr+0x88>)
 80088fc:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008900:	491c      	ldr	r1, [pc, #112]	; (8008974 <netif_do_set_ipaddr+0x8c>)
 8008902:	481d      	ldr	r0, [pc, #116]	; (8008978 <netif_do_set_ipaddr+0x90>)
 8008904:	f008 ff40 	bl	8011788 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <netif_do_set_ipaddr+0x34>
 800890e:	4b18      	ldr	r3, [pc, #96]	; (8008970 <netif_do_set_ipaddr+0x88>)
 8008910:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008914:	4917      	ldr	r1, [pc, #92]	; (8008974 <netif_do_set_ipaddr+0x8c>)
 8008916:	4818      	ldr	r0, [pc, #96]	; (8008978 <netif_do_set_ipaddr+0x90>)
 8008918:	f008 ff36 	bl	8011788 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3304      	adds	r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d01c      	beq.n	8008964 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3304      	adds	r3, #4
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800893a:	f107 0314 	add.w	r3, r7, #20
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff ffbf 	bl	80088c4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <netif_do_set_ipaddr+0x6a>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	e000      	b.n	8008954 <netif_do_set_ipaddr+0x6c>
 8008952:	2300      	movs	r3, #0
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008958:	2101      	movs	r1, #1
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f8d2 	bl	8008b04 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008960:	2301      	movs	r3, #1
 8008962:	e000      	b.n	8008966 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	0801298c 	.word	0x0801298c
 8008974:	08012aa4 	.word	0x08012aa4
 8008978:	080129dc 	.word	0x080129dc

0800897c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3308      	adds	r3, #8
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	429a      	cmp	r2, r3
 8008994:	d00a      	beq.n	80089ac <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <netif_do_set_netmask+0x26>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	e000      	b.n	80089a4 <netif_do_set_netmask+0x28>
 80089a2:	2300      	movs	r3, #0
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	330c      	adds	r3, #12
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d00a      	beq.n	80089ea <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <netif_do_set_gw+0x26>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	e000      	b.n	80089e2 <netif_do_set_gw+0x28>
 80089e0:	2300      	movs	r3, #0
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008a14:	4b1c      	ldr	r3, [pc, #112]	; (8008a88 <netif_set_addr+0x90>)
 8008a16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008a1e:	4b1a      	ldr	r3, [pc, #104]	; (8008a88 <netif_set_addr+0x90>)
 8008a20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008a28:	4b17      	ldr	r3, [pc, #92]	; (8008a88 <netif_set_addr+0x90>)
 8008a2a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <netif_set_addr+0x42>
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <netif_set_addr+0x46>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <netif_set_addr+0x48>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d006      	beq.n	8008a56 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008a48:	f107 0310 	add.w	r3, r7, #16
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff ff49 	bl	80088e8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff ff8e 	bl	800897c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7ff ffa8 	bl	80089ba <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d106      	bne.n	8008a7e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008a70:	f107 0310 	add.w	r3, r7, #16
 8008a74:	461a      	mov	r2, r3
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f7ff ff35 	bl	80088e8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008a7e:	bf00      	nop
 8008a80:	3720      	adds	r7, #32
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	080150d4 	.word	0x080150d4

08008a8c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008a94:	4a04      	ldr	r2, [pc, #16]	; (8008aa8 <netif_set_default+0x1c>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008a9a:	bf00      	nop
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	24004c58 	.word	0x24004c58

08008aac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d107      	bne.n	8008aca <netif_set_up+0x1e>
 8008aba:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <netif_set_up+0x4c>)
 8008abc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008ac0:	490e      	ldr	r1, [pc, #56]	; (8008afc <netif_set_up+0x50>)
 8008ac2:	480f      	ldr	r0, [pc, #60]	; (8008b00 <netif_set_up+0x54>)
 8008ac4:	f008 fe60 	bl	8011788 <iprintf>
 8008ac8:	e013      	b.n	8008af2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10c      	bne.n	8008af2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008ade:	f043 0301 	orr.w	r3, r3, #1
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008aea:	2103      	movs	r1, #3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f809 	bl	8008b04 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	0801298c 	.word	0x0801298c
 8008afc:	08012b14 	.word	0x08012b14
 8008b00:	080129dc 	.word	0x080129dc

08008b04 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d106      	bne.n	8008b24 <netif_issue_reports+0x20>
 8008b16:	4b18      	ldr	r3, [pc, #96]	; (8008b78 <netif_issue_reports+0x74>)
 8008b18:	f240 326d 	movw	r2, #877	; 0x36d
 8008b1c:	4917      	ldr	r1, [pc, #92]	; (8008b7c <netif_issue_reports+0x78>)
 8008b1e:	4818      	ldr	r0, [pc, #96]	; (8008b80 <netif_issue_reports+0x7c>)
 8008b20:	f008 fe32 	bl	8011788 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d01e      	beq.n	8008b70 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008b38:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d017      	beq.n	8008b70 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d013      	beq.n	8008b72 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00e      	beq.n	8008b72 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008b5a:	f003 0308 	and.w	r3, r3, #8
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d007      	beq.n	8008b72 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3304      	adds	r3, #4
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f007 fa21 	bl	800ffb0 <etharp_request>
 8008b6e:	e000      	b.n	8008b72 <netif_issue_reports+0x6e>
    return;
 8008b70:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	0801298c 	.word	0x0801298c
 8008b7c:	08012b30 	.word	0x08012b30
 8008b80:	080129dc 	.word	0x080129dc

08008b84 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d107      	bne.n	8008ba2 <netif_set_down+0x1e>
 8008b92:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <netif_set_down+0x58>)
 8008b94:	f240 329b 	movw	r2, #923	; 0x39b
 8008b98:	4911      	ldr	r1, [pc, #68]	; (8008be0 <netif_set_down+0x5c>)
 8008b9a:	4812      	ldr	r0, [pc, #72]	; (8008be4 <netif_set_down+0x60>)
 8008b9c:	f008 fdf4 	bl	8011788 <iprintf>
 8008ba0:	e019      	b.n	8008bd6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d012      	beq.n	8008bd6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008bb6:	f023 0301 	bic.w	r3, r3, #1
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008bc8:	f003 0308 	and.w	r3, r3, #8
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f006 fdab 	bl	800f72c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	0801298c 	.word	0x0801298c
 8008be0:	08012b54 	.word	0x08012b54
 8008be4:	080129dc 	.word	0x080129dc

08008be8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d107      	bne.n	8008c06 <netif_set_link_up+0x1e>
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <netif_set_link_up+0x4c>)
 8008bf8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008bfc:	490e      	ldr	r1, [pc, #56]	; (8008c38 <netif_set_link_up+0x50>)
 8008bfe:	480f      	ldr	r0, [pc, #60]	; (8008c3c <netif_set_link_up+0x54>)
 8008c00:	f008 fdc2 	bl	8011788 <iprintf>
 8008c04:	e013      	b.n	8008c2e <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10c      	bne.n	8008c2e <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008c1a:	f043 0304 	orr.w	r3, r3, #4
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008c26:	2103      	movs	r1, #3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff ff6b 	bl	8008b04 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	0801298c 	.word	0x0801298c
 8008c38:	08012b74 	.word	0x08012b74
 8008c3c:	080129dc 	.word	0x080129dc

08008c40 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d107      	bne.n	8008c5e <netif_set_link_down+0x1e>
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <netif_set_link_down+0x44>)
 8008c50:	f240 4206 	movw	r2, #1030	; 0x406
 8008c54:	490c      	ldr	r1, [pc, #48]	; (8008c88 <netif_set_link_down+0x48>)
 8008c56:	480d      	ldr	r0, [pc, #52]	; (8008c8c <netif_set_link_down+0x4c>)
 8008c58:	f008 fd96 	bl	8011788 <iprintf>
 8008c5c:	e00f      	b.n	8008c7e <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008c72:	f023 0304 	bic.w	r3, r3, #4
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	0801298c 	.word	0x0801298c
 8008c88:	08012b98 	.word	0x08012b98
 8008c8c:	080129dc 	.word	0x080129dc

08008c90 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008c9c:	f06f 030b 	mvn.w	r3, #11
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d013      	beq.n	8008ce4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008cbc:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <netif_get_by_index+0x48>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	e00c      	b.n	8008cde <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cca:	3301      	adds	r3, #1
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	79fa      	ldrb	r2, [r7, #7]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d101      	bne.n	8008cd8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	e006      	b.n	8008ce6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1ef      	bne.n	8008cc4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	24004c54 	.word	0x24004c54

08008cf8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008cfe:	4b0c      	ldr	r3, [pc, #48]	; (8008d30 <pbuf_free_ooseq+0x38>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008d04:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <pbuf_free_ooseq+0x3c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	607b      	str	r3, [r7, #4]
 8008d0a:	e00a      	b.n	8008d22 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f002 f92d 	bl	800af74 <tcp_free_ooseq>
      return;
 8008d1a:	e005      	b.n	8008d28 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	607b      	str	r3, [r7, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1f1      	bne.n	8008d0c <pbuf_free_ooseq+0x14>
    }
  }
}
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	24004c5c 	.word	0x24004c5c
 8008d34:	24004c64 	.word	0x24004c64

08008d38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008d3c:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <pbuf_pool_is_empty+0x14>)
 8008d3e:	2201      	movs	r2, #1
 8008d40:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008d42:	bf00      	nop
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	24004c5c 	.word	0x24004c5c

08008d50 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	460b      	mov	r3, r1
 8008d60:	80fb      	strh	r3, [r7, #6]
 8008d62:	4613      	mov	r3, r2
 8008d64:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	88fa      	ldrh	r2, [r7, #6]
 8008d76:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	88ba      	ldrh	r2, [r7, #4]
 8008d7c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008d7e:	8b3b      	ldrh	r3, [r7, #24]
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	7f3a      	ldrb	r2, [r7, #28]
 8008d8a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	73da      	strb	r2, [r3, #15]
}
 8008d98:	bf00      	nop
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b08c      	sub	sp, #48	; 0x30
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	4603      	mov	r3, r0
 8008dac:	71fb      	strb	r3, [r7, #7]
 8008dae:	460b      	mov	r3, r1
 8008db0:	80bb      	strh	r3, [r7, #4]
 8008db2:	4613      	mov	r3, r2
 8008db4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008dba:	887b      	ldrh	r3, [r7, #2]
 8008dbc:	2b41      	cmp	r3, #65	; 0x41
 8008dbe:	d00b      	beq.n	8008dd8 <pbuf_alloc+0x34>
 8008dc0:	2b41      	cmp	r3, #65	; 0x41
 8008dc2:	dc02      	bgt.n	8008dca <pbuf_alloc+0x26>
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d007      	beq.n	8008dd8 <pbuf_alloc+0x34>
 8008dc8:	e0c2      	b.n	8008f50 <pbuf_alloc+0x1ac>
 8008dca:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008dce:	d00b      	beq.n	8008de8 <pbuf_alloc+0x44>
 8008dd0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008dd4:	d070      	beq.n	8008eb8 <pbuf_alloc+0x114>
 8008dd6:	e0bb      	b.n	8008f50 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008dd8:	887a      	ldrh	r2, [r7, #2]
 8008dda:	88bb      	ldrh	r3, [r7, #4]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	2000      	movs	r0, #0
 8008de0:	f000 f8d2 	bl	8008f88 <pbuf_alloc_reference>
 8008de4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008de6:	e0bd      	b.n	8008f64 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008df0:	88bb      	ldrh	r3, [r7, #4]
 8008df2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008df4:	2008      	movs	r0, #8
 8008df6:	f7ff fbf7 	bl	80085e8 <memp_malloc>
 8008dfa:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d109      	bne.n	8008e16 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8008e02:	f7ff ff99 	bl	8008d38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8008e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e0e:	f000 faa9 	bl	8009364 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e0a7      	b.n	8008f66 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008e16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e18:	3303      	adds	r3, #3
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f023 0303 	bic.w	r3, r3, #3
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	8b7a      	ldrh	r2, [r7, #26]
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bf28      	it	cs
 8008e2e:	4613      	movcs	r3, r2
 8008e30:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008e32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e34:	3310      	adds	r3, #16
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	4413      	add	r3, r2
 8008e3a:	3303      	adds	r3, #3
 8008e3c:	f023 0303 	bic.w	r3, r3, #3
 8008e40:	4618      	mov	r0, r3
 8008e42:	89f9      	ldrh	r1, [r7, #14]
 8008e44:	8b7a      	ldrh	r2, [r7, #26]
 8008e46:	2300      	movs	r3, #0
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	887b      	ldrh	r3, [r7, #2]
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4601      	mov	r1, r0
 8008e52:	6938      	ldr	r0, [r7, #16]
 8008e54:	f7ff ff7c 	bl	8008d50 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f003 0303 	and.w	r3, r3, #3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d006      	beq.n	8008e72 <pbuf_alloc+0xce>
 8008e64:	4b42      	ldr	r3, [pc, #264]	; (8008f70 <pbuf_alloc+0x1cc>)
 8008e66:	f240 1201 	movw	r2, #257	; 0x101
 8008e6a:	4942      	ldr	r1, [pc, #264]	; (8008f74 <pbuf_alloc+0x1d0>)
 8008e6c:	4842      	ldr	r0, [pc, #264]	; (8008f78 <pbuf_alloc+0x1d4>)
 8008e6e:	f008 fc8b 	bl	8011788 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008e72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e74:	3303      	adds	r3, #3
 8008e76:	f023 0303 	bic.w	r3, r3, #3
 8008e7a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008e7e:	d106      	bne.n	8008e8e <pbuf_alloc+0xea>
 8008e80:	4b3b      	ldr	r3, [pc, #236]	; (8008f70 <pbuf_alloc+0x1cc>)
 8008e82:	f240 1203 	movw	r2, #259	; 0x103
 8008e86:	493d      	ldr	r1, [pc, #244]	; (8008f7c <pbuf_alloc+0x1d8>)
 8008e88:	483b      	ldr	r0, [pc, #236]	; (8008f78 <pbuf_alloc+0x1d4>)
 8008e8a:	f008 fc7d 	bl	8011788 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
 8008e98:	e002      	b.n	8008ea0 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008ea4:	8b7a      	ldrh	r2, [r7, #26]
 8008ea6:	89fb      	ldrh	r3, [r7, #14]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008eb0:	8b7b      	ldrh	r3, [r7, #26]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d19e      	bne.n	8008df4 <pbuf_alloc+0x50>
      break;
 8008eb6:	e055      	b.n	8008f64 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008eb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008eba:	3303      	adds	r3, #3
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	f023 0303 	bic.w	r3, r3, #3
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	88bb      	ldrh	r3, [r7, #4]
 8008ec6:	3303      	adds	r3, #3
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	f023 0303 	bic.w	r3, r3, #3
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	4413      	add	r3, r2
 8008ed2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008ed4:	8b3b      	ldrh	r3, [r7, #24]
 8008ed6:	3310      	adds	r3, #16
 8008ed8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008eda:	8b3a      	ldrh	r2, [r7, #24]
 8008edc:	88bb      	ldrh	r3, [r7, #4]
 8008ede:	3303      	adds	r3, #3
 8008ee0:	f023 0303 	bic.w	r3, r3, #3
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d306      	bcc.n	8008ef6 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008ee8:	8afa      	ldrh	r2, [r7, #22]
 8008eea:	88bb      	ldrh	r3, [r7, #4]
 8008eec:	3303      	adds	r3, #3
 8008eee:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d201      	bcs.n	8008efa <pbuf_alloc+0x156>
        return NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e035      	b.n	8008f66 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008efa:	8afb      	ldrh	r3, [r7, #22]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff f9e3 	bl	80082c8 <mem_malloc>
 8008f02:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <pbuf_alloc+0x16a>
        return NULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e02b      	b.n	8008f66 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f10:	3310      	adds	r3, #16
 8008f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f14:	4413      	add	r3, r2
 8008f16:	3303      	adds	r3, #3
 8008f18:	f023 0303 	bic.w	r3, r3, #3
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	88b9      	ldrh	r1, [r7, #4]
 8008f20:	88ba      	ldrh	r2, [r7, #4]
 8008f22:	2300      	movs	r3, #0
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	887b      	ldrh	r3, [r7, #2]
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4601      	mov	r1, r0
 8008f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f30:	f7ff ff0e 	bl	8008d50 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f003 0303 	and.w	r3, r3, #3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d010      	beq.n	8008f62 <pbuf_alloc+0x1be>
 8008f40:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <pbuf_alloc+0x1cc>)
 8008f42:	f240 1223 	movw	r2, #291	; 0x123
 8008f46:	490e      	ldr	r1, [pc, #56]	; (8008f80 <pbuf_alloc+0x1dc>)
 8008f48:	480b      	ldr	r0, [pc, #44]	; (8008f78 <pbuf_alloc+0x1d4>)
 8008f4a:	f008 fc1d 	bl	8011788 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008f4e:	e008      	b.n	8008f62 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <pbuf_alloc+0x1cc>)
 8008f52:	f240 1227 	movw	r2, #295	; 0x127
 8008f56:	490b      	ldr	r1, [pc, #44]	; (8008f84 <pbuf_alloc+0x1e0>)
 8008f58:	4807      	ldr	r0, [pc, #28]	; (8008f78 <pbuf_alloc+0x1d4>)
 8008f5a:	f008 fc15 	bl	8011788 <iprintf>
      return NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e001      	b.n	8008f66 <pbuf_alloc+0x1c2>
      break;
 8008f62:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3728      	adds	r7, #40	; 0x28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	08012bbc 	.word	0x08012bbc
 8008f74:	08012bec 	.word	0x08012bec
 8008f78:	08012c1c 	.word	0x08012c1c
 8008f7c:	08012c44 	.word	0x08012c44
 8008f80:	08012c78 	.word	0x08012c78
 8008f84:	08012ca4 	.word	0x08012ca4

08008f88 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af02      	add	r7, sp, #8
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	807b      	strh	r3, [r7, #2]
 8008f94:	4613      	mov	r3, r2
 8008f96:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008f98:	883b      	ldrh	r3, [r7, #0]
 8008f9a:	2b41      	cmp	r3, #65	; 0x41
 8008f9c:	d009      	beq.n	8008fb2 <pbuf_alloc_reference+0x2a>
 8008f9e:	883b      	ldrh	r3, [r7, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d006      	beq.n	8008fb2 <pbuf_alloc_reference+0x2a>
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <pbuf_alloc_reference+0x5c>)
 8008fa6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008faa:	490f      	ldr	r1, [pc, #60]	; (8008fe8 <pbuf_alloc_reference+0x60>)
 8008fac:	480f      	ldr	r0, [pc, #60]	; (8008fec <pbuf_alloc_reference+0x64>)
 8008fae:	f008 fbeb 	bl	8011788 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008fb2:	2007      	movs	r0, #7
 8008fb4:	f7ff fb18 	bl	80085e8 <memp_malloc>
 8008fb8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e00b      	b.n	8008fdc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008fc4:	8879      	ldrh	r1, [r7, #2]
 8008fc6:	887a      	ldrh	r2, [r7, #2]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	9301      	str	r3, [sp, #4]
 8008fcc:	883b      	ldrh	r3, [r7, #0]
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7ff febb 	bl	8008d50 <pbuf_init_alloced_pbuf>
  return p;
 8008fda:	68fb      	ldr	r3, [r7, #12]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	08012bbc 	.word	0x08012bbc
 8008fe8:	08012cc0 	.word	0x08012cc0
 8008fec:	08012c1c 	.word	0x08012c1c

08008ff0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	607b      	str	r3, [r7, #4]
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	81bb      	strh	r3, [r7, #12]
 8009000:	4613      	mov	r3, r2
 8009002:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009008:	8a7b      	ldrh	r3, [r7, #18]
 800900a:	3303      	adds	r3, #3
 800900c:	f023 0203 	bic.w	r2, r3, #3
 8009010:	89bb      	ldrh	r3, [r7, #12]
 8009012:	441a      	add	r2, r3
 8009014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009016:	429a      	cmp	r2, r3
 8009018:	d901      	bls.n	800901e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	e018      	b.n	8009050 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d007      	beq.n	8009034 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009024:	8a7b      	ldrh	r3, [r7, #18]
 8009026:	3303      	adds	r3, #3
 8009028:	f023 0303 	bic.w	r3, r3, #3
 800902c:	6a3a      	ldr	r2, [r7, #32]
 800902e:	4413      	add	r3, r2
 8009030:	617b      	str	r3, [r7, #20]
 8009032:	e001      	b.n	8009038 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	89b9      	ldrh	r1, [r7, #12]
 800903c:	89ba      	ldrh	r2, [r7, #12]
 800903e:	2302      	movs	r3, #2
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	897b      	ldrh	r3, [r7, #10]
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	460b      	mov	r3, r1
 8009048:	6979      	ldr	r1, [r7, #20]
 800904a:	f7ff fe81 	bl	8008d50 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800904e:	687b      	ldr	r3, [r7, #4]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d106      	bne.n	8009078 <pbuf_realloc+0x20>
 800906a:	4b3a      	ldr	r3, [pc, #232]	; (8009154 <pbuf_realloc+0xfc>)
 800906c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009070:	4939      	ldr	r1, [pc, #228]	; (8009158 <pbuf_realloc+0x100>)
 8009072:	483a      	ldr	r0, [pc, #232]	; (800915c <pbuf_realloc+0x104>)
 8009074:	f008 fb88 	bl	8011788 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	891b      	ldrh	r3, [r3, #8]
 800907c:	887a      	ldrh	r2, [r7, #2]
 800907e:	429a      	cmp	r2, r3
 8009080:	d264      	bcs.n	800914c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	891a      	ldrh	r2, [r3, #8]
 8009086:	887b      	ldrh	r3, [r7, #2]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800908c:	887b      	ldrh	r3, [r7, #2]
 800908e:	817b      	strh	r3, [r7, #10]
  q = p;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009094:	e018      	b.n	80090c8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	895b      	ldrh	r3, [r3, #10]
 800909a:	897a      	ldrh	r2, [r7, #10]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	891a      	ldrh	r2, [r3, #8]
 80090a4:	893b      	ldrh	r3, [r7, #8]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <pbuf_realloc+0x70>
 80090ba:	4b26      	ldr	r3, [pc, #152]	; (8009154 <pbuf_realloc+0xfc>)
 80090bc:	f240 12af 	movw	r2, #431	; 0x1af
 80090c0:	4927      	ldr	r1, [pc, #156]	; (8009160 <pbuf_realloc+0x108>)
 80090c2:	4826      	ldr	r0, [pc, #152]	; (800915c <pbuf_realloc+0x104>)
 80090c4:	f008 fb60 	bl	8011788 <iprintf>
  while (rem_len > q->len) {
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	895b      	ldrh	r3, [r3, #10]
 80090cc:	897a      	ldrh	r2, [r7, #10]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d8e1      	bhi.n	8009096 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	7b1b      	ldrb	r3, [r3, #12]
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d122      	bne.n	8009124 <pbuf_realloc+0xcc>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	895b      	ldrh	r3, [r3, #10]
 80090e2:	897a      	ldrh	r2, [r7, #10]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d01d      	beq.n	8009124 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	7b5b      	ldrb	r3, [r3, #13]
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d117      	bne.n	8009124 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	461a      	mov	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	b29a      	uxth	r2, r3
 8009100:	897b      	ldrh	r3, [r7, #10]
 8009102:	4413      	add	r3, r2
 8009104:	b29b      	uxth	r3, r3
 8009106:	4619      	mov	r1, r3
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7fe ffe1 	bl	80080d0 <mem_trim>
 800910e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d106      	bne.n	8009124 <pbuf_realloc+0xcc>
 8009116:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <pbuf_realloc+0xfc>)
 8009118:	f240 12bd 	movw	r2, #445	; 0x1bd
 800911c:	4911      	ldr	r1, [pc, #68]	; (8009164 <pbuf_realloc+0x10c>)
 800911e:	480f      	ldr	r0, [pc, #60]	; (800915c <pbuf_realloc+0x104>)
 8009120:	f008 fb32 	bl	8011788 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	897a      	ldrh	r2, [r7, #10]
 8009128:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	895a      	ldrh	r2, [r3, #10]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d004      	beq.n	8009144 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 f910 	bl	8009364 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	e000      	b.n	800914e <pbuf_realloc+0xf6>
    return;
 800914c:	bf00      	nop

}
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	08012bbc 	.word	0x08012bbc
 8009158:	08012cd4 	.word	0x08012cd4
 800915c:	08012c1c 	.word	0x08012c1c
 8009160:	08012cec 	.word	0x08012cec
 8009164:	08012d04 	.word	0x08012d04

08009168 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d106      	bne.n	800918a <pbuf_add_header_impl+0x22>
 800917c:	4b2b      	ldr	r3, [pc, #172]	; (800922c <pbuf_add_header_impl+0xc4>)
 800917e:	f240 12df 	movw	r2, #479	; 0x1df
 8009182:	492b      	ldr	r1, [pc, #172]	; (8009230 <pbuf_add_header_impl+0xc8>)
 8009184:	482b      	ldr	r0, [pc, #172]	; (8009234 <pbuf_add_header_impl+0xcc>)
 8009186:	f008 faff 	bl	8011788 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <pbuf_add_header_impl+0x30>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009196:	d301      	bcc.n	800919c <pbuf_add_header_impl+0x34>
    return 1;
 8009198:	2301      	movs	r3, #1
 800919a:	e043      	b.n	8009224 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <pbuf_add_header_impl+0x3e>
    return 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	e03e      	b.n	8009224 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	891a      	ldrh	r2, [r3, #8]
 80091ae:	8a7b      	ldrh	r3, [r7, #18]
 80091b0:	4413      	add	r3, r2
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	8a7a      	ldrh	r2, [r7, #18]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d901      	bls.n	80091be <pbuf_add_header_impl+0x56>
    return 1;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e032      	b.n	8009224 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	7b1b      	ldrb	r3, [r3, #12]
 80091c2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80091c4:	8a3b      	ldrh	r3, [r7, #16]
 80091c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00c      	beq.n	80091e8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	425b      	negs	r3, r3
 80091d6:	4413      	add	r3, r2
 80091d8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3310      	adds	r3, #16
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d20d      	bcs.n	8009200 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e01d      	b.n	8009224 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d006      	beq.n	80091fc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	425b      	negs	r3, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e001      	b.n	8009200 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e011      	b.n	8009224 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	895a      	ldrh	r2, [r3, #10]
 800920a:	8a7b      	ldrh	r3, [r7, #18]
 800920c:	4413      	add	r3, r2
 800920e:	b29a      	uxth	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	891a      	ldrh	r2, [r3, #8]
 8009218:	8a7b      	ldrh	r3, [r7, #18]
 800921a:	4413      	add	r3, r2
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	811a      	strh	r2, [r3, #8]


  return 0;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	08012bbc 	.word	0x08012bbc
 8009230:	08012d20 	.word	0x08012d20
 8009234:	08012c1c 	.word	0x08012c1c

08009238 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009242:	2200      	movs	r2, #0
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff ff8e 	bl	8009168 <pbuf_add_header_impl>
 800924c:	4603      	mov	r3, r0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d106      	bne.n	8009276 <pbuf_remove_header+0x1e>
 8009268:	4b20      	ldr	r3, [pc, #128]	; (80092ec <pbuf_remove_header+0x94>)
 800926a:	f240 224b 	movw	r2, #587	; 0x24b
 800926e:	4920      	ldr	r1, [pc, #128]	; (80092f0 <pbuf_remove_header+0x98>)
 8009270:	4820      	ldr	r0, [pc, #128]	; (80092f4 <pbuf_remove_header+0x9c>)
 8009272:	f008 fa89 	bl	8011788 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <pbuf_remove_header+0x2c>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009282:	d301      	bcc.n	8009288 <pbuf_remove_header+0x30>
    return 1;
 8009284:	2301      	movs	r3, #1
 8009286:	e02c      	b.n	80092e2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <pbuf_remove_header+0x3a>
    return 0;
 800928e:	2300      	movs	r3, #0
 8009290:	e027      	b.n	80092e2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	895b      	ldrh	r3, [r3, #10]
 800929a:	89fa      	ldrh	r2, [r7, #14]
 800929c:	429a      	cmp	r2, r3
 800929e:	d908      	bls.n	80092b2 <pbuf_remove_header+0x5a>
 80092a0:	4b12      	ldr	r3, [pc, #72]	; (80092ec <pbuf_remove_header+0x94>)
 80092a2:	f240 2255 	movw	r2, #597	; 0x255
 80092a6:	4914      	ldr	r1, [pc, #80]	; (80092f8 <pbuf_remove_header+0xa0>)
 80092a8:	4812      	ldr	r0, [pc, #72]	; (80092f4 <pbuf_remove_header+0x9c>)
 80092aa:	f008 fa6d 	bl	8011788 <iprintf>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e017      	b.n	80092e2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	441a      	add	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	895a      	ldrh	r2, [r3, #10]
 80092c8:	89fb      	ldrh	r3, [r7, #14]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	891a      	ldrh	r2, [r3, #8]
 80092d6:	89fb      	ldrh	r3, [r7, #14]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	b29a      	uxth	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	08012bbc 	.word	0x08012bbc
 80092f0:	08012d20 	.word	0x08012d20
 80092f4:	08012c1c 	.word	0x08012c1c
 80092f8:	08012d2c 	.word	0x08012d2c

080092fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	807b      	strh	r3, [r7, #2]
 8009308:	4613      	mov	r3, r2
 800930a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800930c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009310:	2b00      	cmp	r3, #0
 8009312:	da08      	bge.n	8009326 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009314:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009318:	425b      	negs	r3, r3
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7ff ff9b 	bl	8009258 <pbuf_remove_header>
 8009322:	4603      	mov	r3, r0
 8009324:	e007      	b.n	8009336 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009326:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800932a:	787a      	ldrb	r2, [r7, #1]
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7ff ff1a 	bl	8009168 <pbuf_add_header_impl>
 8009334:	4603      	mov	r3, r0
  }
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b082      	sub	sp, #8
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	460b      	mov	r3, r1
 8009348:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800934a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800934e:	2201      	movs	r2, #1
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff ffd2 	bl	80092fc <pbuf_header_impl>
 8009358:	4603      	mov	r3, r0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10b      	bne.n	800938a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d106      	bne.n	8009386 <pbuf_free+0x22>
 8009378:	4b38      	ldr	r3, [pc, #224]	; (800945c <pbuf_free+0xf8>)
 800937a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800937e:	4938      	ldr	r1, [pc, #224]	; (8009460 <pbuf_free+0xfc>)
 8009380:	4838      	ldr	r0, [pc, #224]	; (8009464 <pbuf_free+0x100>)
 8009382:	f008 fa01 	bl	8011788 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009386:	2300      	movs	r3, #0
 8009388:	e063      	b.n	8009452 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800938e:	e05c      	b.n	800944a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	7b9b      	ldrb	r3, [r3, #14]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <pbuf_free+0x42>
 8009398:	4b30      	ldr	r3, [pc, #192]	; (800945c <pbuf_free+0xf8>)
 800939a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800939e:	4932      	ldr	r1, [pc, #200]	; (8009468 <pbuf_free+0x104>)
 80093a0:	4830      	ldr	r0, [pc, #192]	; (8009464 <pbuf_free+0x100>)
 80093a2:	f008 f9f1 	bl	8011788 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	7b9b      	ldrb	r3, [r3, #14]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	739a      	strb	r2, [r3, #14]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7b9b      	ldrb	r3, [r3, #14]
 80093b6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80093b8:	7dbb      	ldrb	r3, [r7, #22]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d143      	bne.n	8009446 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	7b1b      	ldrb	r3, [r3, #12]
 80093c8:	f003 030f 	and.w	r3, r3, #15
 80093cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7b5b      	ldrb	r3, [r3, #13]
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d011      	beq.n	80093fe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <pbuf_free+0x90>
 80093e6:	4b1d      	ldr	r3, [pc, #116]	; (800945c <pbuf_free+0xf8>)
 80093e8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80093ec:	491f      	ldr	r1, [pc, #124]	; (800946c <pbuf_free+0x108>)
 80093ee:	481d      	ldr	r0, [pc, #116]	; (8009464 <pbuf_free+0x100>)
 80093f0:	f008 f9ca 	bl	8011788 <iprintf>
        pc->custom_free_function(p);
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	4798      	blx	r3
 80093fc:	e01d      	b.n	800943a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	2b02      	cmp	r3, #2
 8009402:	d104      	bne.n	800940e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	2008      	movs	r0, #8
 8009408:	f7ff f95e 	bl	80086c8 <memp_free>
 800940c:	e015      	b.n	800943a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d104      	bne.n	800941e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	2007      	movs	r0, #7
 8009418:	f7ff f956 	bl	80086c8 <memp_free>
 800941c:	e00d      	b.n	800943a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d103      	bne.n	800942c <pbuf_free+0xc8>
          mem_free(p);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7fe fde9 	bl	8007ffc <mem_free>
 800942a:	e006      	b.n	800943a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800942c:	4b0b      	ldr	r3, [pc, #44]	; (800945c <pbuf_free+0xf8>)
 800942e:	f240 320f 	movw	r2, #783	; 0x30f
 8009432:	490f      	ldr	r1, [pc, #60]	; (8009470 <pbuf_free+0x10c>)
 8009434:	480b      	ldr	r0, [pc, #44]	; (8009464 <pbuf_free+0x100>)
 8009436:	f008 f9a7 	bl	8011788 <iprintf>
        }
      }
      count++;
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	3301      	adds	r3, #1
 800943e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	607b      	str	r3, [r7, #4]
 8009444:	e001      	b.n	800944a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d19f      	bne.n	8009390 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	08012bbc 	.word	0x08012bbc
 8009460:	08012d20 	.word	0x08012d20
 8009464:	08012c1c 	.word	0x08012c1c
 8009468:	08012d4c 	.word	0x08012d4c
 800946c:	08012d64 	.word	0x08012d64
 8009470:	08012d88 	.word	0x08012d88

08009474 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009480:	e005      	b.n	800948e <pbuf_clen+0x1a>
    ++len;
 8009482:	89fb      	ldrh	r3, [r7, #14]
 8009484:	3301      	adds	r3, #1
 8009486:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1f6      	bne.n	8009482 <pbuf_clen+0xe>
  }
  return len;
 8009494:	89fb      	ldrh	r3, [r7, #14]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
	...

080094a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d010      	beq.n	80094d4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	7b9b      	ldrb	r3, [r3, #14]
 80094b6:	3301      	adds	r3, #1
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7b9b      	ldrb	r3, [r3, #14]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <pbuf_ref+0x30>
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <pbuf_ref+0x38>)
 80094c8:	f240 3242 	movw	r2, #834	; 0x342
 80094cc:	4904      	ldr	r1, [pc, #16]	; (80094e0 <pbuf_ref+0x3c>)
 80094ce:	4805      	ldr	r0, [pc, #20]	; (80094e4 <pbuf_ref+0x40>)
 80094d0:	f008 f95a 	bl	8011788 <iprintf>
  }
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	08012bbc 	.word	0x08012bbc
 80094e0:	08012d9c 	.word	0x08012d9c
 80094e4:	08012c1c 	.word	0x08012c1c

080094e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <pbuf_cat+0x16>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d107      	bne.n	800950e <pbuf_cat+0x26>
 80094fe:	4b20      	ldr	r3, [pc, #128]	; (8009580 <pbuf_cat+0x98>)
 8009500:	f240 325a 	movw	r2, #858	; 0x35a
 8009504:	491f      	ldr	r1, [pc, #124]	; (8009584 <pbuf_cat+0x9c>)
 8009506:	4820      	ldr	r0, [pc, #128]	; (8009588 <pbuf_cat+0xa0>)
 8009508:	f008 f93e 	bl	8011788 <iprintf>
 800950c:	e034      	b.n	8009578 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	e00a      	b.n	800952a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	891a      	ldrh	r2, [r3, #8]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	891b      	ldrh	r3, [r3, #8]
 800951c:	4413      	add	r3, r2
 800951e:	b29a      	uxth	r2, r3
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f0      	bne.n	8009514 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	891a      	ldrh	r2, [r3, #8]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	895b      	ldrh	r3, [r3, #10]
 800953a:	429a      	cmp	r2, r3
 800953c:	d006      	beq.n	800954c <pbuf_cat+0x64>
 800953e:	4b10      	ldr	r3, [pc, #64]	; (8009580 <pbuf_cat+0x98>)
 8009540:	f240 3262 	movw	r2, #866	; 0x362
 8009544:	4911      	ldr	r1, [pc, #68]	; (800958c <pbuf_cat+0xa4>)
 8009546:	4810      	ldr	r0, [pc, #64]	; (8009588 <pbuf_cat+0xa0>)
 8009548:	f008 f91e 	bl	8011788 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d006      	beq.n	8009562 <pbuf_cat+0x7a>
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <pbuf_cat+0x98>)
 8009556:	f240 3263 	movw	r2, #867	; 0x363
 800955a:	490d      	ldr	r1, [pc, #52]	; (8009590 <pbuf_cat+0xa8>)
 800955c:	480a      	ldr	r0, [pc, #40]	; (8009588 <pbuf_cat+0xa0>)
 800955e:	f008 f913 	bl	8011788 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	891a      	ldrh	r2, [r3, #8]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	891b      	ldrh	r3, [r3, #8]
 800956a:	4413      	add	r3, r2
 800956c:	b29a      	uxth	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	08012bbc 	.word	0x08012bbc
 8009584:	08012db0 	.word	0x08012db0
 8009588:	08012c1c 	.word	0x08012c1c
 800958c:	08012de8 	.word	0x08012de8
 8009590:	08012e18 	.word	0x08012e18

08009594 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800959e:	2300      	movs	r3, #0
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	2300      	movs	r3, #0
 80095a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d008      	beq.n	80095be <pbuf_copy+0x2a>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <pbuf_copy+0x2a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	891a      	ldrh	r2, [r3, #8]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	891b      	ldrh	r3, [r3, #8]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d209      	bcs.n	80095d2 <pbuf_copy+0x3e>
 80095be:	4b57      	ldr	r3, [pc, #348]	; (800971c <pbuf_copy+0x188>)
 80095c0:	f240 32ca 	movw	r2, #970	; 0x3ca
 80095c4:	4956      	ldr	r1, [pc, #344]	; (8009720 <pbuf_copy+0x18c>)
 80095c6:	4857      	ldr	r0, [pc, #348]	; (8009724 <pbuf_copy+0x190>)
 80095c8:	f008 f8de 	bl	8011788 <iprintf>
 80095cc:	f06f 030f 	mvn.w	r3, #15
 80095d0:	e09f      	b.n	8009712 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	895b      	ldrh	r3, [r3, #10]
 80095d6:	461a      	mov	r2, r3
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	895b      	ldrh	r3, [r3, #10]
 80095e0:	4619      	mov	r1, r3
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	1acb      	subs	r3, r1, r3
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d306      	bcc.n	80095f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	895b      	ldrh	r3, [r3, #10]
 80095ee:	461a      	mov	r2, r3
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	e005      	b.n	8009604 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	895b      	ldrh	r3, [r3, #10]
 80095fc:	461a      	mov	r2, r3
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	18d0      	adds	r0, r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	4413      	add	r3, r2
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4619      	mov	r1, r3
 8009618:	f008 f8a3 	bl	8011762 <memcpy>
    offset_to += len;
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4413      	add	r3, r2
 8009622:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	895b      	ldrh	r3, [r3, #10]
 8009630:	461a      	mov	r2, r3
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	4293      	cmp	r3, r2
 8009636:	d906      	bls.n	8009646 <pbuf_copy+0xb2>
 8009638:	4b38      	ldr	r3, [pc, #224]	; (800971c <pbuf_copy+0x188>)
 800963a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800963e:	493a      	ldr	r1, [pc, #232]	; (8009728 <pbuf_copy+0x194>)
 8009640:	4838      	ldr	r0, [pc, #224]	; (8009724 <pbuf_copy+0x190>)
 8009642:	f008 f8a1 	bl	8011788 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	895b      	ldrh	r3, [r3, #10]
 800964a:	461a      	mov	r2, r3
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	4293      	cmp	r3, r2
 8009650:	d906      	bls.n	8009660 <pbuf_copy+0xcc>
 8009652:	4b32      	ldr	r3, [pc, #200]	; (800971c <pbuf_copy+0x188>)
 8009654:	f240 32da 	movw	r2, #986	; 0x3da
 8009658:	4934      	ldr	r1, [pc, #208]	; (800972c <pbuf_copy+0x198>)
 800965a:	4832      	ldr	r0, [pc, #200]	; (8009724 <pbuf_copy+0x190>)
 800965c:	f008 f894 	bl	8011788 <iprintf>
    if (offset_from >= p_from->len) {
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	895b      	ldrh	r3, [r3, #10]
 8009664:	461a      	mov	r2, r3
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	4293      	cmp	r3, r2
 800966a:	d304      	bcc.n	8009676 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	895b      	ldrh	r3, [r3, #10]
 800967a:	461a      	mov	r2, r3
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	4293      	cmp	r3, r2
 8009680:	d114      	bne.n	80096ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10c      	bne.n	80096ac <pbuf_copy+0x118>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d009      	beq.n	80096ac <pbuf_copy+0x118>
 8009698:	4b20      	ldr	r3, [pc, #128]	; (800971c <pbuf_copy+0x188>)
 800969a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800969e:	4924      	ldr	r1, [pc, #144]	; (8009730 <pbuf_copy+0x19c>)
 80096a0:	4820      	ldr	r0, [pc, #128]	; (8009724 <pbuf_copy+0x190>)
 80096a2:	f008 f871 	bl	8011788 <iprintf>
 80096a6:	f06f 030f 	mvn.w	r3, #15
 80096aa:	e032      	b.n	8009712 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d013      	beq.n	80096da <pbuf_copy+0x146>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	895a      	ldrh	r2, [r3, #10]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	891b      	ldrh	r3, [r3, #8]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d10d      	bne.n	80096da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d009      	beq.n	80096da <pbuf_copy+0x146>
 80096c6:	4b15      	ldr	r3, [pc, #84]	; (800971c <pbuf_copy+0x188>)
 80096c8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80096cc:	4919      	ldr	r1, [pc, #100]	; (8009734 <pbuf_copy+0x1a0>)
 80096ce:	4815      	ldr	r0, [pc, #84]	; (8009724 <pbuf_copy+0x190>)
 80096d0:	f008 f85a 	bl	8011788 <iprintf>
 80096d4:	f06f 0305 	mvn.w	r3, #5
 80096d8:	e01b      	b.n	8009712 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d013      	beq.n	8009708 <pbuf_copy+0x174>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	895a      	ldrh	r2, [r3, #10]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	891b      	ldrh	r3, [r3, #8]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d10d      	bne.n	8009708 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d009      	beq.n	8009708 <pbuf_copy+0x174>
 80096f4:	4b09      	ldr	r3, [pc, #36]	; (800971c <pbuf_copy+0x188>)
 80096f6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80096fa:	490e      	ldr	r1, [pc, #56]	; (8009734 <pbuf_copy+0x1a0>)
 80096fc:	4809      	ldr	r0, [pc, #36]	; (8009724 <pbuf_copy+0x190>)
 80096fe:	f008 f843 	bl	8011788 <iprintf>
 8009702:	f06f 0305 	mvn.w	r3, #5
 8009706:	e004      	b.n	8009712 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f47f af61 	bne.w	80095d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	08012bbc 	.word	0x08012bbc
 8009720:	08012e64 	.word	0x08012e64
 8009724:	08012c1c 	.word	0x08012c1c
 8009728:	08012e94 	.word	0x08012e94
 800972c:	08012eac 	.word	0x08012eac
 8009730:	08012ec8 	.word	0x08012ec8
 8009734:	08012ed8 	.word	0x08012ed8

08009738 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	4611      	mov	r1, r2
 8009744:	461a      	mov	r2, r3
 8009746:	460b      	mov	r3, r1
 8009748:	80fb      	strh	r3, [r7, #6]
 800974a:	4613      	mov	r3, r2
 800974c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d108      	bne.n	800976e <pbuf_copy_partial+0x36>
 800975c:	4b2b      	ldr	r3, [pc, #172]	; (800980c <pbuf_copy_partial+0xd4>)
 800975e:	f240 420a 	movw	r2, #1034	; 0x40a
 8009762:	492b      	ldr	r1, [pc, #172]	; (8009810 <pbuf_copy_partial+0xd8>)
 8009764:	482b      	ldr	r0, [pc, #172]	; (8009814 <pbuf_copy_partial+0xdc>)
 8009766:	f008 f80f 	bl	8011788 <iprintf>
 800976a:	2300      	movs	r3, #0
 800976c:	e04a      	b.n	8009804 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d108      	bne.n	8009786 <pbuf_copy_partial+0x4e>
 8009774:	4b25      	ldr	r3, [pc, #148]	; (800980c <pbuf_copy_partial+0xd4>)
 8009776:	f240 420b 	movw	r2, #1035	; 0x40b
 800977a:	4927      	ldr	r1, [pc, #156]	; (8009818 <pbuf_copy_partial+0xe0>)
 800977c:	4825      	ldr	r0, [pc, #148]	; (8009814 <pbuf_copy_partial+0xdc>)
 800977e:	f008 f803 	bl	8011788 <iprintf>
 8009782:	2300      	movs	r3, #0
 8009784:	e03e      	b.n	8009804 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	61fb      	str	r3, [r7, #28]
 800978a:	e034      	b.n	80097f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800978c:	88bb      	ldrh	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <pbuf_copy_partial+0x70>
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	895b      	ldrh	r3, [r3, #10]
 8009796:	88ba      	ldrh	r2, [r7, #4]
 8009798:	429a      	cmp	r2, r3
 800979a:	d305      	bcc.n	80097a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	895b      	ldrh	r3, [r3, #10]
 80097a0:	88ba      	ldrh	r2, [r7, #4]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	80bb      	strh	r3, [r7, #4]
 80097a6:	e023      	b.n	80097f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	895a      	ldrh	r2, [r3, #10]
 80097ac:	88bb      	ldrh	r3, [r7, #4]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80097b2:	8b3a      	ldrh	r2, [r7, #24]
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d901      	bls.n	80097be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80097ba:	88fb      	ldrh	r3, [r7, #6]
 80097bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80097be:	8b7b      	ldrh	r3, [r7, #26]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	18d0      	adds	r0, r2, r3
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	88bb      	ldrh	r3, [r7, #4]
 80097ca:	4413      	add	r3, r2
 80097cc:	8b3a      	ldrh	r2, [r7, #24]
 80097ce:	4619      	mov	r1, r3
 80097d0:	f007 ffc7 	bl	8011762 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80097d4:	8afa      	ldrh	r2, [r7, #22]
 80097d6:	8b3b      	ldrh	r3, [r7, #24]
 80097d8:	4413      	add	r3, r2
 80097da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80097dc:	8b7a      	ldrh	r2, [r7, #26]
 80097de:	8b3b      	ldrh	r3, [r7, #24]
 80097e0:	4413      	add	r3, r2
 80097e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80097e4:	88fa      	ldrh	r2, [r7, #6]
 80097e6:	8b3b      	ldrh	r3, [r7, #24]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	61fb      	str	r3, [r7, #28]
 80097f6:	88fb      	ldrh	r3, [r7, #6]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <pbuf_copy_partial+0xca>
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1c4      	bne.n	800978c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009802:	8afb      	ldrh	r3, [r7, #22]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3720      	adds	r7, #32
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	08012bbc 	.word	0x08012bbc
 8009810:	08012f04 	.word	0x08012f04
 8009814:	08012c1c 	.word	0x08012c1c
 8009818:	08012f24 	.word	0x08012f24

0800981c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	603a      	str	r2, [r7, #0]
 8009826:	71fb      	strb	r3, [r7, #7]
 8009828:	460b      	mov	r3, r1
 800982a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	8919      	ldrh	r1, [r3, #8]
 8009830:	88ba      	ldrh	r2, [r7, #4]
 8009832:	79fb      	ldrb	r3, [r7, #7]
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff fab5 	bl	8008da4 <pbuf_alloc>
 800983a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <pbuf_clone+0x2a>
    return NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	e011      	b.n	800986a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f7ff fea3 	bl	8009594 <pbuf_copy>
 800984e:	4603      	mov	r3, r0
 8009850:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009852:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d006      	beq.n	8009868 <pbuf_clone+0x4c>
 800985a:	4b06      	ldr	r3, [pc, #24]	; (8009874 <pbuf_clone+0x58>)
 800985c:	f240 5224 	movw	r2, #1316	; 0x524
 8009860:	4905      	ldr	r1, [pc, #20]	; (8009878 <pbuf_clone+0x5c>)
 8009862:	4806      	ldr	r0, [pc, #24]	; (800987c <pbuf_clone+0x60>)
 8009864:	f007 ff90 	bl	8011788 <iprintf>
  return q;
 8009868:	68fb      	ldr	r3, [r7, #12]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	08012bbc 	.word	0x08012bbc
 8009878:	08013030 	.word	0x08013030
 800987c:	08012c1c 	.word	0x08012c1c

08009880 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009884:	f007 ff98 	bl	80117b8 <rand>
 8009888:	4603      	mov	r3, r0
 800988a:	b29b      	uxth	r3, r3
 800988c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009890:	b29b      	uxth	r3, r3
 8009892:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009896:	b29a      	uxth	r2, r3
 8009898:	4b01      	ldr	r3, [pc, #4]	; (80098a0 <tcp_init+0x20>)
 800989a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800989c:	bf00      	nop
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	24000024 	.word	0x24000024

080098a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	7d1b      	ldrb	r3, [r3, #20]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d105      	bne.n	80098c0 <tcp_free+0x1c>
 80098b4:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <tcp_free+0x2c>)
 80098b6:	22d4      	movs	r2, #212	; 0xd4
 80098b8:	4906      	ldr	r1, [pc, #24]	; (80098d4 <tcp_free+0x30>)
 80098ba:	4807      	ldr	r0, [pc, #28]	; (80098d8 <tcp_free+0x34>)
 80098bc:	f007 ff64 	bl	8011788 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	2001      	movs	r0, #1
 80098c4:	f7fe ff00 	bl	80086c8 <memp_free>
}
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	080130bc 	.word	0x080130bc
 80098d4:	080130ec 	.word	0x080130ec
 80098d8:	08013100 	.word	0x08013100

080098dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	7d1b      	ldrb	r3, [r3, #20]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d105      	bne.n	80098f8 <tcp_free_listen+0x1c>
 80098ec:	4b06      	ldr	r3, [pc, #24]	; (8009908 <tcp_free_listen+0x2c>)
 80098ee:	22df      	movs	r2, #223	; 0xdf
 80098f0:	4906      	ldr	r1, [pc, #24]	; (800990c <tcp_free_listen+0x30>)
 80098f2:	4807      	ldr	r0, [pc, #28]	; (8009910 <tcp_free_listen+0x34>)
 80098f4:	f007 ff48 	bl	8011788 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	2002      	movs	r0, #2
 80098fc:	f7fe fee4 	bl	80086c8 <memp_free>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	080130bc 	.word	0x080130bc
 800990c:	08013128 	.word	0x08013128
 8009910:	08013100 	.word	0x08013100

08009914 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009918:	f000 fe98 	bl	800a64c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800991c:	4b07      	ldr	r3, [pc, #28]	; (800993c <tcp_tmr+0x28>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	3301      	adds	r3, #1
 8009922:	b2da      	uxtb	r2, r3
 8009924:	4b05      	ldr	r3, [pc, #20]	; (800993c <tcp_tmr+0x28>)
 8009926:	701a      	strb	r2, [r3, #0]
 8009928:	4b04      	ldr	r3, [pc, #16]	; (800993c <tcp_tmr+0x28>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009934:	f000 fb4c 	bl	8009fd0 <tcp_slowtmr>
  }
}
 8009938:	bf00      	nop
 800993a:	bd80      	pop	{r7, pc}
 800993c:	24001979 	.word	0x24001979

08009940 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d105      	bne.n	800995c <tcp_remove_listener+0x1c>
 8009950:	4b0d      	ldr	r3, [pc, #52]	; (8009988 <tcp_remove_listener+0x48>)
 8009952:	22ff      	movs	r2, #255	; 0xff
 8009954:	490d      	ldr	r1, [pc, #52]	; (800998c <tcp_remove_listener+0x4c>)
 8009956:	480e      	ldr	r0, [pc, #56]	; (8009990 <tcp_remove_listener+0x50>)
 8009958:	f007 ff16 	bl	8011788 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	e00a      	b.n	8009978 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d102      	bne.n	8009972 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f1      	bne.n	8009962 <tcp_remove_listener+0x22>
    }
  }
}
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	080130bc 	.word	0x080130bc
 800998c:	08013144 	.word	0x08013144
 8009990:	08013100 	.word	0x08013100

08009994 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d106      	bne.n	80099b0 <tcp_listen_closed+0x1c>
 80099a2:	4b14      	ldr	r3, [pc, #80]	; (80099f4 <tcp_listen_closed+0x60>)
 80099a4:	f240 1211 	movw	r2, #273	; 0x111
 80099a8:	4913      	ldr	r1, [pc, #76]	; (80099f8 <tcp_listen_closed+0x64>)
 80099aa:	4814      	ldr	r0, [pc, #80]	; (80099fc <tcp_listen_closed+0x68>)
 80099ac:	f007 feec 	bl	8011788 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	7d1b      	ldrb	r3, [r3, #20]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d006      	beq.n	80099c6 <tcp_listen_closed+0x32>
 80099b8:	4b0e      	ldr	r3, [pc, #56]	; (80099f4 <tcp_listen_closed+0x60>)
 80099ba:	f44f 7289 	mov.w	r2, #274	; 0x112
 80099be:	4910      	ldr	r1, [pc, #64]	; (8009a00 <tcp_listen_closed+0x6c>)
 80099c0:	480e      	ldr	r0, [pc, #56]	; (80099fc <tcp_listen_closed+0x68>)
 80099c2:	f007 fee1 	bl	8011788 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80099c6:	2301      	movs	r3, #1
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	e00b      	b.n	80099e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80099cc:	4a0d      	ldr	r2, [pc, #52]	; (8009a04 <tcp_listen_closed+0x70>)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff ffb1 	bl	8009940 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3301      	adds	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d9f0      	bls.n	80099cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80099ea:	bf00      	nop
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	080130bc 	.word	0x080130bc
 80099f8:	0801316c 	.word	0x0801316c
 80099fc:	08013100 	.word	0x08013100
 8009a00:	08013178 	.word	0x08013178
 8009a04:	080150ac 	.word	0x080150ac

08009a08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009a08:	b5b0      	push	{r4, r5, r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af04      	add	r7, sp, #16
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <tcp_close_shutdown+0x20>
 8009a1a:	4b61      	ldr	r3, [pc, #388]	; (8009ba0 <tcp_close_shutdown+0x198>)
 8009a1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009a20:	4960      	ldr	r1, [pc, #384]	; (8009ba4 <tcp_close_shutdown+0x19c>)
 8009a22:	4861      	ldr	r0, [pc, #388]	; (8009ba8 <tcp_close_shutdown+0x1a0>)
 8009a24:	f007 feb0 	bl	8011788 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d066      	beq.n	8009afc <tcp_close_shutdown+0xf4>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	7d1b      	ldrb	r3, [r3, #20]
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	d003      	beq.n	8009a3e <tcp_close_shutdown+0x36>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	7d1b      	ldrb	r3, [r3, #20]
 8009a3a:	2b07      	cmp	r3, #7
 8009a3c:	d15e      	bne.n	8009afc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d104      	bne.n	8009a50 <tcp_close_shutdown+0x48>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a4e:	d055      	beq.n	8009afc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	8b5b      	ldrh	r3, [r3, #26]
 8009a54:	f003 0310 	and.w	r3, r3, #16
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d106      	bne.n	8009a6a <tcp_close_shutdown+0x62>
 8009a5c:	4b50      	ldr	r3, [pc, #320]	; (8009ba0 <tcp_close_shutdown+0x198>)
 8009a5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009a62:	4952      	ldr	r1, [pc, #328]	; (8009bac <tcp_close_shutdown+0x1a4>)
 8009a64:	4850      	ldr	r0, [pc, #320]	; (8009ba8 <tcp_close_shutdown+0x1a0>)
 8009a66:	f007 fe8f 	bl	8011788 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009a72:	687d      	ldr	r5, [r7, #4]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3304      	adds	r3, #4
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	8ad2      	ldrh	r2, [r2, #22]
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	8b09      	ldrh	r1, [r1, #24]
 8009a80:	9102      	str	r1, [sp, #8]
 8009a82:	9201      	str	r2, [sp, #4]
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	462b      	mov	r3, r5
 8009a88:	4622      	mov	r2, r4
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f004 fe91 	bl	800e7b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f001 f8ba 	bl	800ac0c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009a98:	4b45      	ldr	r3, [pc, #276]	; (8009bb0 <tcp_close_shutdown+0x1a8>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d105      	bne.n	8009aae <tcp_close_shutdown+0xa6>
 8009aa2:	4b43      	ldr	r3, [pc, #268]	; (8009bb0 <tcp_close_shutdown+0x1a8>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	4a41      	ldr	r2, [pc, #260]	; (8009bb0 <tcp_close_shutdown+0x1a8>)
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	e013      	b.n	8009ad6 <tcp_close_shutdown+0xce>
 8009aae:	4b40      	ldr	r3, [pc, #256]	; (8009bb0 <tcp_close_shutdown+0x1a8>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	e00c      	b.n	8009ad0 <tcp_close_shutdown+0xc8>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d104      	bne.n	8009aca <tcp_close_shutdown+0xc2>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	60da      	str	r2, [r3, #12]
 8009ac8:	e005      	b.n	8009ad6 <tcp_close_shutdown+0xce>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1ef      	bne.n	8009ab6 <tcp_close_shutdown+0xae>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	60da      	str	r2, [r3, #12]
 8009adc:	4b35      	ldr	r3, [pc, #212]	; (8009bb4 <tcp_close_shutdown+0x1ac>)
 8009ade:	2201      	movs	r2, #1
 8009ae0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009ae2:	4b35      	ldr	r3, [pc, #212]	; (8009bb8 <tcp_close_shutdown+0x1b0>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d102      	bne.n	8009af2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009aec:	f003 fd4c 	bl	800d588 <tcp_trigger_input_pcb_close>
 8009af0:	e002      	b.n	8009af8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7ff fed6 	bl	80098a4 <tcp_free>
      }
      return ERR_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	e04d      	b.n	8009b98 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	7d1b      	ldrb	r3, [r3, #20]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d02d      	beq.n	8009b60 <tcp_close_shutdown+0x158>
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d036      	beq.n	8009b76 <tcp_close_shutdown+0x16e>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d13f      	bne.n	8009b8c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	8adb      	ldrh	r3, [r3, #22]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d021      	beq.n	8009b58 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b14:	4b29      	ldr	r3, [pc, #164]	; (8009bbc <tcp_close_shutdown+0x1b4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d105      	bne.n	8009b2a <tcp_close_shutdown+0x122>
 8009b1e:	4b27      	ldr	r3, [pc, #156]	; (8009bbc <tcp_close_shutdown+0x1b4>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	4a25      	ldr	r2, [pc, #148]	; (8009bbc <tcp_close_shutdown+0x1b4>)
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	e013      	b.n	8009b52 <tcp_close_shutdown+0x14a>
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <tcp_close_shutdown+0x1b4>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60bb      	str	r3, [r7, #8]
 8009b30:	e00c      	b.n	8009b4c <tcp_close_shutdown+0x144>
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d104      	bne.n	8009b46 <tcp_close_shutdown+0x13e>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	60da      	str	r2, [r3, #12]
 8009b44:	e005      	b.n	8009b52 <tcp_close_shutdown+0x14a>
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	60bb      	str	r3, [r7, #8]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1ef      	bne.n	8009b32 <tcp_close_shutdown+0x12a>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff fea3 	bl	80098a4 <tcp_free>
      break;
 8009b5e:	e01a      	b.n	8009b96 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff ff17 	bl	8009994 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	4815      	ldr	r0, [pc, #84]	; (8009bc0 <tcp_close_shutdown+0x1b8>)
 8009b6a:	f001 f89f 	bl	800acac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff feb4 	bl	80098dc <tcp_free_listen>
      break;
 8009b74:	e00f      	b.n	8009b96 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	480d      	ldr	r0, [pc, #52]	; (8009bb0 <tcp_close_shutdown+0x1a8>)
 8009b7a:	f001 f897 	bl	800acac <tcp_pcb_remove>
 8009b7e:	4b0d      	ldr	r3, [pc, #52]	; (8009bb4 <tcp_close_shutdown+0x1ac>)
 8009b80:	2201      	movs	r2, #1
 8009b82:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fe8d 	bl	80098a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009b8a:	e004      	b.n	8009b96 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f819 	bl	8009bc4 <tcp_close_shutdown_fin>
 8009b92:	4603      	mov	r3, r0
 8009b94:	e000      	b.n	8009b98 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8009ba0:	080130bc 	.word	0x080130bc
 8009ba4:	08013190 	.word	0x08013190
 8009ba8:	08013100 	.word	0x08013100
 8009bac:	080131b0 	.word	0x080131b0
 8009bb0:	24004c64 	.word	0x24004c64
 8009bb4:	24004c60 	.word	0x24004c60
 8009bb8:	24004c78 	.word	0x24004c78
 8009bbc:	24004c70 	.word	0x24004c70
 8009bc0:	24004c6c 	.word	0x24004c6c

08009bc4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d106      	bne.n	8009be0 <tcp_close_shutdown_fin+0x1c>
 8009bd2:	4b2c      	ldr	r3, [pc, #176]	; (8009c84 <tcp_close_shutdown_fin+0xc0>)
 8009bd4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009bd8:	492b      	ldr	r1, [pc, #172]	; (8009c88 <tcp_close_shutdown_fin+0xc4>)
 8009bda:	482c      	ldr	r0, [pc, #176]	; (8009c8c <tcp_close_shutdown_fin+0xc8>)
 8009bdc:	f007 fdd4 	bl	8011788 <iprintf>

  switch (pcb->state) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	7d1b      	ldrb	r3, [r3, #20]
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d010      	beq.n	8009c0a <tcp_close_shutdown_fin+0x46>
 8009be8:	2b07      	cmp	r3, #7
 8009bea:	d01b      	beq.n	8009c24 <tcp_close_shutdown_fin+0x60>
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d126      	bne.n	8009c3e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f003 fedb 	bl	800d9ac <tcp_send_fin>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d11f      	bne.n	8009c42 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2205      	movs	r2, #5
 8009c06:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c08:	e01b      	b.n	8009c42 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f003 fece 	bl	800d9ac <tcp_send_fin>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d114      	bne.n	8009c46 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2205      	movs	r2, #5
 8009c20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c22:	e010      	b.n	8009c46 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f003 fec1 	bl	800d9ac <tcp_send_fin>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d109      	bne.n	8009c4a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2209      	movs	r2, #9
 8009c3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c3c:	e005      	b.n	8009c4a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	e01c      	b.n	8009c7c <tcp_close_shutdown_fin+0xb8>
      break;
 8009c42:	bf00      	nop
 8009c44:	e002      	b.n	8009c4c <tcp_close_shutdown_fin+0x88>
      break;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <tcp_close_shutdown_fin+0x88>
      break;
 8009c4a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d103      	bne.n	8009c5c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f003 ffe7 	bl	800dc28 <tcp_output>
 8009c5a:	e00d      	b.n	8009c78 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c64:	d108      	bne.n	8009c78 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	8b5b      	ldrh	r3, [r3, #26]
 8009c6a:	f043 0308 	orr.w	r3, r3, #8
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	e001      	b.n	8009c7c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	080130bc 	.word	0x080130bc
 8009c88:	0801316c 	.word	0x0801316c
 8009c8c:	08013100 	.word	0x08013100

08009c90 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d109      	bne.n	8009cb2 <tcp_close+0x22>
 8009c9e:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <tcp_close+0x4c>)
 8009ca0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009ca4:	490e      	ldr	r1, [pc, #56]	; (8009ce0 <tcp_close+0x50>)
 8009ca6:	480f      	ldr	r0, [pc, #60]	; (8009ce4 <tcp_close+0x54>)
 8009ca8:	f007 fd6e 	bl	8011788 <iprintf>
 8009cac:	f06f 030f 	mvn.w	r3, #15
 8009cb0:	e00f      	b.n	8009cd2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7d1b      	ldrb	r3, [r3, #20]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d006      	beq.n	8009cc8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	8b5b      	ldrh	r3, [r3, #26]
 8009cbe:	f043 0310 	orr.w	r3, r3, #16
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009cc8:	2101      	movs	r1, #1
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff fe9c 	bl	8009a08 <tcp_close_shutdown>
 8009cd0:	4603      	mov	r3, r0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	080130bc 	.word	0x080130bc
 8009ce0:	080131cc 	.word	0x080131cc
 8009ce4:	08013100 	.word	0x08013100

08009ce8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08e      	sub	sp, #56	; 0x38
 8009cec:	af04      	add	r7, sp, #16
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d107      	bne.n	8009d08 <tcp_abandon+0x20>
 8009cf8:	4b52      	ldr	r3, [pc, #328]	; (8009e44 <tcp_abandon+0x15c>)
 8009cfa:	f240 223d 	movw	r2, #573	; 0x23d
 8009cfe:	4952      	ldr	r1, [pc, #328]	; (8009e48 <tcp_abandon+0x160>)
 8009d00:	4852      	ldr	r0, [pc, #328]	; (8009e4c <tcp_abandon+0x164>)
 8009d02:	f007 fd41 	bl	8011788 <iprintf>
 8009d06:	e099      	b.n	8009e3c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7d1b      	ldrb	r3, [r3, #20]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d106      	bne.n	8009d1e <tcp_abandon+0x36>
 8009d10:	4b4c      	ldr	r3, [pc, #304]	; (8009e44 <tcp_abandon+0x15c>)
 8009d12:	f240 2241 	movw	r2, #577	; 0x241
 8009d16:	494e      	ldr	r1, [pc, #312]	; (8009e50 <tcp_abandon+0x168>)
 8009d18:	484c      	ldr	r0, [pc, #304]	; (8009e4c <tcp_abandon+0x164>)
 8009d1a:	f007 fd35 	bl	8011788 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	7d1b      	ldrb	r3, [r3, #20]
 8009d22:	2b0a      	cmp	r3, #10
 8009d24:	d107      	bne.n	8009d36 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	484a      	ldr	r0, [pc, #296]	; (8009e54 <tcp_abandon+0x16c>)
 8009d2a:	f000 ffbf 	bl	800acac <tcp_pcb_remove>
    tcp_free(pcb);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7ff fdb8 	bl	80098a4 <tcp_free>
 8009d34:	e082      	b.n	8009e3c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d42:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d50:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7d1b      	ldrb	r3, [r3, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d126      	bne.n	8009dae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	8adb      	ldrh	r3, [r3, #22]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d02e      	beq.n	8009dc6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009d68:	4b3b      	ldr	r3, [pc, #236]	; (8009e58 <tcp_abandon+0x170>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d105      	bne.n	8009d7e <tcp_abandon+0x96>
 8009d72:	4b39      	ldr	r3, [pc, #228]	; (8009e58 <tcp_abandon+0x170>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	4a37      	ldr	r2, [pc, #220]	; (8009e58 <tcp_abandon+0x170>)
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	e013      	b.n	8009da6 <tcp_abandon+0xbe>
 8009d7e:	4b36      	ldr	r3, [pc, #216]	; (8009e58 <tcp_abandon+0x170>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	61fb      	str	r3, [r7, #28]
 8009d84:	e00c      	b.n	8009da0 <tcp_abandon+0xb8>
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d104      	bne.n	8009d9a <tcp_abandon+0xb2>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	60da      	str	r2, [r3, #12]
 8009d98:	e005      	b.n	8009da6 <tcp_abandon+0xbe>
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	61fb      	str	r3, [r7, #28]
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1ef      	bne.n	8009d86 <tcp_abandon+0x9e>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	60da      	str	r2, [r3, #12]
 8009dac:	e00b      	b.n	8009dc6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	8adb      	ldrh	r3, [r3, #22]
 8009db6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	4828      	ldr	r0, [pc, #160]	; (8009e5c <tcp_abandon+0x174>)
 8009dbc:	f000 ff76 	bl	800acac <tcp_pcb_remove>
 8009dc0:	4b27      	ldr	r3, [pc, #156]	; (8009e60 <tcp_abandon+0x178>)
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d004      	beq.n	8009dd8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 fd1a 	bl	800a80c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d004      	beq.n	8009dea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 fd11 	bl	800a80c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d004      	beq.n	8009dfc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fd08 	bl	800a80c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00e      	beq.n	8009e20 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3304      	adds	r3, #4
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	8b12      	ldrh	r2, [r2, #24]
 8009e0c:	9202      	str	r2, [sp, #8]
 8009e0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e10:	9201      	str	r2, [sp, #4]
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	460b      	mov	r3, r1
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	69b9      	ldr	r1, [r7, #24]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f004 fcca 	bl	800e7b4 <tcp_rst>
    }
    last_state = pcb->state;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	7d1b      	ldrb	r3, [r3, #20]
 8009e24:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7ff fd3c 	bl	80098a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d004      	beq.n	8009e3c <tcp_abandon+0x154>
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f06f 010c 	mvn.w	r1, #12
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	4798      	blx	r3
  }
}
 8009e3c:	3728      	adds	r7, #40	; 0x28
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	080130bc 	.word	0x080130bc
 8009e48:	08013200 	.word	0x08013200
 8009e4c:	08013100 	.word	0x08013100
 8009e50:	0801321c 	.word	0x0801321c
 8009e54:	24004c74 	.word	0x24004c74
 8009e58:	24004c70 	.word	0x24004c70
 8009e5c:	24004c64 	.word	0x24004c64
 8009e60:	24004c60 	.word	0x24004c60

08009e64 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff ff3a 	bl	8009ce8 <tcp_abandon>
}
 8009e74:	bf00      	nop
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d106      	bne.n	8009e98 <tcp_update_rcv_ann_wnd+0x1c>
 8009e8a:	4b25      	ldr	r3, [pc, #148]	; (8009f20 <tcp_update_rcv_ann_wnd+0xa4>)
 8009e8c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009e90:	4924      	ldr	r1, [pc, #144]	; (8009f24 <tcp_update_rcv_ann_wnd+0xa8>)
 8009e92:	4825      	ldr	r0, [pc, #148]	; (8009f28 <tcp_update_rcv_ann_wnd+0xac>)
 8009e94:	f007 fc78 	bl	8011788 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009ea0:	4413      	add	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009eac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009eb0:	bf28      	it	cs
 8009eb2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009eb6:	b292      	uxth	r2, r2
 8009eb8:	4413      	add	r3, r2
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	db08      	blt.n	8009ed4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	e020      	b.n	8009f16 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	dd03      	ble.n	8009eea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ee8:	e014      	b.n	8009f14 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009efc:	d306      	bcc.n	8009f0c <tcp_update_rcv_ann_wnd+0x90>
 8009efe:	4b08      	ldr	r3, [pc, #32]	; (8009f20 <tcp_update_rcv_ann_wnd+0xa4>)
 8009f00:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009f04:	4909      	ldr	r1, [pc, #36]	; (8009f2c <tcp_update_rcv_ann_wnd+0xb0>)
 8009f06:	4808      	ldr	r0, [pc, #32]	; (8009f28 <tcp_update_rcv_ann_wnd+0xac>)
 8009f08:	f007 fc3e 	bl	8011788 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009f14:	2300      	movs	r3, #0
  }
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	080130bc 	.word	0x080130bc
 8009f24:	08013318 	.word	0x08013318
 8009f28:	08013100 	.word	0x08013100
 8009f2c:	0801333c 	.word	0x0801333c

08009f30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d107      	bne.n	8009f52 <tcp_recved+0x22>
 8009f42:	4b1f      	ldr	r3, [pc, #124]	; (8009fc0 <tcp_recved+0x90>)
 8009f44:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009f48:	491e      	ldr	r1, [pc, #120]	; (8009fc4 <tcp_recved+0x94>)
 8009f4a:	481f      	ldr	r0, [pc, #124]	; (8009fc8 <tcp_recved+0x98>)
 8009f4c:	f007 fc1c 	bl	8011788 <iprintf>
 8009f50:	e032      	b.n	8009fb8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	7d1b      	ldrb	r3, [r3, #20]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d106      	bne.n	8009f68 <tcp_recved+0x38>
 8009f5a:	4b19      	ldr	r3, [pc, #100]	; (8009fc0 <tcp_recved+0x90>)
 8009f5c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8009f60:	491a      	ldr	r1, [pc, #104]	; (8009fcc <tcp_recved+0x9c>)
 8009f62:	4819      	ldr	r0, [pc, #100]	; (8009fc8 <tcp_recved+0x98>)
 8009f64:	f007 fc10 	bl	8011788 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f6c:	887b      	ldrh	r3, [r7, #2]
 8009f6e:	4413      	add	r3, r2
 8009f70:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009f72:	89fb      	ldrh	r3, [r7, #14]
 8009f74:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009f78:	d804      	bhi.n	8009f84 <tcp_recved+0x54>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7e:	89fa      	ldrh	r2, [r7, #14]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d204      	bcs.n	8009f8e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009f8a:	851a      	strh	r2, [r3, #40]	; 0x28
 8009f8c:	e002      	b.n	8009f94 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	89fa      	ldrh	r2, [r7, #14]
 8009f92:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ff71 	bl	8009e7c <tcp_update_rcv_ann_wnd>
 8009f9a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009fa2:	d309      	bcc.n	8009fb8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	8b5b      	ldrh	r3, [r3, #26]
 8009fa8:	f043 0302 	orr.w	r3, r3, #2
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f003 fe38 	bl	800dc28 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	080130bc 	.word	0x080130bc
 8009fc4:	08013358 	.word	0x08013358
 8009fc8:	08013100 	.word	0x08013100
 8009fcc:	08013370 	.word	0x08013370

08009fd0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009fd0:	b5b0      	push	{r4, r5, r7, lr}
 8009fd2:	b090      	sub	sp, #64	; 0x40
 8009fd4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009fdc:	4b94      	ldr	r3, [pc, #592]	; (800a230 <tcp_slowtmr+0x260>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	4a93      	ldr	r2, [pc, #588]	; (800a230 <tcp_slowtmr+0x260>)
 8009fe4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009fe6:	4b93      	ldr	r3, [pc, #588]	; (800a234 <tcp_slowtmr+0x264>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	3301      	adds	r3, #1
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	4b91      	ldr	r3, [pc, #580]	; (800a234 <tcp_slowtmr+0x264>)
 8009ff0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009ff6:	4b90      	ldr	r3, [pc, #576]	; (800a238 <tcp_slowtmr+0x268>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009ffc:	e29d      	b.n	800a53a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a000:	7d1b      	ldrb	r3, [r3, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <tcp_slowtmr+0x44>
 800a006:	4b8d      	ldr	r3, [pc, #564]	; (800a23c <tcp_slowtmr+0x26c>)
 800a008:	f240 42be 	movw	r2, #1214	; 0x4be
 800a00c:	498c      	ldr	r1, [pc, #560]	; (800a240 <tcp_slowtmr+0x270>)
 800a00e:	488d      	ldr	r0, [pc, #564]	; (800a244 <tcp_slowtmr+0x274>)
 800a010:	f007 fbba 	bl	8011788 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a016:	7d1b      	ldrb	r3, [r3, #20]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d106      	bne.n	800a02a <tcp_slowtmr+0x5a>
 800a01c:	4b87      	ldr	r3, [pc, #540]	; (800a23c <tcp_slowtmr+0x26c>)
 800a01e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a022:	4989      	ldr	r1, [pc, #548]	; (800a248 <tcp_slowtmr+0x278>)
 800a024:	4887      	ldr	r0, [pc, #540]	; (800a244 <tcp_slowtmr+0x274>)
 800a026:	f007 fbaf 	bl	8011788 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02c:	7d1b      	ldrb	r3, [r3, #20]
 800a02e:	2b0a      	cmp	r3, #10
 800a030:	d106      	bne.n	800a040 <tcp_slowtmr+0x70>
 800a032:	4b82      	ldr	r3, [pc, #520]	; (800a23c <tcp_slowtmr+0x26c>)
 800a034:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a038:	4984      	ldr	r1, [pc, #528]	; (800a24c <tcp_slowtmr+0x27c>)
 800a03a:	4882      	ldr	r0, [pc, #520]	; (800a244 <tcp_slowtmr+0x274>)
 800a03c:	f007 fba4 	bl	8011788 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a042:	7f9a      	ldrb	r2, [r3, #30]
 800a044:	4b7b      	ldr	r3, [pc, #492]	; (800a234 <tcp_slowtmr+0x264>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d105      	bne.n	800a058 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a056:	e270      	b.n	800a53a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a058:	4b76      	ldr	r3, [pc, #472]	; (800a234 <tcp_slowtmr+0x264>)
 800a05a:	781a      	ldrb	r2, [r3, #0]
 800a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	7d1b      	ldrb	r3, [r3, #20]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d10a      	bne.n	800a08a <tcp_slowtmr+0xba>
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a07a:	2b05      	cmp	r3, #5
 800a07c:	d905      	bls.n	800a08a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a07e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a082:	3301      	adds	r3, #1
 800a084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a088:	e11e      	b.n	800a2c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a090:	2b0b      	cmp	r3, #11
 800a092:	d905      	bls.n	800a0a0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a098:	3301      	adds	r3, #1
 800a09a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a09e:	e113      	b.n	800a2c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d075      	beq.n	800a196 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d006      	beq.n	800a0c0 <tcp_slowtmr+0xf0>
 800a0b2:	4b62      	ldr	r3, [pc, #392]	; (800a23c <tcp_slowtmr+0x26c>)
 800a0b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a0b8:	4965      	ldr	r1, [pc, #404]	; (800a250 <tcp_slowtmr+0x280>)
 800a0ba:	4862      	ldr	r0, [pc, #392]	; (800a244 <tcp_slowtmr+0x274>)
 800a0bc:	f007 fb64 	bl	8011788 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d106      	bne.n	800a0d6 <tcp_slowtmr+0x106>
 800a0c8:	4b5c      	ldr	r3, [pc, #368]	; (800a23c <tcp_slowtmr+0x26c>)
 800a0ca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a0ce:	4961      	ldr	r1, [pc, #388]	; (800a254 <tcp_slowtmr+0x284>)
 800a0d0:	485c      	ldr	r0, [pc, #368]	; (800a244 <tcp_slowtmr+0x274>)
 800a0d2:	f007 fb59 	bl	8011788 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a0dc:	2b0b      	cmp	r3, #11
 800a0de:	d905      	bls.n	800a0ec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0ea:	e0ed      	b.n	800a2c8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	4a58      	ldr	r2, [pc, #352]	; (800a258 <tcp_slowtmr+0x288>)
 800a0f6:	5cd3      	ldrb	r3, [r2, r3]
 800a0f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a100:	7c7a      	ldrb	r2, [r7, #17]
 800a102:	429a      	cmp	r2, r3
 800a104:	d907      	bls.n	800a116 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a10c:	3301      	adds	r3, #1
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a11c:	7c7a      	ldrb	r2, [r7, #17]
 800a11e:	429a      	cmp	r2, r3
 800a120:	f200 80d2 	bhi.w	800a2c8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a124:	2301      	movs	r3, #1
 800a126:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d108      	bne.n	800a144 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a134:	f004 fc32 	bl	800e99c <tcp_zero_window_probe>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d014      	beq.n	800a168 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a13e:	2300      	movs	r3, #0
 800a140:	623b      	str	r3, [r7, #32]
 800a142:	e011      	b.n	800a168 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a14a:	4619      	mov	r1, r3
 800a14c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a14e:	f003 fae5 	bl	800d71c <tcp_split_unsent_seg>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d107      	bne.n	800a168 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a15a:	f003 fd65 	bl	800dc28 <tcp_output>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 80ac 	beq.w	800a2c8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a17e:	2b06      	cmp	r3, #6
 800a180:	f200 80a2 	bhi.w	800a2c8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a186:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a18a:	3301      	adds	r3, #1
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a190:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a194:	e098      	b.n	800a2c8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	db0f      	blt.n	800a1c0 <tcp_slowtmr+0x1f0>
 800a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d008      	beq.n	800a1c0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	b21a      	sxth	r2, r3
 800a1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1be:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	db7b      	blt.n	800a2c8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a1d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1d2:	f004 f821 	bl	800e218 <tcp_rexmit_rto_prepare>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d007      	beq.n	800a1ec <tcp_slowtmr+0x21c>
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d171      	bne.n	800a2c8 <tcp_slowtmr+0x2f8>
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d06d      	beq.n	800a2c8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	7d1b      	ldrb	r3, [r3, #20]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d03a      	beq.n	800a26a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1fa:	2b0c      	cmp	r3, #12
 800a1fc:	bf28      	it	cs
 800a1fe:	230c      	movcs	r3, #12
 800a200:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a204:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a208:	10db      	asrs	r3, r3, #3
 800a20a:	b21b      	sxth	r3, r3
 800a20c:	461a      	mov	r2, r3
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a214:	4413      	add	r3, r2
 800a216:	7efa      	ldrb	r2, [r7, #27]
 800a218:	4910      	ldr	r1, [pc, #64]	; (800a25c <tcp_slowtmr+0x28c>)
 800a21a:	5c8a      	ldrb	r2, [r1, r2]
 800a21c:	4093      	lsls	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a226:	4293      	cmp	r3, r2
 800a228:	dc1a      	bgt.n	800a260 <tcp_slowtmr+0x290>
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	b21a      	sxth	r2, r3
 800a22e:	e019      	b.n	800a264 <tcp_slowtmr+0x294>
 800a230:	24004c68 	.word	0x24004c68
 800a234:	2400197a 	.word	0x2400197a
 800a238:	24004c64 	.word	0x24004c64
 800a23c:	080130bc 	.word	0x080130bc
 800a240:	08013400 	.word	0x08013400
 800a244:	08013100 	.word	0x08013100
 800a248:	0801342c 	.word	0x0801342c
 800a24c:	08013458 	.word	0x08013458
 800a250:	08013488 	.word	0x08013488
 800a254:	080134bc 	.word	0x080134bc
 800a258:	080150a4 	.word	0x080150a4
 800a25c:	08015094 	.word	0x08015094
 800a260:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	2200      	movs	r2, #0
 800a26e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a27c:	4293      	cmp	r3, r2
 800a27e:	bf28      	it	cs
 800a280:	4613      	movcs	r3, r2
 800a282:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a284:	8a7b      	ldrh	r3, [r7, #18]
 800a286:	085b      	lsrs	r3, r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a292:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d206      	bcs.n	800a2b0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2c4:	f004 f818 	bl	800e2f8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	7d1b      	ldrb	r3, [r3, #20]
 800a2cc:	2b06      	cmp	r3, #6
 800a2ce:	d111      	bne.n	800a2f4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	8b5b      	ldrh	r3, [r3, #26]
 800a2d4:	f003 0310 	and.w	r3, r3, #16
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00b      	beq.n	800a2f4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a2dc:	4b9c      	ldr	r3, [pc, #624]	; (800a550 <tcp_slowtmr+0x580>)
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	6a1b      	ldr	r3, [r3, #32]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	2b28      	cmp	r3, #40	; 0x28
 800a2e8:	d904      	bls.n	800a2f4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	7a5b      	ldrb	r3, [r3, #9]
 800a2f8:	f003 0308 	and.w	r3, r3, #8
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d04a      	beq.n	800a396 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a302:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a304:	2b04      	cmp	r3, #4
 800a306:	d003      	beq.n	800a310 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a30c:	2b07      	cmp	r3, #7
 800a30e:	d142      	bne.n	800a396 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a310:	4b8f      	ldr	r3, [pc, #572]	; (800a550 <tcp_slowtmr+0x580>)
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a320:	4b8c      	ldr	r3, [pc, #560]	; (800a554 <tcp_slowtmr+0x584>)
 800a322:	440b      	add	r3, r1
 800a324:	498c      	ldr	r1, [pc, #560]	; (800a558 <tcp_slowtmr+0x588>)
 800a326:	fba1 1303 	umull	r1, r3, r1, r3
 800a32a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d90a      	bls.n	800a346 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a334:	3301      	adds	r3, #1
 800a336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a33a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a33e:	3301      	adds	r3, #1
 800a340:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a344:	e027      	b.n	800a396 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a346:	4b82      	ldr	r3, [pc, #520]	; (800a550 <tcp_slowtmr+0x580>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a35c:	4618      	mov	r0, r3
 800a35e:	4b7f      	ldr	r3, [pc, #508]	; (800a55c <tcp_slowtmr+0x58c>)
 800a360:	fb03 f300 	mul.w	r3, r3, r0
 800a364:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a366:	497c      	ldr	r1, [pc, #496]	; (800a558 <tcp_slowtmr+0x588>)
 800a368:	fba1 1303 	umull	r1, r3, r1, r3
 800a36c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a36e:	429a      	cmp	r2, r3
 800a370:	d911      	bls.n	800a396 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a374:	f004 fad2 	bl	800e91c <tcp_keepalive>
 800a378:	4603      	mov	r3, r0
 800a37a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a37e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a382:	2b00      	cmp	r3, #0
 800a384:	d107      	bne.n	800a396 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a38c:	3301      	adds	r3, #1
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a392:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d011      	beq.n	800a3c2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a39e:	4b6c      	ldr	r3, [pc, #432]	; (800a550 <tcp_slowtmr+0x580>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	1ad2      	subs	r2, r2, r3
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	440b      	add	r3, r1
 800a3b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d302      	bcc.n	800a3c2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3be:	f000 fdd9 	bl	800af74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	7d1b      	ldrb	r3, [r3, #20]
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	d10b      	bne.n	800a3e2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3ca:	4b61      	ldr	r3, [pc, #388]	; (800a550 <tcp_slowtmr+0x580>)
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	2b28      	cmp	r3, #40	; 0x28
 800a3d6:	d904      	bls.n	800a3e2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3dc:	3301      	adds	r3, #1
 800a3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	7d1b      	ldrb	r3, [r3, #20]
 800a3e6:	2b09      	cmp	r3, #9
 800a3e8:	d10b      	bne.n	800a402 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a3ea:	4b59      	ldr	r3, [pc, #356]	; (800a550 <tcp_slowtmr+0x580>)
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2bf0      	cmp	r3, #240	; 0xf0
 800a3f6:	d904      	bls.n	800a402 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a406:	2b00      	cmp	r3, #0
 800a408:	d060      	beq.n	800a4cc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a410:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a414:	f000 fbfa 	bl	800ac0c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d010      	beq.n	800a440 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a41e:	4b50      	ldr	r3, [pc, #320]	; (800a560 <tcp_slowtmr+0x590>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a424:	429a      	cmp	r2, r3
 800a426:	d106      	bne.n	800a436 <tcp_slowtmr+0x466>
 800a428:	4b4e      	ldr	r3, [pc, #312]	; (800a564 <tcp_slowtmr+0x594>)
 800a42a:	f240 526d 	movw	r2, #1389	; 0x56d
 800a42e:	494e      	ldr	r1, [pc, #312]	; (800a568 <tcp_slowtmr+0x598>)
 800a430:	484e      	ldr	r0, [pc, #312]	; (800a56c <tcp_slowtmr+0x59c>)
 800a432:	f007 f9a9 	bl	8011788 <iprintf>
        prev->next = pcb->next;
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	60da      	str	r2, [r3, #12]
 800a43e:	e00f      	b.n	800a460 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a440:	4b47      	ldr	r3, [pc, #284]	; (800a560 <tcp_slowtmr+0x590>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a446:	429a      	cmp	r2, r3
 800a448:	d006      	beq.n	800a458 <tcp_slowtmr+0x488>
 800a44a:	4b46      	ldr	r3, [pc, #280]	; (800a564 <tcp_slowtmr+0x594>)
 800a44c:	f240 5271 	movw	r2, #1393	; 0x571
 800a450:	4947      	ldr	r1, [pc, #284]	; (800a570 <tcp_slowtmr+0x5a0>)
 800a452:	4846      	ldr	r0, [pc, #280]	; (800a56c <tcp_slowtmr+0x59c>)
 800a454:	f007 f998 	bl	8011788 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	4a40      	ldr	r2, [pc, #256]	; (800a560 <tcp_slowtmr+0x590>)
 800a45e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a460:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a464:	2b00      	cmp	r3, #0
 800a466:	d013      	beq.n	800a490 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a470:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	3304      	adds	r3, #4
 800a476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a478:	8ad2      	ldrh	r2, [r2, #22]
 800a47a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a47c:	8b09      	ldrh	r1, [r1, #24]
 800a47e:	9102      	str	r1, [sp, #8]
 800a480:	9201      	str	r2, [sp, #4]
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	462b      	mov	r3, r5
 800a486:	4622      	mov	r2, r4
 800a488:	4601      	mov	r1, r0
 800a48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a48c:	f004 f992 	bl	800e7b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	7d1b      	ldrb	r3, [r3, #20]
 800a49a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a4a6:	6838      	ldr	r0, [r7, #0]
 800a4a8:	f7ff f9fc 	bl	80098a4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a4ac:	4b31      	ldr	r3, [pc, #196]	; (800a574 <tcp_slowtmr+0x5a4>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d004      	beq.n	800a4c2 <tcp_slowtmr+0x4f2>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f06f 010c 	mvn.w	r1, #12
 800a4be:	68b8      	ldr	r0, [r7, #8]
 800a4c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a4c2:	4b2c      	ldr	r3, [pc, #176]	; (800a574 <tcp_slowtmr+0x5a4>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d037      	beq.n	800a53a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a4ca:	e592      	b.n	8009ff2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	7f1b      	ldrb	r3, [r3, #28]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	7f1a      	ldrb	r2, [r3, #28]
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	7f5b      	ldrb	r3, [r3, #29]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d325      	bcc.n	800a53a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a4f4:	4b1f      	ldr	r3, [pc, #124]	; (800a574 <tcp_slowtmr+0x5a4>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00b      	beq.n	800a51c <tcp_slowtmr+0x54c>
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a50a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a50c:	6912      	ldr	r2, [r2, #16]
 800a50e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a510:	4610      	mov	r0, r2
 800a512:	4798      	blx	r3
 800a514:	4603      	mov	r3, r0
 800a516:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a51a:	e002      	b.n	800a522 <tcp_slowtmr+0x552>
 800a51c:	2300      	movs	r3, #0
 800a51e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a522:	4b14      	ldr	r3, [pc, #80]	; (800a574 <tcp_slowtmr+0x5a4>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d000      	beq.n	800a52c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a52a:	e562      	b.n	8009ff2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a52c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a536:	f003 fb77 	bl	800dc28 <tcp_output>
  while (pcb != NULL) {
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f47f ad5e 	bne.w	8009ffe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a546:	4b0c      	ldr	r3, [pc, #48]	; (800a578 <tcp_slowtmr+0x5a8>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a54c:	e069      	b.n	800a622 <tcp_slowtmr+0x652>
 800a54e:	bf00      	nop
 800a550:	24004c68 	.word	0x24004c68
 800a554:	000a4cb8 	.word	0x000a4cb8
 800a558:	10624dd3 	.word	0x10624dd3
 800a55c:	000124f8 	.word	0x000124f8
 800a560:	24004c64 	.word	0x24004c64
 800a564:	080130bc 	.word	0x080130bc
 800a568:	080134f4 	.word	0x080134f4
 800a56c:	08013100 	.word	0x08013100
 800a570:	08013520 	.word	0x08013520
 800a574:	24004c60 	.word	0x24004c60
 800a578:	24004c74 	.word	0x24004c74
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	7d1b      	ldrb	r3, [r3, #20]
 800a580:	2b0a      	cmp	r3, #10
 800a582:	d006      	beq.n	800a592 <tcp_slowtmr+0x5c2>
 800a584:	4b2a      	ldr	r3, [pc, #168]	; (800a630 <tcp_slowtmr+0x660>)
 800a586:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a58a:	492a      	ldr	r1, [pc, #168]	; (800a634 <tcp_slowtmr+0x664>)
 800a58c:	482a      	ldr	r0, [pc, #168]	; (800a638 <tcp_slowtmr+0x668>)
 800a58e:	f007 f8fb 	bl	8011788 <iprintf>
    pcb_remove = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a598:	4b28      	ldr	r3, [pc, #160]	; (800a63c <tcp_slowtmr+0x66c>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2bf0      	cmp	r3, #240	; 0xf0
 800a5a4:	d904      	bls.n	800a5b0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a5a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d02f      	beq.n	800a618 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a5b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5ba:	f000 fb27 	bl	800ac0c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d010      	beq.n	800a5e6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a5c4:	4b1e      	ldr	r3, [pc, #120]	; (800a640 <tcp_slowtmr+0x670>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d106      	bne.n	800a5dc <tcp_slowtmr+0x60c>
 800a5ce:	4b18      	ldr	r3, [pc, #96]	; (800a630 <tcp_slowtmr+0x660>)
 800a5d0:	f240 52af 	movw	r2, #1455	; 0x5af
 800a5d4:	491b      	ldr	r1, [pc, #108]	; (800a644 <tcp_slowtmr+0x674>)
 800a5d6:	4818      	ldr	r0, [pc, #96]	; (800a638 <tcp_slowtmr+0x668>)
 800a5d8:	f007 f8d6 	bl	8011788 <iprintf>
        prev->next = pcb->next;
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e2:	60da      	str	r2, [r3, #12]
 800a5e4:	e00f      	b.n	800a606 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a5e6:	4b16      	ldr	r3, [pc, #88]	; (800a640 <tcp_slowtmr+0x670>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d006      	beq.n	800a5fe <tcp_slowtmr+0x62e>
 800a5f0:	4b0f      	ldr	r3, [pc, #60]	; (800a630 <tcp_slowtmr+0x660>)
 800a5f2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a5f6:	4914      	ldr	r1, [pc, #80]	; (800a648 <tcp_slowtmr+0x678>)
 800a5f8:	480f      	ldr	r0, [pc, #60]	; (800a638 <tcp_slowtmr+0x668>)
 800a5fa:	f007 f8c5 	bl	8011788 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	4a0f      	ldr	r2, [pc, #60]	; (800a640 <tcp_slowtmr+0x670>)
 800a604:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a610:	69f8      	ldr	r0, [r7, #28]
 800a612:	f7ff f947 	bl	80098a4 <tcp_free>
 800a616:	e004      	b.n	800a622 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1a9      	bne.n	800a57c <tcp_slowtmr+0x5ac>
    }
  }
}
 800a628:	bf00      	nop
 800a62a:	3730      	adds	r7, #48	; 0x30
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bdb0      	pop	{r4, r5, r7, pc}
 800a630:	080130bc 	.word	0x080130bc
 800a634:	0801354c 	.word	0x0801354c
 800a638:	08013100 	.word	0x08013100
 800a63c:	24004c68 	.word	0x24004c68
 800a640:	24004c74 	.word	0x24004c74
 800a644:	0801357c 	.word	0x0801357c
 800a648:	080135a4 	.word	0x080135a4

0800a64c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a652:	4b2d      	ldr	r3, [pc, #180]	; (800a708 <tcp_fasttmr+0xbc>)
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	3301      	adds	r3, #1
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	4b2b      	ldr	r3, [pc, #172]	; (800a708 <tcp_fasttmr+0xbc>)
 800a65c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a65e:	4b2b      	ldr	r3, [pc, #172]	; (800a70c <tcp_fasttmr+0xc0>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a664:	e048      	b.n	800a6f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	7f9a      	ldrb	r2, [r3, #30]
 800a66a:	4b27      	ldr	r3, [pc, #156]	; (800a708 <tcp_fasttmr+0xbc>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d03f      	beq.n	800a6f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a672:	4b25      	ldr	r3, [pc, #148]	; (800a708 <tcp_fasttmr+0xbc>)
 800a674:	781a      	ldrb	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	8b5b      	ldrh	r3, [r3, #26]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	d010      	beq.n	800a6a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	8b5b      	ldrh	r3, [r3, #26]
 800a68a:	f043 0302 	orr.w	r3, r3, #2
 800a68e:	b29a      	uxth	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f003 fac7 	bl	800dc28 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	8b5b      	ldrh	r3, [r3, #26]
 800a69e:	f023 0303 	bic.w	r3, r3, #3
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	8b5b      	ldrh	r3, [r3, #26]
 800a6ac:	f003 0308 	and.w	r3, r3, #8
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d009      	beq.n	800a6c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	8b5b      	ldrh	r3, [r3, #26]
 800a6b8:	f023 0308 	bic.w	r3, r3, #8
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7ff fa7e 	bl	8009bc4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00a      	beq.n	800a6ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a6d6:	4b0e      	ldr	r3, [pc, #56]	; (800a710 <tcp_fasttmr+0xc4>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f819 	bl	800a714 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a6e2:	4b0b      	ldr	r3, [pc, #44]	; (800a710 <tcp_fasttmr+0xc4>)
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d000      	beq.n	800a6ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a6ea:	e7b8      	b.n	800a65e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	607b      	str	r3, [r7, #4]
 800a6f0:	e002      	b.n	800a6f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1b3      	bne.n	800a666 <tcp_fasttmr+0x1a>
    }
  }
}
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	2400197a 	.word	0x2400197a
 800a70c:	24004c64 	.word	0x24004c64
 800a710:	24004c60 	.word	0x24004c60

0800a714 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a714:	b590      	push	{r4, r7, lr}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d109      	bne.n	800a736 <tcp_process_refused_data+0x22>
 800a722:	4b37      	ldr	r3, [pc, #220]	; (800a800 <tcp_process_refused_data+0xec>)
 800a724:	f240 6209 	movw	r2, #1545	; 0x609
 800a728:	4936      	ldr	r1, [pc, #216]	; (800a804 <tcp_process_refused_data+0xf0>)
 800a72a:	4837      	ldr	r0, [pc, #220]	; (800a808 <tcp_process_refused_data+0xf4>)
 800a72c:	f007 f82c 	bl	8011788 <iprintf>
 800a730:	f06f 030f 	mvn.w	r3, #15
 800a734:	e060      	b.n	800a7f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a73a:	7b5b      	ldrb	r3, [r3, #13]
 800a73c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a742:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00b      	beq.n	800a76c <tcp_process_refused_data+0x58>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6918      	ldr	r0, [r3, #16]
 800a75e:	2300      	movs	r3, #0
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	6879      	ldr	r1, [r7, #4]
 800a764:	47a0      	blx	r4
 800a766:	4603      	mov	r3, r0
 800a768:	73fb      	strb	r3, [r7, #15]
 800a76a:	e007      	b.n	800a77c <tcp_process_refused_data+0x68>
 800a76c:	2300      	movs	r3, #0
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	6879      	ldr	r1, [r7, #4]
 800a772:	2000      	movs	r0, #0
 800a774:	f000 f8a2 	bl	800a8bc <tcp_recv_null>
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d12a      	bne.n	800a7da <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	f003 0320 	and.w	r3, r3, #32
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d033      	beq.n	800a7f6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a792:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a796:	d005      	beq.n	800a7a4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a79c:	3301      	adds	r3, #1
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <tcp_process_refused_data+0xb2>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6918      	ldr	r0, [r3, #16]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	6879      	ldr	r1, [r7, #4]
 800a7be:	47a0      	blx	r4
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73fb      	strb	r3, [r7, #15]
 800a7c4:	e001      	b.n	800a7ca <tcp_process_refused_data+0xb6>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7ce:	f113 0f0d 	cmn.w	r3, #13
 800a7d2:	d110      	bne.n	800a7f6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a7d4:	f06f 030c 	mvn.w	r3, #12
 800a7d8:	e00e      	b.n	800a7f8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a7da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7de:	f113 0f0d 	cmn.w	r3, #13
 800a7e2:	d102      	bne.n	800a7ea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a7e4:	f06f 030c 	mvn.w	r3, #12
 800a7e8:	e006      	b.n	800a7f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a7f0:	f06f 0304 	mvn.w	r3, #4
 800a7f4:	e000      	b.n	800a7f8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd90      	pop	{r4, r7, pc}
 800a800:	080130bc 	.word	0x080130bc
 800a804:	080135cc 	.word	0x080135cc
 800a808:	08013100 	.word	0x08013100

0800a80c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a814:	e007      	b.n	800a826 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f809 	bl	800a834 <tcp_seg_free>
    seg = next;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1f4      	bne.n	800a816 <tcp_segs_free+0xa>
  }
}
 800a82c:	bf00      	nop
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00c      	beq.n	800a85c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d004      	beq.n	800a854 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fd88 	bl	8009364 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a854:	6879      	ldr	r1, [r7, #4]
 800a856:	2003      	movs	r0, #3
 800a858:	f7fd ff36 	bl	80086c8 <memp_free>
  }
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d106      	bne.n	800a880 <tcp_seg_copy+0x1c>
 800a872:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <tcp_seg_copy+0x4c>)
 800a874:	f240 6282 	movw	r2, #1666	; 0x682
 800a878:	490e      	ldr	r1, [pc, #56]	; (800a8b4 <tcp_seg_copy+0x50>)
 800a87a:	480f      	ldr	r0, [pc, #60]	; (800a8b8 <tcp_seg_copy+0x54>)
 800a87c:	f006 ff84 	bl	8011788 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a880:	2003      	movs	r0, #3
 800a882:	f7fd feb1 	bl	80085e8 <memp_malloc>
 800a886:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <tcp_seg_copy+0x2e>
    return NULL;
 800a88e:	2300      	movs	r3, #0
 800a890:	e00a      	b.n	800a8a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a892:	2210      	movs	r2, #16
 800a894:	6879      	ldr	r1, [r7, #4]
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f006 ff63 	bl	8011762 <memcpy>
  pbuf_ref(cseg->p);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fe fdff 	bl	80094a4 <pbuf_ref>
  return cseg;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	080130bc 	.word	0x080130bc
 800a8b4:	08013610 	.word	0x08013610
 800a8b8:	08013100 	.word	0x08013100

0800a8bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d109      	bne.n	800a8e4 <tcp_recv_null+0x28>
 800a8d0:	4b12      	ldr	r3, [pc, #72]	; (800a91c <tcp_recv_null+0x60>)
 800a8d2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a8d6:	4912      	ldr	r1, [pc, #72]	; (800a920 <tcp_recv_null+0x64>)
 800a8d8:	4812      	ldr	r0, [pc, #72]	; (800a924 <tcp_recv_null+0x68>)
 800a8da:	f006 ff55 	bl	8011788 <iprintf>
 800a8de:	f06f 030f 	mvn.w	r3, #15
 800a8e2:	e016      	b.n	800a912 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d009      	beq.n	800a8fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	891b      	ldrh	r3, [r3, #8]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	68b8      	ldr	r0, [r7, #8]
 800a8f2:	f7ff fb1d 	bl	8009f30 <tcp_recved>
    pbuf_free(p);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7fe fd34 	bl	8009364 <pbuf_free>
 800a8fc:	e008      	b.n	800a910 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a8fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d104      	bne.n	800a910 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a906:	68b8      	ldr	r0, [r7, #8]
 800a908:	f7ff f9c2 	bl	8009c90 <tcp_close>
 800a90c:	4603      	mov	r3, r0
 800a90e:	e000      	b.n	800a912 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	080130bc 	.word	0x080130bc
 800a920:	0801362c 	.word	0x0801362c
 800a924:	08013100 	.word	0x08013100

0800a928 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	4603      	mov	r3, r0
 800a930:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a936:	2b00      	cmp	r3, #0
 800a938:	db01      	blt.n	800a93e <tcp_kill_prio+0x16>
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	e000      	b.n	800a940 <tcp_kill_prio+0x18>
 800a93e:	237f      	movs	r3, #127	; 0x7f
 800a940:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a942:	7afb      	ldrb	r3, [r7, #11]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d034      	beq.n	800a9b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a948:	7afb      	ldrb	r3, [r7, #11]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a952:	2300      	movs	r3, #0
 800a954:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a956:	4b19      	ldr	r3, [pc, #100]	; (800a9bc <tcp_kill_prio+0x94>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	617b      	str	r3, [r7, #20]
 800a95c:	e01f      	b.n	800a99e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	7d5b      	ldrb	r3, [r3, #21]
 800a962:	7afa      	ldrb	r2, [r7, #11]
 800a964:	429a      	cmp	r2, r3
 800a966:	d80c      	bhi.n	800a982 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a96c:	7afa      	ldrb	r2, [r7, #11]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d112      	bne.n	800a998 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a972:	4b13      	ldr	r3, [pc, #76]	; (800a9c0 <tcp_kill_prio+0x98>)
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d80a      	bhi.n	800a998 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a982:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <tcp_kill_prio+0x98>)
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	1ad3      	subs	r3, r2, r3
 800a98c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	7d5b      	ldrb	r3, [r3, #21]
 800a996:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	617b      	str	r3, [r7, #20]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1dc      	bne.n	800a95e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d004      	beq.n	800a9b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a9aa:	6938      	ldr	r0, [r7, #16]
 800a9ac:	f7ff fa5a 	bl	8009e64 <tcp_abort>
 800a9b0:	e000      	b.n	800a9b4 <tcp_kill_prio+0x8c>
    return;
 800a9b2:	bf00      	nop
  }
}
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	24004c64 	.word	0x24004c64
 800a9c0:	24004c68 	.word	0x24004c68

0800a9c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	2b08      	cmp	r3, #8
 800a9d2:	d009      	beq.n	800a9e8 <tcp_kill_state+0x24>
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	2b09      	cmp	r3, #9
 800a9d8:	d006      	beq.n	800a9e8 <tcp_kill_state+0x24>
 800a9da:	4b1a      	ldr	r3, [pc, #104]	; (800aa44 <tcp_kill_state+0x80>)
 800a9dc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a9e0:	4919      	ldr	r1, [pc, #100]	; (800aa48 <tcp_kill_state+0x84>)
 800a9e2:	481a      	ldr	r0, [pc, #104]	; (800aa4c <tcp_kill_state+0x88>)
 800a9e4:	f006 fed0 	bl	8011788 <iprintf>

  inactivity = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9f0:	4b17      	ldr	r3, [pc, #92]	; (800aa50 <tcp_kill_state+0x8c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	617b      	str	r3, [r7, #20]
 800a9f6:	e017      	b.n	800aa28 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	7d1b      	ldrb	r3, [r3, #20]
 800a9fc:	79fa      	ldrb	r2, [r7, #7]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d10f      	bne.n	800aa22 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa02:	4b14      	ldr	r3, [pc, #80]	; (800aa54 <tcp_kill_state+0x90>)
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d807      	bhi.n	800aa22 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800aa12:	4b10      	ldr	r3, [pc, #64]	; (800aa54 <tcp_kill_state+0x90>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1e4      	bne.n	800a9f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800aa34:	2100      	movs	r1, #0
 800aa36:	6938      	ldr	r0, [r7, #16]
 800aa38:	f7ff f956 	bl	8009ce8 <tcp_abandon>
  }
}
 800aa3c:	bf00      	nop
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	080130bc 	.word	0x080130bc
 800aa48:	08013648 	.word	0x08013648
 800aa4c:	08013100 	.word	0x08013100
 800aa50:	24004c64 	.word	0x24004c64
 800aa54:	24004c68 	.word	0x24004c68

0800aa58 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa66:	4b12      	ldr	r3, [pc, #72]	; (800aab0 <tcp_kill_timewait+0x58>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	e012      	b.n	800aa94 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa6e:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <tcp_kill_timewait+0x5c>)
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d807      	bhi.n	800aa8e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800aa7e:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <tcp_kill_timewait+0x5c>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1e9      	bne.n	800aa6e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800aaa0:	68b8      	ldr	r0, [r7, #8]
 800aaa2:	f7ff f9df 	bl	8009e64 <tcp_abort>
  }
}
 800aaa6:	bf00      	nop
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	24004c74 	.word	0x24004c74
 800aab4:	24004c68 	.word	0x24004c68

0800aab8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800aabe:	4b10      	ldr	r3, [pc, #64]	; (800ab00 <tcp_handle_closepend+0x48>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800aac4:	e014      	b.n	800aaf0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	8b5b      	ldrh	r3, [r3, #26]
 800aad0:	f003 0308 	and.w	r3, r3, #8
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d009      	beq.n	800aaec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	8b5b      	ldrh	r3, [r3, #26]
 800aadc:	f023 0308 	bic.w	r3, r3, #8
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff f86c 	bl	8009bc4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1e7      	bne.n	800aac6 <tcp_handle_closepend+0xe>
  }
}
 800aaf6:	bf00      	nop
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	24004c64 	.word	0x24004c64

0800ab04 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab0e:	2001      	movs	r0, #1
 800ab10:	f7fd fd6a 	bl	80085e8 <memp_malloc>
 800ab14:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d126      	bne.n	800ab6a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ab1c:	f7ff ffcc 	bl	800aab8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ab20:	f7ff ff9a 	bl	800aa58 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab24:	2001      	movs	r0, #1
 800ab26:	f7fd fd5f 	bl	80085e8 <memp_malloc>
 800ab2a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d11b      	bne.n	800ab6a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ab32:	2009      	movs	r0, #9
 800ab34:	f7ff ff46 	bl	800a9c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab38:	2001      	movs	r0, #1
 800ab3a:	f7fd fd55 	bl	80085e8 <memp_malloc>
 800ab3e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d111      	bne.n	800ab6a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ab46:	2008      	movs	r0, #8
 800ab48:	f7ff ff3c 	bl	800a9c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab4c:	2001      	movs	r0, #1
 800ab4e:	f7fd fd4b 	bl	80085e8 <memp_malloc>
 800ab52:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d107      	bne.n	800ab6a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ab5a:	79fb      	ldrb	r3, [r7, #7]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7ff fee3 	bl	800a928 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab62:	2001      	movs	r0, #1
 800ab64:	f7fd fd40 	bl	80085e8 <memp_malloc>
 800ab68:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d03f      	beq.n	800abf0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ab70:	229c      	movs	r2, #156	; 0x9c
 800ab72:	2100      	movs	r1, #0
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f006 fdff 	bl	8011778 <memset>
    pcb->prio = prio;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	79fa      	ldrb	r2, [r7, #7]
 800ab7e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ab86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ab90:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	22ff      	movs	r2, #255	; 0xff
 800ab9e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800aba6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2206      	movs	r2, #6
 800abac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2206      	movs	r2, #6
 800abb4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abbc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800abc6:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <tcp_alloc+0xf8>)
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800abce:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <tcp_alloc+0xfc>)
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800abdc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4a08      	ldr	r2, [pc, #32]	; (800ac04 <tcp_alloc+0x100>)
 800abe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4a07      	ldr	r2, [pc, #28]	; (800ac08 <tcp_alloc+0x104>)
 800abec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800abf0:	68fb      	ldr	r3, [r7, #12]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	24004c68 	.word	0x24004c68
 800ac00:	2400197a 	.word	0x2400197a
 800ac04:	0800a8bd 	.word	0x0800a8bd
 800ac08:	006ddd00 	.word	0x006ddd00

0800ac0c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d107      	bne.n	800ac2a <tcp_pcb_purge+0x1e>
 800ac1a:	4b21      	ldr	r3, [pc, #132]	; (800aca0 <tcp_pcb_purge+0x94>)
 800ac1c:	f640 0251 	movw	r2, #2129	; 0x851
 800ac20:	4920      	ldr	r1, [pc, #128]	; (800aca4 <tcp_pcb_purge+0x98>)
 800ac22:	4821      	ldr	r0, [pc, #132]	; (800aca8 <tcp_pcb_purge+0x9c>)
 800ac24:	f006 fdb0 	bl	8011788 <iprintf>
 800ac28:	e037      	b.n	800ac9a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	7d1b      	ldrb	r3, [r3, #20]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d033      	beq.n	800ac9a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ac36:	2b0a      	cmp	r3, #10
 800ac38:	d02f      	beq.n	800ac9a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d02b      	beq.n	800ac9a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe fb88 	bl	8009364 <pbuf_free>
      pcb->refused_data = NULL;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f986 	bl	800af74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac6e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff fdc9 	bl	800a80c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7ff fdc4 	bl	800a80c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	66da      	str	r2, [r3, #108]	; 0x6c
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	080130bc 	.word	0x080130bc
 800aca4:	08013708 	.word	0x08013708
 800aca8:	08013100 	.word	0x08013100

0800acac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d106      	bne.n	800acca <tcp_pcb_remove+0x1e>
 800acbc:	4b3e      	ldr	r3, [pc, #248]	; (800adb8 <tcp_pcb_remove+0x10c>)
 800acbe:	f640 0283 	movw	r2, #2179	; 0x883
 800acc2:	493e      	ldr	r1, [pc, #248]	; (800adbc <tcp_pcb_remove+0x110>)
 800acc4:	483e      	ldr	r0, [pc, #248]	; (800adc0 <tcp_pcb_remove+0x114>)
 800acc6:	f006 fd5f 	bl	8011788 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d106      	bne.n	800acde <tcp_pcb_remove+0x32>
 800acd0:	4b39      	ldr	r3, [pc, #228]	; (800adb8 <tcp_pcb_remove+0x10c>)
 800acd2:	f640 0284 	movw	r2, #2180	; 0x884
 800acd6:	493b      	ldr	r1, [pc, #236]	; (800adc4 <tcp_pcb_remove+0x118>)
 800acd8:	4839      	ldr	r0, [pc, #228]	; (800adc0 <tcp_pcb_remove+0x114>)
 800acda:	f006 fd55 	bl	8011788 <iprintf>

  TCP_RMV(pcblist, pcb);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d105      	bne.n	800acf4 <tcp_pcb_remove+0x48>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68da      	ldr	r2, [r3, #12]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	e013      	b.n	800ad1c <tcp_pcb_remove+0x70>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e00c      	b.n	800ad16 <tcp_pcb_remove+0x6a>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d104      	bne.n	800ad10 <tcp_pcb_remove+0x64>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	60da      	str	r2, [r3, #12]
 800ad0e:	e005      	b.n	800ad1c <tcp_pcb_remove+0x70>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1ef      	bne.n	800acfc <tcp_pcb_remove+0x50>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ad22:	6838      	ldr	r0, [r7, #0]
 800ad24:	f7ff ff72 	bl	800ac0c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	7d1b      	ldrb	r3, [r3, #20]
 800ad2c:	2b0a      	cmp	r3, #10
 800ad2e:	d013      	beq.n	800ad58 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d00f      	beq.n	800ad58 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	8b5b      	ldrh	r3, [r3, #26]
 800ad3c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d009      	beq.n	800ad58 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	8b5b      	ldrh	r3, [r3, #26]
 800ad48:	f043 0302 	orr.w	r3, r3, #2
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ad52:	6838      	ldr	r0, [r7, #0]
 800ad54:	f002 ff68 	bl	800dc28 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	7d1b      	ldrb	r3, [r3, #20]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d020      	beq.n	800ada2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d006      	beq.n	800ad76 <tcp_pcb_remove+0xca>
 800ad68:	4b13      	ldr	r3, [pc, #76]	; (800adb8 <tcp_pcb_remove+0x10c>)
 800ad6a:	f640 0293 	movw	r2, #2195	; 0x893
 800ad6e:	4916      	ldr	r1, [pc, #88]	; (800adc8 <tcp_pcb_remove+0x11c>)
 800ad70:	4813      	ldr	r0, [pc, #76]	; (800adc0 <tcp_pcb_remove+0x114>)
 800ad72:	f006 fd09 	bl	8011788 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d006      	beq.n	800ad8c <tcp_pcb_remove+0xe0>
 800ad7e:	4b0e      	ldr	r3, [pc, #56]	; (800adb8 <tcp_pcb_remove+0x10c>)
 800ad80:	f640 0294 	movw	r2, #2196	; 0x894
 800ad84:	4911      	ldr	r1, [pc, #68]	; (800adcc <tcp_pcb_remove+0x120>)
 800ad86:	480e      	ldr	r0, [pc, #56]	; (800adc0 <tcp_pcb_remove+0x114>)
 800ad88:	f006 fcfe 	bl	8011788 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d006      	beq.n	800ada2 <tcp_pcb_remove+0xf6>
 800ad94:	4b08      	ldr	r3, [pc, #32]	; (800adb8 <tcp_pcb_remove+0x10c>)
 800ad96:	f640 0296 	movw	r2, #2198	; 0x896
 800ad9a:	490d      	ldr	r1, [pc, #52]	; (800add0 <tcp_pcb_remove+0x124>)
 800ad9c:	4808      	ldr	r0, [pc, #32]	; (800adc0 <tcp_pcb_remove+0x114>)
 800ad9e:	f006 fcf3 	bl	8011788 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	2200      	movs	r2, #0
 800ada6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	2200      	movs	r2, #0
 800adac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800adae:	bf00      	nop
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	080130bc 	.word	0x080130bc
 800adbc:	08013724 	.word	0x08013724
 800adc0:	08013100 	.word	0x08013100
 800adc4:	08013740 	.word	0x08013740
 800adc8:	08013760 	.word	0x08013760
 800adcc:	08013778 	.word	0x08013778
 800add0:	08013794 	.word	0x08013794

0800add4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d106      	bne.n	800adf0 <tcp_next_iss+0x1c>
 800ade2:	4b0a      	ldr	r3, [pc, #40]	; (800ae0c <tcp_next_iss+0x38>)
 800ade4:	f640 02af 	movw	r2, #2223	; 0x8af
 800ade8:	4909      	ldr	r1, [pc, #36]	; (800ae10 <tcp_next_iss+0x3c>)
 800adea:	480a      	ldr	r0, [pc, #40]	; (800ae14 <tcp_next_iss+0x40>)
 800adec:	f006 fccc 	bl	8011788 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800adf0:	4b09      	ldr	r3, [pc, #36]	; (800ae18 <tcp_next_iss+0x44>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <tcp_next_iss+0x48>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4413      	add	r3, r2
 800adfa:	4a07      	ldr	r2, [pc, #28]	; (800ae18 <tcp_next_iss+0x44>)
 800adfc:	6013      	str	r3, [r2, #0]
  return iss;
 800adfe:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <tcp_next_iss+0x44>)
 800ae00:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	080130bc 	.word	0x080130bc
 800ae10:	080137ac 	.word	0x080137ac
 800ae14:	08013100 	.word	0x08013100
 800ae18:	24000028 	.word	0x24000028
 800ae1c:	24004c68 	.word	0x24004c68

0800ae20 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d106      	bne.n	800ae42 <tcp_eff_send_mss_netif+0x22>
 800ae34:	4b14      	ldr	r3, [pc, #80]	; (800ae88 <tcp_eff_send_mss_netif+0x68>)
 800ae36:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ae3a:	4914      	ldr	r1, [pc, #80]	; (800ae8c <tcp_eff_send_mss_netif+0x6c>)
 800ae3c:	4814      	ldr	r0, [pc, #80]	; (800ae90 <tcp_eff_send_mss_netif+0x70>)
 800ae3e:	f006 fca3 	bl	8011788 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ae48:	89fb      	ldrh	r3, [r7, #14]
 800ae4a:	e019      	b.n	800ae80 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	8c1b      	ldrh	r3, [r3, #32]
 800ae50:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ae52:	8afb      	ldrh	r3, [r7, #22]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d012      	beq.n	800ae7e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ae58:	2328      	movs	r3, #40	; 0x28
 800ae5a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ae5c:	8afa      	ldrh	r2, [r7, #22]
 800ae5e:	8abb      	ldrh	r3, [r7, #20]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d904      	bls.n	800ae6e <tcp_eff_send_mss_netif+0x4e>
 800ae64:	8afa      	ldrh	r2, [r7, #22]
 800ae66:	8abb      	ldrh	r3, [r7, #20]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	e000      	b.n	800ae70 <tcp_eff_send_mss_netif+0x50>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ae72:	8a7a      	ldrh	r2, [r7, #18]
 800ae74:	89fb      	ldrh	r3, [r7, #14]
 800ae76:	4293      	cmp	r3, r2
 800ae78:	bf28      	it	cs
 800ae7a:	4613      	movcs	r3, r2
 800ae7c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ae7e:	89fb      	ldrh	r3, [r7, #14]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	080130bc 	.word	0x080130bc
 800ae8c:	080137c8 	.word	0x080137c8
 800ae90:	08013100 	.word	0x08013100

0800ae94 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d119      	bne.n	800aedc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800aea8:	4b10      	ldr	r3, [pc, #64]	; (800aeec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800aeaa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800aeae:	4910      	ldr	r1, [pc, #64]	; (800aef0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800aeb0:	4810      	ldr	r0, [pc, #64]	; (800aef4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800aeb2:	f006 fc69 	bl	8011788 <iprintf>

  while (pcb != NULL) {
 800aeb6:	e011      	b.n	800aedc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d108      	bne.n	800aed6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f7fe ffca 	bl	8009e64 <tcp_abort>
      pcb = next;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	e002      	b.n	800aedc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1ea      	bne.n	800aeb8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800aee2:	bf00      	nop
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	080130bc 	.word	0x080130bc
 800aef0:	080137f0 	.word	0x080137f0
 800aef4:	08013100 	.word	0x08013100

0800aef8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d02a      	beq.n	800af5e <tcp_netif_ip_addr_changed+0x66>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d026      	beq.n	800af5e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800af10:	4b15      	ldr	r3, [pc, #84]	; (800af68 <tcp_netif_ip_addr_changed+0x70>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7ff ffbc 	bl	800ae94 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800af1c:	4b13      	ldr	r3, [pc, #76]	; (800af6c <tcp_netif_ip_addr_changed+0x74>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7ff ffb6 	bl	800ae94 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d017      	beq.n	800af5e <tcp_netif_ip_addr_changed+0x66>
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d013      	beq.n	800af5e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af36:	4b0e      	ldr	r3, [pc, #56]	; (800af70 <tcp_netif_ip_addr_changed+0x78>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	e00c      	b.n	800af58 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d103      	bne.n	800af52 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	60fb      	str	r3, [r7, #12]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1ef      	bne.n	800af3e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800af5e:	bf00      	nop
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	24004c64 	.word	0x24004c64
 800af6c:	24004c70 	.word	0x24004c70
 800af70:	24004c6c 	.word	0x24004c6c

0800af74 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af80:	2b00      	cmp	r3, #0
 800af82:	d007      	beq.n	800af94 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fc3f 	bl	800a80c <tcp_segs_free>
    pcb->ooseq = NULL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800af9c:	b590      	push	{r4, r7, lr}
 800af9e:	b08d      	sub	sp, #52	; 0x34
 800afa0:	af04      	add	r7, sp, #16
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d105      	bne.n	800afb8 <tcp_input+0x1c>
 800afac:	4b9b      	ldr	r3, [pc, #620]	; (800b21c <tcp_input+0x280>)
 800afae:	2283      	movs	r2, #131	; 0x83
 800afb0:	499b      	ldr	r1, [pc, #620]	; (800b220 <tcp_input+0x284>)
 800afb2:	489c      	ldr	r0, [pc, #624]	; (800b224 <tcp_input+0x288>)
 800afb4:	f006 fbe8 	bl	8011788 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	4a9a      	ldr	r2, [pc, #616]	; (800b228 <tcp_input+0x28c>)
 800afbe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	895b      	ldrh	r3, [r3, #10]
 800afc4:	2b13      	cmp	r3, #19
 800afc6:	f240 83c4 	bls.w	800b752 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800afca:	4b98      	ldr	r3, [pc, #608]	; (800b22c <tcp_input+0x290>)
 800afcc:	695a      	ldr	r2, [r3, #20]
 800afce:	4b97      	ldr	r3, [pc, #604]	; (800b22c <tcp_input+0x290>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	f005 fc45 	bl	8010864 <ip4_addr_isbroadcast_u32>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f040 83ba 	bne.w	800b756 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800afe2:	4b92      	ldr	r3, [pc, #584]	; (800b22c <tcp_input+0x290>)
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800afea:	2be0      	cmp	r3, #224	; 0xe0
 800afec:	f000 83b3 	beq.w	800b756 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800aff0:	4b8d      	ldr	r3, [pc, #564]	; (800b228 <tcp_input+0x28c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	899b      	ldrh	r3, [r3, #12]
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fc fdc5 	bl	8007b88 <lwip_htons>
 800affe:	4603      	mov	r3, r0
 800b000:	0b1b      	lsrs	r3, r3, #12
 800b002:	b29b      	uxth	r3, r3
 800b004:	b2db      	uxtb	r3, r3
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b00a:	7cbb      	ldrb	r3, [r7, #18]
 800b00c:	2b13      	cmp	r3, #19
 800b00e:	f240 83a2 	bls.w	800b756 <tcp_input+0x7ba>
 800b012:	7cbb      	ldrb	r3, [r7, #18]
 800b014:	b29a      	uxth	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	891b      	ldrh	r3, [r3, #8]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	f200 839b 	bhi.w	800b756 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b020:	7cbb      	ldrb	r3, [r7, #18]
 800b022:	b29b      	uxth	r3, r3
 800b024:	3b14      	subs	r3, #20
 800b026:	b29a      	uxth	r2, r3
 800b028:	4b81      	ldr	r3, [pc, #516]	; (800b230 <tcp_input+0x294>)
 800b02a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b02c:	4b81      	ldr	r3, [pc, #516]	; (800b234 <tcp_input+0x298>)
 800b02e:	2200      	movs	r2, #0
 800b030:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	895a      	ldrh	r2, [r3, #10]
 800b036:	7cbb      	ldrb	r3, [r7, #18]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d309      	bcc.n	800b052 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b03e:	4b7c      	ldr	r3, [pc, #496]	; (800b230 <tcp_input+0x294>)
 800b040:	881a      	ldrh	r2, [r3, #0]
 800b042:	4b7d      	ldr	r3, [pc, #500]	; (800b238 <tcp_input+0x29c>)
 800b044:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b046:	7cbb      	ldrb	r3, [r7, #18]
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7fe f904 	bl	8009258 <pbuf_remove_header>
 800b050:	e04e      	b.n	800b0f0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d105      	bne.n	800b066 <tcp_input+0xca>
 800b05a:	4b70      	ldr	r3, [pc, #448]	; (800b21c <tcp_input+0x280>)
 800b05c:	22c2      	movs	r2, #194	; 0xc2
 800b05e:	4977      	ldr	r1, [pc, #476]	; (800b23c <tcp_input+0x2a0>)
 800b060:	4870      	ldr	r0, [pc, #448]	; (800b224 <tcp_input+0x288>)
 800b062:	f006 fb91 	bl	8011788 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b066:	2114      	movs	r1, #20
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7fe f8f5 	bl	8009258 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	895a      	ldrh	r2, [r3, #10]
 800b072:	4b71      	ldr	r3, [pc, #452]	; (800b238 <tcp_input+0x29c>)
 800b074:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b076:	4b6e      	ldr	r3, [pc, #440]	; (800b230 <tcp_input+0x294>)
 800b078:	881a      	ldrh	r2, [r3, #0]
 800b07a:	4b6f      	ldr	r3, [pc, #444]	; (800b238 <tcp_input+0x29c>)
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b082:	4b6d      	ldr	r3, [pc, #436]	; (800b238 <tcp_input+0x29c>)
 800b084:	881b      	ldrh	r3, [r3, #0]
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7fe f8e5 	bl	8009258 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	895b      	ldrh	r3, [r3, #10]
 800b094:	8a3a      	ldrh	r2, [r7, #16]
 800b096:	429a      	cmp	r2, r3
 800b098:	f200 835f 	bhi.w	800b75a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	4a64      	ldr	r2, [pc, #400]	; (800b234 <tcp_input+0x298>)
 800b0a4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	8a3a      	ldrh	r2, [r7, #16]
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fe f8d2 	bl	8009258 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	891a      	ldrh	r2, [r3, #8]
 800b0b8:	8a3b      	ldrh	r3, [r7, #16]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	895b      	ldrh	r3, [r3, #10]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d005      	beq.n	800b0d6 <tcp_input+0x13a>
 800b0ca:	4b54      	ldr	r3, [pc, #336]	; (800b21c <tcp_input+0x280>)
 800b0cc:	22df      	movs	r2, #223	; 0xdf
 800b0ce:	495c      	ldr	r1, [pc, #368]	; (800b240 <tcp_input+0x2a4>)
 800b0d0:	4854      	ldr	r0, [pc, #336]	; (800b224 <tcp_input+0x288>)
 800b0d2:	f006 fb59 	bl	8011788 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	891a      	ldrh	r2, [r3, #8]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	891b      	ldrh	r3, [r3, #8]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d005      	beq.n	800b0f0 <tcp_input+0x154>
 800b0e4:	4b4d      	ldr	r3, [pc, #308]	; (800b21c <tcp_input+0x280>)
 800b0e6:	22e0      	movs	r2, #224	; 0xe0
 800b0e8:	4956      	ldr	r1, [pc, #344]	; (800b244 <tcp_input+0x2a8>)
 800b0ea:	484e      	ldr	r0, [pc, #312]	; (800b224 <tcp_input+0x288>)
 800b0ec:	f006 fb4c 	bl	8011788 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b0f0:	4b4d      	ldr	r3, [pc, #308]	; (800b228 <tcp_input+0x28c>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	4b4b      	ldr	r3, [pc, #300]	; (800b228 <tcp_input+0x28c>)
 800b0fa:	681c      	ldr	r4, [r3, #0]
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f7fc fd43 	bl	8007b88 <lwip_htons>
 800b102:	4603      	mov	r3, r0
 800b104:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b106:	4b48      	ldr	r3, [pc, #288]	; (800b228 <tcp_input+0x28c>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	885b      	ldrh	r3, [r3, #2]
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	4b46      	ldr	r3, [pc, #280]	; (800b228 <tcp_input+0x28c>)
 800b110:	681c      	ldr	r4, [r3, #0]
 800b112:	4610      	mov	r0, r2
 800b114:	f7fc fd38 	bl	8007b88 <lwip_htons>
 800b118:	4603      	mov	r3, r0
 800b11a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b11c:	4b42      	ldr	r3, [pc, #264]	; (800b228 <tcp_input+0x28c>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	4b41      	ldr	r3, [pc, #260]	; (800b228 <tcp_input+0x28c>)
 800b124:	681c      	ldr	r4, [r3, #0]
 800b126:	4610      	mov	r0, r2
 800b128:	f7fc fd43 	bl	8007bb2 <lwip_htonl>
 800b12c:	4603      	mov	r3, r0
 800b12e:	6063      	str	r3, [r4, #4]
 800b130:	6863      	ldr	r3, [r4, #4]
 800b132:	4a45      	ldr	r2, [pc, #276]	; (800b248 <tcp_input+0x2ac>)
 800b134:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b136:	4b3c      	ldr	r3, [pc, #240]	; (800b228 <tcp_input+0x28c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689a      	ldr	r2, [r3, #8]
 800b13c:	4b3a      	ldr	r3, [pc, #232]	; (800b228 <tcp_input+0x28c>)
 800b13e:	681c      	ldr	r4, [r3, #0]
 800b140:	4610      	mov	r0, r2
 800b142:	f7fc fd36 	bl	8007bb2 <lwip_htonl>
 800b146:	4603      	mov	r3, r0
 800b148:	60a3      	str	r3, [r4, #8]
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	4a3f      	ldr	r2, [pc, #252]	; (800b24c <tcp_input+0x2b0>)
 800b14e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b150:	4b35      	ldr	r3, [pc, #212]	; (800b228 <tcp_input+0x28c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	89db      	ldrh	r3, [r3, #14]
 800b156:	b29a      	uxth	r2, r3
 800b158:	4b33      	ldr	r3, [pc, #204]	; (800b228 <tcp_input+0x28c>)
 800b15a:	681c      	ldr	r4, [r3, #0]
 800b15c:	4610      	mov	r0, r2
 800b15e:	f7fc fd13 	bl	8007b88 <lwip_htons>
 800b162:	4603      	mov	r3, r0
 800b164:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b166:	4b30      	ldr	r3, [pc, #192]	; (800b228 <tcp_input+0x28c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	899b      	ldrh	r3, [r3, #12]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fc fd0a 	bl	8007b88 <lwip_htons>
 800b174:	4603      	mov	r3, r0
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	4b34      	ldr	r3, [pc, #208]	; (800b250 <tcp_input+0x2b4>)
 800b180:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	891a      	ldrh	r2, [r3, #8]
 800b186:	4b33      	ldr	r3, [pc, #204]	; (800b254 <tcp_input+0x2b8>)
 800b188:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b18a:	4b31      	ldr	r3, [pc, #196]	; (800b250 <tcp_input+0x2b4>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	f003 0303 	and.w	r3, r3, #3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00c      	beq.n	800b1b0 <tcp_input+0x214>
    tcplen++;
 800b196:	4b2f      	ldr	r3, [pc, #188]	; (800b254 <tcp_input+0x2b8>)
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	3301      	adds	r3, #1
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	4b2d      	ldr	r3, [pc, #180]	; (800b254 <tcp_input+0x2b8>)
 800b1a0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	891a      	ldrh	r2, [r3, #8]
 800b1a6:	4b2b      	ldr	r3, [pc, #172]	; (800b254 <tcp_input+0x2b8>)
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	f200 82d7 	bhi.w	800b75e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1b4:	4b28      	ldr	r3, [pc, #160]	; (800b258 <tcp_input+0x2bc>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	61fb      	str	r3, [r7, #28]
 800b1ba:	e09d      	b.n	800b2f8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	7d1b      	ldrb	r3, [r3, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d105      	bne.n	800b1d0 <tcp_input+0x234>
 800b1c4:	4b15      	ldr	r3, [pc, #84]	; (800b21c <tcp_input+0x280>)
 800b1c6:	22fb      	movs	r2, #251	; 0xfb
 800b1c8:	4924      	ldr	r1, [pc, #144]	; (800b25c <tcp_input+0x2c0>)
 800b1ca:	4816      	ldr	r0, [pc, #88]	; (800b224 <tcp_input+0x288>)
 800b1cc:	f006 fadc 	bl	8011788 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	7d1b      	ldrb	r3, [r3, #20]
 800b1d4:	2b0a      	cmp	r3, #10
 800b1d6:	d105      	bne.n	800b1e4 <tcp_input+0x248>
 800b1d8:	4b10      	ldr	r3, [pc, #64]	; (800b21c <tcp_input+0x280>)
 800b1da:	22fc      	movs	r2, #252	; 0xfc
 800b1dc:	4920      	ldr	r1, [pc, #128]	; (800b260 <tcp_input+0x2c4>)
 800b1de:	4811      	ldr	r0, [pc, #68]	; (800b224 <tcp_input+0x288>)
 800b1e0:	f006 fad2 	bl	8011788 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	7d1b      	ldrb	r3, [r3, #20]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d105      	bne.n	800b1f8 <tcp_input+0x25c>
 800b1ec:	4b0b      	ldr	r3, [pc, #44]	; (800b21c <tcp_input+0x280>)
 800b1ee:	22fd      	movs	r2, #253	; 0xfd
 800b1f0:	491c      	ldr	r1, [pc, #112]	; (800b264 <tcp_input+0x2c8>)
 800b1f2:	480c      	ldr	r0, [pc, #48]	; (800b224 <tcp_input+0x288>)
 800b1f4:	f006 fac8 	bl	8011788 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	7a1b      	ldrb	r3, [r3, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d033      	beq.n	800b268 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	7a1a      	ldrb	r2, [r3, #8]
 800b204:	4b09      	ldr	r3, [pc, #36]	; (800b22c <tcp_input+0x290>)
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b20c:	3301      	adds	r3, #1
 800b20e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b210:	429a      	cmp	r2, r3
 800b212:	d029      	beq.n	800b268 <tcp_input+0x2cc>
      prev = pcb;
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	61bb      	str	r3, [r7, #24]
      continue;
 800b218:	e06b      	b.n	800b2f2 <tcp_input+0x356>
 800b21a:	bf00      	nop
 800b21c:	08013824 	.word	0x08013824
 800b220:	08013858 	.word	0x08013858
 800b224:	08013870 	.word	0x08013870
 800b228:	2400198c 	.word	0x2400198c
 800b22c:	24001d74 	.word	0x24001d74
 800b230:	24001990 	.word	0x24001990
 800b234:	24001994 	.word	0x24001994
 800b238:	24001992 	.word	0x24001992
 800b23c:	08013898 	.word	0x08013898
 800b240:	080138a8 	.word	0x080138a8
 800b244:	080138b4 	.word	0x080138b4
 800b248:	2400199c 	.word	0x2400199c
 800b24c:	240019a0 	.word	0x240019a0
 800b250:	240019a8 	.word	0x240019a8
 800b254:	240019a6 	.word	0x240019a6
 800b258:	24004c64 	.word	0x24004c64
 800b25c:	080138d4 	.word	0x080138d4
 800b260:	080138fc 	.word	0x080138fc
 800b264:	08013928 	.word	0x08013928
    }

    if (pcb->remote_port == tcphdr->src &&
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	8b1a      	ldrh	r2, [r3, #24]
 800b26c:	4b94      	ldr	r3, [pc, #592]	; (800b4c0 <tcp_input+0x524>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	b29b      	uxth	r3, r3
 800b274:	429a      	cmp	r2, r3
 800b276:	d13a      	bne.n	800b2ee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	8ada      	ldrh	r2, [r3, #22]
 800b27c:	4b90      	ldr	r3, [pc, #576]	; (800b4c0 <tcp_input+0x524>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	885b      	ldrh	r3, [r3, #2]
 800b282:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b284:	429a      	cmp	r2, r3
 800b286:	d132      	bne.n	800b2ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	4b8d      	ldr	r3, [pc, #564]	; (800b4c4 <tcp_input+0x528>)
 800b28e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b290:	429a      	cmp	r2, r3
 800b292:	d12c      	bne.n	800b2ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	4b8a      	ldr	r3, [pc, #552]	; (800b4c4 <tcp_input+0x528>)
 800b29a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d126      	bne.n	800b2ee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	69fa      	ldr	r2, [r7, #28]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d106      	bne.n	800b2b8 <tcp_input+0x31c>
 800b2aa:	4b87      	ldr	r3, [pc, #540]	; (800b4c8 <tcp_input+0x52c>)
 800b2ac:	f240 120d 	movw	r2, #269	; 0x10d
 800b2b0:	4986      	ldr	r1, [pc, #536]	; (800b4cc <tcp_input+0x530>)
 800b2b2:	4887      	ldr	r0, [pc, #540]	; (800b4d0 <tcp_input+0x534>)
 800b2b4:	f006 fa68 	bl	8011788 <iprintf>
      if (prev != NULL) {
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00a      	beq.n	800b2d4 <tcp_input+0x338>
        prev->next = pcb->next;
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b2c6:	4b83      	ldr	r3, [pc, #524]	; (800b4d4 <tcp_input+0x538>)
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b2ce:	4a81      	ldr	r2, [pc, #516]	; (800b4d4 <tcp_input+0x538>)
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	69fa      	ldr	r2, [r7, #28]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d111      	bne.n	800b302 <tcp_input+0x366>
 800b2de:	4b7a      	ldr	r3, [pc, #488]	; (800b4c8 <tcp_input+0x52c>)
 800b2e0:	f240 1215 	movw	r2, #277	; 0x115
 800b2e4:	497c      	ldr	r1, [pc, #496]	; (800b4d8 <tcp_input+0x53c>)
 800b2e6:	487a      	ldr	r0, [pc, #488]	; (800b4d0 <tcp_input+0x534>)
 800b2e8:	f006 fa4e 	bl	8011788 <iprintf>
      break;
 800b2ec:	e009      	b.n	800b302 <tcp_input+0x366>
    }
    prev = pcb;
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	61fb      	str	r3, [r7, #28]
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f47f af5e 	bne.w	800b1bc <tcp_input+0x220>
 800b300:	e000      	b.n	800b304 <tcp_input+0x368>
      break;
 800b302:	bf00      	nop
  }

  if (pcb == NULL) {
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	f040 8095 	bne.w	800b436 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b30c:	4b73      	ldr	r3, [pc, #460]	; (800b4dc <tcp_input+0x540>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	61fb      	str	r3, [r7, #28]
 800b312:	e03f      	b.n	800b394 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	7d1b      	ldrb	r3, [r3, #20]
 800b318:	2b0a      	cmp	r3, #10
 800b31a:	d006      	beq.n	800b32a <tcp_input+0x38e>
 800b31c:	4b6a      	ldr	r3, [pc, #424]	; (800b4c8 <tcp_input+0x52c>)
 800b31e:	f240 121f 	movw	r2, #287	; 0x11f
 800b322:	496f      	ldr	r1, [pc, #444]	; (800b4e0 <tcp_input+0x544>)
 800b324:	486a      	ldr	r0, [pc, #424]	; (800b4d0 <tcp_input+0x534>)
 800b326:	f006 fa2f 	bl	8011788 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	7a1b      	ldrb	r3, [r3, #8]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d009      	beq.n	800b346 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	7a1a      	ldrb	r2, [r3, #8]
 800b336:	4b63      	ldr	r3, [pc, #396]	; (800b4c4 <tcp_input+0x528>)
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b33e:	3301      	adds	r3, #1
 800b340:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b342:	429a      	cmp	r2, r3
 800b344:	d122      	bne.n	800b38c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	8b1a      	ldrh	r2, [r3, #24]
 800b34a:	4b5d      	ldr	r3, [pc, #372]	; (800b4c0 <tcp_input+0x524>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	881b      	ldrh	r3, [r3, #0]
 800b350:	b29b      	uxth	r3, r3
 800b352:	429a      	cmp	r2, r3
 800b354:	d11b      	bne.n	800b38e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	8ada      	ldrh	r2, [r3, #22]
 800b35a:	4b59      	ldr	r3, [pc, #356]	; (800b4c0 <tcp_input+0x524>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	885b      	ldrh	r3, [r3, #2]
 800b360:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b362:	429a      	cmp	r2, r3
 800b364:	d113      	bne.n	800b38e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	4b56      	ldr	r3, [pc, #344]	; (800b4c4 <tcp_input+0x528>)
 800b36c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b36e:	429a      	cmp	r2, r3
 800b370:	d10d      	bne.n	800b38e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	4b53      	ldr	r3, [pc, #332]	; (800b4c4 <tcp_input+0x528>)
 800b378:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d107      	bne.n	800b38e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b37e:	69f8      	ldr	r0, [r7, #28]
 800b380:	f000 fb52 	bl	800ba28 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7fd ffed 	bl	8009364 <pbuf_free>
        return;
 800b38a:	e1ee      	b.n	800b76a <tcp_input+0x7ce>
        continue;
 800b38c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1bc      	bne.n	800b314 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b39e:	4b51      	ldr	r3, [pc, #324]	; (800b4e4 <tcp_input+0x548>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	617b      	str	r3, [r7, #20]
 800b3a4:	e02a      	b.n	800b3fc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	7a1b      	ldrb	r3, [r3, #8]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00c      	beq.n	800b3c8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	7a1a      	ldrb	r2, [r3, #8]
 800b3b2:	4b44      	ldr	r3, [pc, #272]	; (800b4c4 <tcp_input+0x528>)
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d002      	beq.n	800b3c8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	61bb      	str	r3, [r7, #24]
        continue;
 800b3c6:	e016      	b.n	800b3f6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	8ada      	ldrh	r2, [r3, #22]
 800b3cc:	4b3c      	ldr	r3, [pc, #240]	; (800b4c0 <tcp_input+0x524>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	885b      	ldrh	r3, [r3, #2]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d10c      	bne.n	800b3f2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	4b39      	ldr	r3, [pc, #228]	; (800b4c4 <tcp_input+0x528>)
 800b3de:	695b      	ldr	r3, [r3, #20]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d00f      	beq.n	800b404 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00d      	beq.n	800b406 <tcp_input+0x46a>
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d009      	beq.n	800b406 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	617b      	str	r3, [r7, #20]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1d1      	bne.n	800b3a6 <tcp_input+0x40a>
 800b402:	e000      	b.n	800b406 <tcp_input+0x46a>
            break;
 800b404:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d014      	beq.n	800b436 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00a      	beq.n	800b428 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	68da      	ldr	r2, [r3, #12]
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b41a:	4b32      	ldr	r3, [pc, #200]	; (800b4e4 <tcp_input+0x548>)
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b422:	4a30      	ldr	r2, [pc, #192]	; (800b4e4 <tcp_input+0x548>)
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b428:	6978      	ldr	r0, [r7, #20]
 800b42a:	f000 f9ff 	bl	800b82c <tcp_listen_input>
      }
      pbuf_free(p);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7fd ff98 	bl	8009364 <pbuf_free>
      return;
 800b434:	e199      	b.n	800b76a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 8160 	beq.w	800b6fe <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b43e:	4b2a      	ldr	r3, [pc, #168]	; (800b4e8 <tcp_input+0x54c>)
 800b440:	2200      	movs	r2, #0
 800b442:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	891a      	ldrh	r2, [r3, #8]
 800b448:	4b27      	ldr	r3, [pc, #156]	; (800b4e8 <tcp_input+0x54c>)
 800b44a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b44c:	4a26      	ldr	r2, [pc, #152]	; (800b4e8 <tcp_input+0x54c>)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b452:	4b1b      	ldr	r3, [pc, #108]	; (800b4c0 <tcp_input+0x524>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a24      	ldr	r2, [pc, #144]	; (800b4e8 <tcp_input+0x54c>)
 800b458:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b45a:	4b24      	ldr	r3, [pc, #144]	; (800b4ec <tcp_input+0x550>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b460:	4b23      	ldr	r3, [pc, #140]	; (800b4f0 <tcp_input+0x554>)
 800b462:	2200      	movs	r2, #0
 800b464:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b466:	4b23      	ldr	r3, [pc, #140]	; (800b4f4 <tcp_input+0x558>)
 800b468:	2200      	movs	r2, #0
 800b46a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b46c:	4b22      	ldr	r3, [pc, #136]	; (800b4f8 <tcp_input+0x55c>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	f003 0308 	and.w	r3, r3, #8
 800b474:	2b00      	cmp	r3, #0
 800b476:	d006      	beq.n	800b486 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7b5b      	ldrb	r3, [r3, #13]
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	b2da      	uxtb	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d038      	beq.n	800b500 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b48e:	69f8      	ldr	r0, [r7, #28]
 800b490:	f7ff f940 	bl	800a714 <tcp_process_refused_data>
 800b494:	4603      	mov	r3, r0
 800b496:	f113 0f0d 	cmn.w	r3, #13
 800b49a:	d007      	beq.n	800b4ac <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d02d      	beq.n	800b500 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b4a4:	4b15      	ldr	r3, [pc, #84]	; (800b4fc <tcp_input+0x560>)
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d029      	beq.n	800b500 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f040 8104 	bne.w	800b6be <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b4b6:	69f8      	ldr	r0, [r7, #28]
 800b4b8:	f003 f9ce 	bl	800e858 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b4bc:	e0ff      	b.n	800b6be <tcp_input+0x722>
 800b4be:	bf00      	nop
 800b4c0:	2400198c 	.word	0x2400198c
 800b4c4:	24001d74 	.word	0x24001d74
 800b4c8:	08013824 	.word	0x08013824
 800b4cc:	08013950 	.word	0x08013950
 800b4d0:	08013870 	.word	0x08013870
 800b4d4:	24004c64 	.word	0x24004c64
 800b4d8:	0801397c 	.word	0x0801397c
 800b4dc:	24004c74 	.word	0x24004c74
 800b4e0:	080139a8 	.word	0x080139a8
 800b4e4:	24004c6c 	.word	0x24004c6c
 800b4e8:	2400197c 	.word	0x2400197c
 800b4ec:	240019ac 	.word	0x240019ac
 800b4f0:	240019a9 	.word	0x240019a9
 800b4f4:	240019a4 	.word	0x240019a4
 800b4f8:	240019a8 	.word	0x240019a8
 800b4fc:	240019a6 	.word	0x240019a6
      }
    }
    tcp_input_pcb = pcb;
 800b500:	4a9b      	ldr	r2, [pc, #620]	; (800b770 <tcp_input+0x7d4>)
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b506:	69f8      	ldr	r0, [r7, #28]
 800b508:	f000 fb0a 	bl	800bb20 <tcp_process>
 800b50c:	4603      	mov	r3, r0
 800b50e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b510:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b514:	f113 0f0d 	cmn.w	r3, #13
 800b518:	f000 80d3 	beq.w	800b6c2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800b51c:	4b95      	ldr	r3, [pc, #596]	; (800b774 <tcp_input+0x7d8>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f003 0308 	and.w	r3, r3, #8
 800b524:	2b00      	cmp	r3, #0
 800b526:	d015      	beq.n	800b554 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d008      	beq.n	800b544 <tcp_input+0x5a8>
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b538:	69fa      	ldr	r2, [r7, #28]
 800b53a:	6912      	ldr	r2, [r2, #16]
 800b53c:	f06f 010d 	mvn.w	r1, #13
 800b540:	4610      	mov	r0, r2
 800b542:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b544:	69f9      	ldr	r1, [r7, #28]
 800b546:	488c      	ldr	r0, [pc, #560]	; (800b778 <tcp_input+0x7dc>)
 800b548:	f7ff fbb0 	bl	800acac <tcp_pcb_remove>
        tcp_free(pcb);
 800b54c:	69f8      	ldr	r0, [r7, #28]
 800b54e:	f7fe f9a9 	bl	80098a4 <tcp_free>
 800b552:	e0c1      	b.n	800b6d8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b558:	4b88      	ldr	r3, [pc, #544]	; (800b77c <tcp_input+0x7e0>)
 800b55a:	881b      	ldrh	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d01d      	beq.n	800b59c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b560:	4b86      	ldr	r3, [pc, #536]	; (800b77c <tcp_input+0x7e0>)
 800b562:	881b      	ldrh	r3, [r3, #0]
 800b564:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <tcp_input+0x5ea>
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b576:	69fa      	ldr	r2, [r7, #28]
 800b578:	6910      	ldr	r0, [r2, #16]
 800b57a:	89fa      	ldrh	r2, [r7, #14]
 800b57c:	69f9      	ldr	r1, [r7, #28]
 800b57e:	4798      	blx	r3
 800b580:	4603      	mov	r3, r0
 800b582:	74fb      	strb	r3, [r7, #19]
 800b584:	e001      	b.n	800b58a <tcp_input+0x5ee>
 800b586:	2300      	movs	r3, #0
 800b588:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b58a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b58e:	f113 0f0d 	cmn.w	r3, #13
 800b592:	f000 8098 	beq.w	800b6c6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b596:	4b79      	ldr	r3, [pc, #484]	; (800b77c <tcp_input+0x7e0>)
 800b598:	2200      	movs	r2, #0
 800b59a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b59c:	69f8      	ldr	r0, [r7, #28]
 800b59e:	f000 f905 	bl	800b7ac <tcp_input_delayed_close>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f040 8090 	bne.w	800b6ca <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b5aa:	4b75      	ldr	r3, [pc, #468]	; (800b780 <tcp_input+0x7e4>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d041      	beq.n	800b636 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d006      	beq.n	800b5c8 <tcp_input+0x62c>
 800b5ba:	4b72      	ldr	r3, [pc, #456]	; (800b784 <tcp_input+0x7e8>)
 800b5bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b5c0:	4971      	ldr	r1, [pc, #452]	; (800b788 <tcp_input+0x7ec>)
 800b5c2:	4872      	ldr	r0, [pc, #456]	; (800b78c <tcp_input+0x7f0>)
 800b5c4:	f006 f8e0 	bl	8011788 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	8b5b      	ldrh	r3, [r3, #26]
 800b5cc:	f003 0310 	and.w	r3, r3, #16
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d008      	beq.n	800b5e6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b5d4:	4b6a      	ldr	r3, [pc, #424]	; (800b780 <tcp_input+0x7e4>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fd fec3 	bl	8009364 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b5de:	69f8      	ldr	r0, [r7, #28]
 800b5e0:	f7fe fc40 	bl	8009e64 <tcp_abort>
            goto aborted;
 800b5e4:	e078      	b.n	800b6d8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00c      	beq.n	800b60a <tcp_input+0x66e>
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	6918      	ldr	r0, [r3, #16]
 800b5fa:	4b61      	ldr	r3, [pc, #388]	; (800b780 <tcp_input+0x7e4>)
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	2300      	movs	r3, #0
 800b600:	69f9      	ldr	r1, [r7, #28]
 800b602:	47a0      	blx	r4
 800b604:	4603      	mov	r3, r0
 800b606:	74fb      	strb	r3, [r7, #19]
 800b608:	e008      	b.n	800b61c <tcp_input+0x680>
 800b60a:	4b5d      	ldr	r3, [pc, #372]	; (800b780 <tcp_input+0x7e4>)
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	2300      	movs	r3, #0
 800b610:	69f9      	ldr	r1, [r7, #28]
 800b612:	2000      	movs	r0, #0
 800b614:	f7ff f952 	bl	800a8bc <tcp_recv_null>
 800b618:	4603      	mov	r3, r0
 800b61a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b61c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b620:	f113 0f0d 	cmn.w	r3, #13
 800b624:	d053      	beq.n	800b6ce <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b626:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b62e:	4b54      	ldr	r3, [pc, #336]	; (800b780 <tcp_input+0x7e4>)
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b636:	4b4f      	ldr	r3, [pc, #316]	; (800b774 <tcp_input+0x7d8>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	f003 0320 	and.w	r3, r3, #32
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d030      	beq.n	800b6a4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b646:	2b00      	cmp	r3, #0
 800b648:	d009      	beq.n	800b65e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b64e:	7b5a      	ldrb	r2, [r3, #13]
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b654:	f042 0220 	orr.w	r2, r2, #32
 800b658:	b2d2      	uxtb	r2, r2
 800b65a:	735a      	strb	r2, [r3, #13]
 800b65c:	e022      	b.n	800b6a4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b662:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b666:	d005      	beq.n	800b674 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b66c:	3301      	adds	r3, #1
 800b66e:	b29a      	uxth	r2, r3
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00b      	beq.n	800b696 <tcp_input+0x6fa>
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	6918      	ldr	r0, [r3, #16]
 800b688:	2300      	movs	r3, #0
 800b68a:	2200      	movs	r2, #0
 800b68c:	69f9      	ldr	r1, [r7, #28]
 800b68e:	47a0      	blx	r4
 800b690:	4603      	mov	r3, r0
 800b692:	74fb      	strb	r3, [r7, #19]
 800b694:	e001      	b.n	800b69a <tcp_input+0x6fe>
 800b696:	2300      	movs	r3, #0
 800b698:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b69a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b69e:	f113 0f0d 	cmn.w	r3, #13
 800b6a2:	d016      	beq.n	800b6d2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b6a4:	4b32      	ldr	r3, [pc, #200]	; (800b770 <tcp_input+0x7d4>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b6aa:	69f8      	ldr	r0, [r7, #28]
 800b6ac:	f000 f87e 	bl	800b7ac <tcp_input_delayed_close>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10f      	bne.n	800b6d6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b6b6:	69f8      	ldr	r0, [r7, #28]
 800b6b8:	f002 fab6 	bl	800dc28 <tcp_output>
 800b6bc:	e00c      	b.n	800b6d8 <tcp_input+0x73c>
        goto aborted;
 800b6be:	bf00      	nop
 800b6c0:	e00a      	b.n	800b6d8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b6c2:	bf00      	nop
 800b6c4:	e008      	b.n	800b6d8 <tcp_input+0x73c>
              goto aborted;
 800b6c6:	bf00      	nop
 800b6c8:	e006      	b.n	800b6d8 <tcp_input+0x73c>
          goto aborted;
 800b6ca:	bf00      	nop
 800b6cc:	e004      	b.n	800b6d8 <tcp_input+0x73c>
            goto aborted;
 800b6ce:	bf00      	nop
 800b6d0:	e002      	b.n	800b6d8 <tcp_input+0x73c>
              goto aborted;
 800b6d2:	bf00      	nop
 800b6d4:	e000      	b.n	800b6d8 <tcp_input+0x73c>
          goto aborted;
 800b6d6:	bf00      	nop
    tcp_input_pcb = NULL;
 800b6d8:	4b25      	ldr	r3, [pc, #148]	; (800b770 <tcp_input+0x7d4>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b6de:	4b28      	ldr	r3, [pc, #160]	; (800b780 <tcp_input+0x7e4>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b6e4:	4b2a      	ldr	r3, [pc, #168]	; (800b790 <tcp_input+0x7f4>)
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d03d      	beq.n	800b768 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800b6ec:	4b28      	ldr	r3, [pc, #160]	; (800b790 <tcp_input+0x7f4>)
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fd fe37 	bl	8009364 <pbuf_free>
      inseg.p = NULL;
 800b6f6:	4b26      	ldr	r3, [pc, #152]	; (800b790 <tcp_input+0x7f4>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b6fc:	e034      	b.n	800b768 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b6fe:	4b25      	ldr	r3, [pc, #148]	; (800b794 <tcp_input+0x7f8>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	899b      	ldrh	r3, [r3, #12]
 800b704:	b29b      	uxth	r3, r3
 800b706:	4618      	mov	r0, r3
 800b708:	f7fc fa3e 	bl	8007b88 <lwip_htons>
 800b70c:	4603      	mov	r3, r0
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	2b00      	cmp	r3, #0
 800b716:	d118      	bne.n	800b74a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b718:	4b1f      	ldr	r3, [pc, #124]	; (800b798 <tcp_input+0x7fc>)
 800b71a:	6819      	ldr	r1, [r3, #0]
 800b71c:	4b1f      	ldr	r3, [pc, #124]	; (800b79c <tcp_input+0x800>)
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	461a      	mov	r2, r3
 800b722:	4b1f      	ldr	r3, [pc, #124]	; (800b7a0 <tcp_input+0x804>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b728:	4b1a      	ldr	r3, [pc, #104]	; (800b794 <tcp_input+0x7f8>)
 800b72a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b72c:	885b      	ldrh	r3, [r3, #2]
 800b72e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b730:	4a18      	ldr	r2, [pc, #96]	; (800b794 <tcp_input+0x7f8>)
 800b732:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b734:	8812      	ldrh	r2, [r2, #0]
 800b736:	b292      	uxth	r2, r2
 800b738:	9202      	str	r2, [sp, #8]
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	4b19      	ldr	r3, [pc, #100]	; (800b7a4 <tcp_input+0x808>)
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	4b19      	ldr	r3, [pc, #100]	; (800b7a8 <tcp_input+0x80c>)
 800b742:	4602      	mov	r2, r0
 800b744:	2000      	movs	r0, #0
 800b746:	f003 f835 	bl	800e7b4 <tcp_rst>
    pbuf_free(p);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7fd fe0a 	bl	8009364 <pbuf_free>
  return;
 800b750:	e00a      	b.n	800b768 <tcp_input+0x7cc>
    goto dropped;
 800b752:	bf00      	nop
 800b754:	e004      	b.n	800b760 <tcp_input+0x7c4>
dropped:
 800b756:	bf00      	nop
 800b758:	e002      	b.n	800b760 <tcp_input+0x7c4>
      goto dropped;
 800b75a:	bf00      	nop
 800b75c:	e000      	b.n	800b760 <tcp_input+0x7c4>
      goto dropped;
 800b75e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7fd fdff 	bl	8009364 <pbuf_free>
 800b766:	e000      	b.n	800b76a <tcp_input+0x7ce>
  return;
 800b768:	bf00      	nop
}
 800b76a:	3724      	adds	r7, #36	; 0x24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd90      	pop	{r4, r7, pc}
 800b770:	24004c78 	.word	0x24004c78
 800b774:	240019a9 	.word	0x240019a9
 800b778:	24004c64 	.word	0x24004c64
 800b77c:	240019a4 	.word	0x240019a4
 800b780:	240019ac 	.word	0x240019ac
 800b784:	08013824 	.word	0x08013824
 800b788:	080139d8 	.word	0x080139d8
 800b78c:	08013870 	.word	0x08013870
 800b790:	2400197c 	.word	0x2400197c
 800b794:	2400198c 	.word	0x2400198c
 800b798:	240019a0 	.word	0x240019a0
 800b79c:	240019a6 	.word	0x240019a6
 800b7a0:	2400199c 	.word	0x2400199c
 800b7a4:	24001d84 	.word	0x24001d84
 800b7a8:	24001d88 	.word	0x24001d88

0800b7ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d106      	bne.n	800b7c8 <tcp_input_delayed_close+0x1c>
 800b7ba:	4b17      	ldr	r3, [pc, #92]	; (800b818 <tcp_input_delayed_close+0x6c>)
 800b7bc:	f240 225a 	movw	r2, #602	; 0x25a
 800b7c0:	4916      	ldr	r1, [pc, #88]	; (800b81c <tcp_input_delayed_close+0x70>)
 800b7c2:	4817      	ldr	r0, [pc, #92]	; (800b820 <tcp_input_delayed_close+0x74>)
 800b7c4:	f005 ffe0 	bl	8011788 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b7c8:	4b16      	ldr	r3, [pc, #88]	; (800b824 <tcp_input_delayed_close+0x78>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	f003 0310 	and.w	r3, r3, #16
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d01c      	beq.n	800b80e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	8b5b      	ldrh	r3, [r3, #26]
 800b7d8:	f003 0310 	and.w	r3, r3, #16
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10d      	bne.n	800b7fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d008      	beq.n	800b7fc <tcp_input_delayed_close+0x50>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	6912      	ldr	r2, [r2, #16]
 800b7f4:	f06f 010e 	mvn.w	r1, #14
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b7fc:	6879      	ldr	r1, [r7, #4]
 800b7fe:	480a      	ldr	r0, [pc, #40]	; (800b828 <tcp_input_delayed_close+0x7c>)
 800b800:	f7ff fa54 	bl	800acac <tcp_pcb_remove>
    tcp_free(pcb);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7fe f84d 	bl	80098a4 <tcp_free>
    return 1;
 800b80a:	2301      	movs	r3, #1
 800b80c:	e000      	b.n	800b810 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	08013824 	.word	0x08013824
 800b81c:	080139f4 	.word	0x080139f4
 800b820:	08013870 	.word	0x08013870
 800b824:	240019a9 	.word	0x240019a9
 800b828:	24004c64 	.word	0x24004c64

0800b82c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b82c:	b590      	push	{r4, r7, lr}
 800b82e:	b08b      	sub	sp, #44	; 0x2c
 800b830:	af04      	add	r7, sp, #16
 800b832:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b834:	4b6f      	ldr	r3, [pc, #444]	; (800b9f4 <tcp_listen_input+0x1c8>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	f003 0304 	and.w	r3, r3, #4
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f040 80d3 	bne.w	800b9e8 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d106      	bne.n	800b856 <tcp_listen_input+0x2a>
 800b848:	4b6b      	ldr	r3, [pc, #428]	; (800b9f8 <tcp_listen_input+0x1cc>)
 800b84a:	f240 2281 	movw	r2, #641	; 0x281
 800b84e:	496b      	ldr	r1, [pc, #428]	; (800b9fc <tcp_listen_input+0x1d0>)
 800b850:	486b      	ldr	r0, [pc, #428]	; (800ba00 <tcp_listen_input+0x1d4>)
 800b852:	f005 ff99 	bl	8011788 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b856:	4b67      	ldr	r3, [pc, #412]	; (800b9f4 <tcp_listen_input+0x1c8>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	f003 0310 	and.w	r3, r3, #16
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d019      	beq.n	800b896 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b862:	4b68      	ldr	r3, [pc, #416]	; (800ba04 <tcp_listen_input+0x1d8>)
 800b864:	6819      	ldr	r1, [r3, #0]
 800b866:	4b68      	ldr	r3, [pc, #416]	; (800ba08 <tcp_listen_input+0x1dc>)
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	461a      	mov	r2, r3
 800b86c:	4b67      	ldr	r3, [pc, #412]	; (800ba0c <tcp_listen_input+0x1e0>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b872:	4b67      	ldr	r3, [pc, #412]	; (800ba10 <tcp_listen_input+0x1e4>)
 800b874:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b876:	885b      	ldrh	r3, [r3, #2]
 800b878:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b87a:	4a65      	ldr	r2, [pc, #404]	; (800ba10 <tcp_listen_input+0x1e4>)
 800b87c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b87e:	8812      	ldrh	r2, [r2, #0]
 800b880:	b292      	uxth	r2, r2
 800b882:	9202      	str	r2, [sp, #8]
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	4b63      	ldr	r3, [pc, #396]	; (800ba14 <tcp_listen_input+0x1e8>)
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	4b63      	ldr	r3, [pc, #396]	; (800ba18 <tcp_listen_input+0x1ec>)
 800b88c:	4602      	mov	r2, r0
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f002 ff90 	bl	800e7b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b894:	e0aa      	b.n	800b9ec <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800b896:	4b57      	ldr	r3, [pc, #348]	; (800b9f4 <tcp_listen_input+0x1c8>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	f003 0302 	and.w	r3, r3, #2
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 80a4 	beq.w	800b9ec <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	7d5b      	ldrb	r3, [r3, #21]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff f92b 	bl	800ab04 <tcp_alloc>
 800b8ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d111      	bne.n	800b8da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <tcp_listen_input+0xa8>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	6910      	ldr	r0, [r2, #16]
 800b8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4798      	blx	r3
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73bb      	strb	r3, [r7, #14]
      return;
 800b8d2:	e08c      	b.n	800b9ee <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b8d4:	23f0      	movs	r3, #240	; 0xf0
 800b8d6:	73bb      	strb	r3, [r7, #14]
      return;
 800b8d8:	e089      	b.n	800b9ee <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b8da:	4b50      	ldr	r3, [pc, #320]	; (800ba1c <tcp_listen_input+0x1f0>)
 800b8dc:	695a      	ldr	r2, [r3, #20]
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b8e2:	4b4e      	ldr	r3, [pc, #312]	; (800ba1c <tcp_listen_input+0x1f0>)
 800b8e4:	691a      	ldr	r2, [r3, #16]
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	8ada      	ldrh	r2, [r3, #22]
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b8f2:	4b47      	ldr	r3, [pc, #284]	; (800ba10 <tcp_listen_input+0x1e4>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2203      	movs	r2, #3
 800b902:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b904:	4b41      	ldr	r3, [pc, #260]	; (800ba0c <tcp_listen_input+0x1e0>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b916:	6978      	ldr	r0, [r7, #20]
 800b918:	f7ff fa5c 	bl	800add4 <tcp_next_iss>
 800b91c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	693a      	ldr	r2, [r7, #16]
 800b92e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b936:	4b35      	ldr	r3, [pc, #212]	; (800ba0c <tcp_listen_input+0x1e0>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	1e5a      	subs	r2, r3, #1
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	691a      	ldr	r2, [r3, #16]
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7a5b      	ldrb	r3, [r3, #9]
 800b952:	f003 030c 	and.w	r3, r3, #12
 800b956:	b2da      	uxtb	r2, r3
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	7a1a      	ldrb	r2, [r3, #8]
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b964:	4b2e      	ldr	r3, [pc, #184]	; (800ba20 <tcp_listen_input+0x1f4>)
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	60da      	str	r2, [r3, #12]
 800b96c:	4a2c      	ldr	r2, [pc, #176]	; (800ba20 <tcp_listen_input+0x1f4>)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	f003 f8e1 	bl	800eb38 <tcp_timer_needed>
 800b976:	4b2b      	ldr	r3, [pc, #172]	; (800ba24 <tcp_listen_input+0x1f8>)
 800b978:	2201      	movs	r2, #1
 800b97a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b97c:	6978      	ldr	r0, [r7, #20]
 800b97e:	f001 fd8f 	bl	800d4a0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b982:	4b23      	ldr	r3, [pc, #140]	; (800ba10 <tcp_listen_input+0x1e4>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	89db      	ldrh	r3, [r3, #14]
 800b988:	b29a      	uxth	r2, r3
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f004 fcc9 	bl	801033c <ip4_route>
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f7ff fa34 	bl	800ae20 <tcp_eff_send_mss_netif>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b9c0:	2112      	movs	r1, #18
 800b9c2:	6978      	ldr	r0, [r7, #20]
 800b9c4:	f002 f842 	bl	800da4c <tcp_enqueue_flags>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d004      	beq.n	800b9de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	6978      	ldr	r0, [r7, #20]
 800b9d8:	f7fe f986 	bl	8009ce8 <tcp_abandon>
      return;
 800b9dc:	e007      	b.n	800b9ee <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800b9de:	6978      	ldr	r0, [r7, #20]
 800b9e0:	f002 f922 	bl	800dc28 <tcp_output>
  return;
 800b9e4:	bf00      	nop
 800b9e6:	e001      	b.n	800b9ec <tcp_listen_input+0x1c0>
    return;
 800b9e8:	bf00      	nop
 800b9ea:	e000      	b.n	800b9ee <tcp_listen_input+0x1c2>
  return;
 800b9ec:	bf00      	nop
}
 800b9ee:	371c      	adds	r7, #28
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd90      	pop	{r4, r7, pc}
 800b9f4:	240019a8 	.word	0x240019a8
 800b9f8:	08013824 	.word	0x08013824
 800b9fc:	08013a1c 	.word	0x08013a1c
 800ba00:	08013870 	.word	0x08013870
 800ba04:	240019a0 	.word	0x240019a0
 800ba08:	240019a6 	.word	0x240019a6
 800ba0c:	2400199c 	.word	0x2400199c
 800ba10:	2400198c 	.word	0x2400198c
 800ba14:	24001d84 	.word	0x24001d84
 800ba18:	24001d88 	.word	0x24001d88
 800ba1c:	24001d74 	.word	0x24001d74
 800ba20:	24004c64 	.word	0x24004c64
 800ba24:	24004c60 	.word	0x24004c60

0800ba28 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af04      	add	r7, sp, #16
 800ba2e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ba30:	4b30      	ldr	r3, [pc, #192]	; (800baf4 <tcp_timewait_input+0xcc>)
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	f003 0304 	and.w	r3, r3, #4
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d154      	bne.n	800bae6 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <tcp_timewait_input+0x28>
 800ba42:	4b2d      	ldr	r3, [pc, #180]	; (800baf8 <tcp_timewait_input+0xd0>)
 800ba44:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ba48:	492c      	ldr	r1, [pc, #176]	; (800bafc <tcp_timewait_input+0xd4>)
 800ba4a:	482d      	ldr	r0, [pc, #180]	; (800bb00 <tcp_timewait_input+0xd8>)
 800ba4c:	f005 fe9c 	bl	8011788 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ba50:	4b28      	ldr	r3, [pc, #160]	; (800baf4 <tcp_timewait_input+0xcc>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	f003 0302 	and.w	r3, r3, #2
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d02a      	beq.n	800bab2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ba5c:	4b29      	ldr	r3, [pc, #164]	; (800bb04 <tcp_timewait_input+0xdc>)
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	db2d      	blt.n	800bac6 <tcp_timewait_input+0x9e>
 800ba6a:	4b26      	ldr	r3, [pc, #152]	; (800bb04 <tcp_timewait_input+0xdc>)
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba72:	6879      	ldr	r1, [r7, #4]
 800ba74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ba76:	440b      	add	r3, r1
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	dc23      	bgt.n	800bac6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba7e:	4b22      	ldr	r3, [pc, #136]	; (800bb08 <tcp_timewait_input+0xe0>)
 800ba80:	6819      	ldr	r1, [r3, #0]
 800ba82:	4b22      	ldr	r3, [pc, #136]	; (800bb0c <tcp_timewait_input+0xe4>)
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	461a      	mov	r2, r3
 800ba88:	4b1e      	ldr	r3, [pc, #120]	; (800bb04 <tcp_timewait_input+0xdc>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba8e:	4b20      	ldr	r3, [pc, #128]	; (800bb10 <tcp_timewait_input+0xe8>)
 800ba90:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba92:	885b      	ldrh	r3, [r3, #2]
 800ba94:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba96:	4a1e      	ldr	r2, [pc, #120]	; (800bb10 <tcp_timewait_input+0xe8>)
 800ba98:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba9a:	8812      	ldrh	r2, [r2, #0]
 800ba9c:	b292      	uxth	r2, r2
 800ba9e:	9202      	str	r2, [sp, #8]
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	4b1c      	ldr	r3, [pc, #112]	; (800bb14 <tcp_timewait_input+0xec>)
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	4b1c      	ldr	r3, [pc, #112]	; (800bb18 <tcp_timewait_input+0xf0>)
 800baa8:	4602      	mov	r2, r0
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f002 fe82 	bl	800e7b4 <tcp_rst>
      return;
 800bab0:	e01c      	b.n	800baec <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800bab2:	4b10      	ldr	r3, [pc, #64]	; (800baf4 <tcp_timewait_input+0xcc>)
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800babe:	4b17      	ldr	r3, [pc, #92]	; (800bb1c <tcp_timewait_input+0xf4>)
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bac6:	4b11      	ldr	r3, [pc, #68]	; (800bb0c <tcp_timewait_input+0xe4>)
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00d      	beq.n	800baea <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	8b5b      	ldrh	r3, [r3, #26]
 800bad2:	f043 0302 	orr.w	r3, r3, #2
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f002 f8a3 	bl	800dc28 <tcp_output>
  }
  return;
 800bae2:	bf00      	nop
 800bae4:	e001      	b.n	800baea <tcp_timewait_input+0xc2>
    return;
 800bae6:	bf00      	nop
 800bae8:	e000      	b.n	800baec <tcp_timewait_input+0xc4>
  return;
 800baea:	bf00      	nop
}
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	240019a8 	.word	0x240019a8
 800baf8:	08013824 	.word	0x08013824
 800bafc:	08013a3c 	.word	0x08013a3c
 800bb00:	08013870 	.word	0x08013870
 800bb04:	2400199c 	.word	0x2400199c
 800bb08:	240019a0 	.word	0x240019a0
 800bb0c:	240019a6 	.word	0x240019a6
 800bb10:	2400198c 	.word	0x2400198c
 800bb14:	24001d84 	.word	0x24001d84
 800bb18:	24001d88 	.word	0x24001d88
 800bb1c:	24004c68 	.word	0x24004c68

0800bb20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bb20:	b590      	push	{r4, r7, lr}
 800bb22:	b08d      	sub	sp, #52	; 0x34
 800bb24:	af04      	add	r7, sp, #16
 800bb26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <tcp_process+0x24>
 800bb36:	4ba5      	ldr	r3, [pc, #660]	; (800bdcc <tcp_process+0x2ac>)
 800bb38:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bb3c:	49a4      	ldr	r1, [pc, #656]	; (800bdd0 <tcp_process+0x2b0>)
 800bb3e:	48a5      	ldr	r0, [pc, #660]	; (800bdd4 <tcp_process+0x2b4>)
 800bb40:	f005 fe22 	bl	8011788 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bb44:	4ba4      	ldr	r3, [pc, #656]	; (800bdd8 <tcp_process+0x2b8>)
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d04e      	beq.n	800bbee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	7d1b      	ldrb	r3, [r3, #20]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d108      	bne.n	800bb6a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb5c:	4b9f      	ldr	r3, [pc, #636]	; (800bddc <tcp_process+0x2bc>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d123      	bne.n	800bbac <tcp_process+0x8c>
        acceptable = 1;
 800bb64:	2301      	movs	r3, #1
 800bb66:	76fb      	strb	r3, [r7, #27]
 800bb68:	e020      	b.n	800bbac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb6e:	4b9c      	ldr	r3, [pc, #624]	; (800bde0 <tcp_process+0x2c0>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d102      	bne.n	800bb7c <tcp_process+0x5c>
        acceptable = 1;
 800bb76:	2301      	movs	r3, #1
 800bb78:	76fb      	strb	r3, [r7, #27]
 800bb7a:	e017      	b.n	800bbac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bb7c:	4b98      	ldr	r3, [pc, #608]	; (800bde0 <tcp_process+0x2c0>)
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	db10      	blt.n	800bbac <tcp_process+0x8c>
 800bb8a:	4b95      	ldr	r3, [pc, #596]	; (800bde0 <tcp_process+0x2c0>)
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bb96:	440b      	add	r3, r1
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	dc06      	bgt.n	800bbac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	8b5b      	ldrh	r3, [r3, #26]
 800bba2:	f043 0302 	orr.w	r3, r3, #2
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bbac:	7efb      	ldrb	r3, [r7, #27]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d01b      	beq.n	800bbea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	7d1b      	ldrb	r3, [r3, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <tcp_process+0xa8>
 800bbba:	4b84      	ldr	r3, [pc, #528]	; (800bdcc <tcp_process+0x2ac>)
 800bbbc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bbc0:	4988      	ldr	r1, [pc, #544]	; (800bde4 <tcp_process+0x2c4>)
 800bbc2:	4884      	ldr	r0, [pc, #528]	; (800bdd4 <tcp_process+0x2b4>)
 800bbc4:	f005 fde0 	bl	8011788 <iprintf>
      recv_flags |= TF_RESET;
 800bbc8:	4b87      	ldr	r3, [pc, #540]	; (800bde8 <tcp_process+0x2c8>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	f043 0308 	orr.w	r3, r3, #8
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	4b85      	ldr	r3, [pc, #532]	; (800bde8 <tcp_process+0x2c8>)
 800bbd4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	8b5b      	ldrh	r3, [r3, #26]
 800bbda:	f023 0301 	bic.w	r3, r3, #1
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bbe4:	f06f 030d 	mvn.w	r3, #13
 800bbe8:	e37a      	b.n	800c2e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bbea:	2300      	movs	r3, #0
 800bbec:	e378      	b.n	800c2e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bbee:	4b7a      	ldr	r3, [pc, #488]	; (800bdd8 <tcp_process+0x2b8>)
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	f003 0302 	and.w	r3, r3, #2
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d010      	beq.n	800bc1c <tcp_process+0xfc>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	7d1b      	ldrb	r3, [r3, #20]
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d00c      	beq.n	800bc1c <tcp_process+0xfc>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	7d1b      	ldrb	r3, [r3, #20]
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d008      	beq.n	800bc1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	8b5b      	ldrh	r3, [r3, #26]
 800bc0e:	f043 0302 	orr.w	r3, r3, #2
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	e361      	b.n	800c2e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	8b5b      	ldrh	r3, [r3, #26]
 800bc20:	f003 0310 	and.w	r3, r3, #16
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d103      	bne.n	800bc30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bc28:	4b70      	ldr	r3, [pc, #448]	; (800bdec <tcp_process+0x2cc>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f001 fc2d 	bl	800d4a0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	7d1b      	ldrb	r3, [r3, #20]
 800bc4a:	3b02      	subs	r3, #2
 800bc4c:	2b07      	cmp	r3, #7
 800bc4e:	f200 8337 	bhi.w	800c2c0 <tcp_process+0x7a0>
 800bc52:	a201      	add	r2, pc, #4	; (adr r2, 800bc58 <tcp_process+0x138>)
 800bc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc58:	0800bc79 	.word	0x0800bc79
 800bc5c:	0800bea9 	.word	0x0800bea9
 800bc60:	0800c021 	.word	0x0800c021
 800bc64:	0800c04b 	.word	0x0800c04b
 800bc68:	0800c16f 	.word	0x0800c16f
 800bc6c:	0800c021 	.word	0x0800c021
 800bc70:	0800c1fb 	.word	0x0800c1fb
 800bc74:	0800c28b 	.word	0x0800c28b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bc78:	4b57      	ldr	r3, [pc, #348]	; (800bdd8 <tcp_process+0x2b8>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	f003 0310 	and.w	r3, r3, #16
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 80e4 	beq.w	800be4e <tcp_process+0x32e>
 800bc86:	4b54      	ldr	r3, [pc, #336]	; (800bdd8 <tcp_process+0x2b8>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	f003 0302 	and.w	r3, r3, #2
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f000 80dd 	beq.w	800be4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc98:	1c5a      	adds	r2, r3, #1
 800bc9a:	4b50      	ldr	r3, [pc, #320]	; (800bddc <tcp_process+0x2bc>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	f040 80d5 	bne.w	800be4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bca4:	4b4e      	ldr	r3, [pc, #312]	; (800bde0 <tcp_process+0x2c0>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bcb6:	4b49      	ldr	r3, [pc, #292]	; (800bddc <tcp_process+0x2bc>)
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bcbe:	4b4c      	ldr	r3, [pc, #304]	; (800bdf0 <tcp_process+0x2d0>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	89db      	ldrh	r3, [r3, #14]
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bcd8:	4b41      	ldr	r3, [pc, #260]	; (800bde0 <tcp_process+0x2c0>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	1e5a      	subs	r2, r3, #1
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2204      	movs	r2, #4
 800bce6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3304      	adds	r3, #4
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f004 fb23 	bl	801033c <ip4_route>
 800bcf6:	4601      	mov	r1, r0
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f7ff f88e 	bl	800ae20 <tcp_eff_send_mss_netif>
 800bd04:	4603      	mov	r3, r0
 800bd06:	461a      	mov	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd10:	009a      	lsls	r2, r3, #2
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd16:	005b      	lsls	r3, r3, #1
 800bd18:	f241 111c 	movw	r1, #4380	; 0x111c
 800bd1c:	428b      	cmp	r3, r1
 800bd1e:	bf38      	it	cc
 800bd20:	460b      	movcc	r3, r1
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d204      	bcs.n	800bd30 <tcp_process+0x210>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	e00d      	b.n	800bd4c <tcp_process+0x22c>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd34:	005b      	lsls	r3, r3, #1
 800bd36:	f241 121c 	movw	r2, #4380	; 0x111c
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d904      	bls.n	800bd48 <tcp_process+0x228>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	e001      	b.n	800bd4c <tcp_process+0x22c>
 800bd48:	f241 131c 	movw	r3, #4380	; 0x111c
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d106      	bne.n	800bd6a <tcp_process+0x24a>
 800bd5c:	4b1b      	ldr	r3, [pc, #108]	; (800bdcc <tcp_process+0x2ac>)
 800bd5e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bd62:	4924      	ldr	r1, [pc, #144]	; (800bdf4 <tcp_process+0x2d4>)
 800bd64:	481b      	ldr	r0, [pc, #108]	; (800bdd4 <tcp_process+0x2b4>)
 800bd66:	f005 fd0f 	bl	8011788 <iprintf>
        --pcb->snd_queuelen;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd70:	3b01      	subs	r3, #1
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d111      	bne.n	800bdaa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd8a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d106      	bne.n	800bda0 <tcp_process+0x280>
 800bd92:	4b0e      	ldr	r3, [pc, #56]	; (800bdcc <tcp_process+0x2ac>)
 800bd94:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bd98:	4917      	ldr	r1, [pc, #92]	; (800bdf8 <tcp_process+0x2d8>)
 800bd9a:	480e      	ldr	r0, [pc, #56]	; (800bdd4 <tcp_process+0x2b4>)
 800bd9c:	f005 fcf4 	bl	8011788 <iprintf>
          pcb->unsent = rseg->next;
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	66da      	str	r2, [r3, #108]	; 0x6c
 800bda8:	e003      	b.n	800bdb2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800bdb2:	69f8      	ldr	r0, [r7, #28]
 800bdb4:	f7fe fd3e 	bl	800a834 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d11d      	bne.n	800bdfc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdc6:	861a      	strh	r2, [r3, #48]	; 0x30
 800bdc8:	e01f      	b.n	800be0a <tcp_process+0x2ea>
 800bdca:	bf00      	nop
 800bdcc:	08013824 	.word	0x08013824
 800bdd0:	08013a5c 	.word	0x08013a5c
 800bdd4:	08013870 	.word	0x08013870
 800bdd8:	240019a8 	.word	0x240019a8
 800bddc:	240019a0 	.word	0x240019a0
 800bde0:	2400199c 	.word	0x2400199c
 800bde4:	08013a78 	.word	0x08013a78
 800bde8:	240019a9 	.word	0x240019a9
 800bdec:	24004c68 	.word	0x24004c68
 800bdf0:	2400198c 	.word	0x2400198c
 800bdf4:	08013a98 	.word	0x08013a98
 800bdf8:	08013ab0 	.word	0x08013ab0
        } else {
          pcb->rtime = 0;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00a      	beq.n	800be2a <tcp_process+0x30a>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	6910      	ldr	r0, [r2, #16]
 800be1e:	2200      	movs	r2, #0
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4798      	blx	r3
 800be24:	4603      	mov	r3, r0
 800be26:	76bb      	strb	r3, [r7, #26]
 800be28:	e001      	b.n	800be2e <tcp_process+0x30e>
 800be2a:	2300      	movs	r3, #0
 800be2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800be2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800be32:	f113 0f0d 	cmn.w	r3, #13
 800be36:	d102      	bne.n	800be3e <tcp_process+0x31e>
          return ERR_ABRT;
 800be38:	f06f 030c 	mvn.w	r3, #12
 800be3c:	e250      	b.n	800c2e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	8b5b      	ldrh	r3, [r3, #26]
 800be42:	f043 0302 	orr.w	r3, r3, #2
 800be46:	b29a      	uxth	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800be4c:	e23a      	b.n	800c2c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800be4e:	4b9d      	ldr	r3, [pc, #628]	; (800c0c4 <tcp_process+0x5a4>)
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	f003 0310 	and.w	r3, r3, #16
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 8234 	beq.w	800c2c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be5c:	4b9a      	ldr	r3, [pc, #616]	; (800c0c8 <tcp_process+0x5a8>)
 800be5e:	6819      	ldr	r1, [r3, #0]
 800be60:	4b9a      	ldr	r3, [pc, #616]	; (800c0cc <tcp_process+0x5ac>)
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	461a      	mov	r2, r3
 800be66:	4b9a      	ldr	r3, [pc, #616]	; (800c0d0 <tcp_process+0x5b0>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be6c:	4b99      	ldr	r3, [pc, #612]	; (800c0d4 <tcp_process+0x5b4>)
 800be6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be70:	885b      	ldrh	r3, [r3, #2]
 800be72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be74:	4a97      	ldr	r2, [pc, #604]	; (800c0d4 <tcp_process+0x5b4>)
 800be76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be78:	8812      	ldrh	r2, [r2, #0]
 800be7a:	b292      	uxth	r2, r2
 800be7c:	9202      	str	r2, [sp, #8]
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	4b95      	ldr	r3, [pc, #596]	; (800c0d8 <tcp_process+0x5b8>)
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	4b95      	ldr	r3, [pc, #596]	; (800c0dc <tcp_process+0x5bc>)
 800be86:	4602      	mov	r2, r0
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f002 fc93 	bl	800e7b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be94:	2b05      	cmp	r3, #5
 800be96:	f200 8215 	bhi.w	800c2c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f002 fa51 	bl	800e348 <tcp_rexmit_rto>
      break;
 800bea6:	e20d      	b.n	800c2c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bea8:	4b86      	ldr	r3, [pc, #536]	; (800c0c4 <tcp_process+0x5a4>)
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	f003 0310 	and.w	r3, r3, #16
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 80a1 	beq.w	800bff8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800beb6:	4b84      	ldr	r3, [pc, #528]	; (800c0c8 <tcp_process+0x5a8>)
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	3b01      	subs	r3, #1
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	db7e      	blt.n	800bfc4 <tcp_process+0x4a4>
 800bec6:	4b80      	ldr	r3, [pc, #512]	; (800c0c8 <tcp_process+0x5a8>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	dc77      	bgt.n	800bfc4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2204      	movs	r2, #4
 800bed8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d102      	bne.n	800bee8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bee2:	23fa      	movs	r3, #250	; 0xfa
 800bee4:	76bb      	strb	r3, [r7, #26]
 800bee6:	e01d      	b.n	800bf24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d106      	bne.n	800bf00 <tcp_process+0x3e0>
 800bef2:	4b7b      	ldr	r3, [pc, #492]	; (800c0e0 <tcp_process+0x5c0>)
 800bef4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bef8:	497a      	ldr	r1, [pc, #488]	; (800c0e4 <tcp_process+0x5c4>)
 800befa:	487b      	ldr	r0, [pc, #492]	; (800c0e8 <tcp_process+0x5c8>)
 800befc:	f005 fc44 	bl	8011788 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <tcp_process+0x400>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf0e:	699b      	ldr	r3, [r3, #24]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	6910      	ldr	r0, [r2, #16]
 800bf14:	2200      	movs	r2, #0
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	4798      	blx	r3
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	76bb      	strb	r3, [r7, #26]
 800bf1e:	e001      	b.n	800bf24 <tcp_process+0x404>
 800bf20:	23f0      	movs	r3, #240	; 0xf0
 800bf22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bf24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00a      	beq.n	800bf42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bf2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bf30:	f113 0f0d 	cmn.w	r3, #13
 800bf34:	d002      	beq.n	800bf3c <tcp_process+0x41c>
              tcp_abort(pcb);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7fd ff94 	bl	8009e64 <tcp_abort>
            }
            return ERR_ABRT;
 800bf3c:	f06f 030c 	mvn.w	r3, #12
 800bf40:	e1ce      	b.n	800c2e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fae0 	bl	800c508 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bf48:	4b68      	ldr	r3, [pc, #416]	; (800c0ec <tcp_process+0x5cc>)
 800bf4a:	881b      	ldrh	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d005      	beq.n	800bf5c <tcp_process+0x43c>
            recv_acked--;
 800bf50:	4b66      	ldr	r3, [pc, #408]	; (800c0ec <tcp_process+0x5cc>)
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	4b64      	ldr	r3, [pc, #400]	; (800c0ec <tcp_process+0x5cc>)
 800bf5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf60:	009a      	lsls	r2, r3, #2
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf66:	005b      	lsls	r3, r3, #1
 800bf68:	f241 111c 	movw	r1, #4380	; 0x111c
 800bf6c:	428b      	cmp	r3, r1
 800bf6e:	bf38      	it	cc
 800bf70:	460b      	movcc	r3, r1
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d204      	bcs.n	800bf80 <tcp_process+0x460>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	e00d      	b.n	800bf9c <tcp_process+0x47c>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	f241 121c 	movw	r2, #4380	; 0x111c
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d904      	bls.n	800bf98 <tcp_process+0x478>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	e001      	b.n	800bf9c <tcp_process+0x47c>
 800bf98:	f241 131c 	movw	r3, #4380	; 0x111c
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800bfa2:	4b53      	ldr	r3, [pc, #332]	; (800c0f0 <tcp_process+0x5d0>)
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d037      	beq.n	800c01e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	8b5b      	ldrh	r3, [r3, #26]
 800bfb2:	f043 0302 	orr.w	r3, r3, #2
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2207      	movs	r2, #7
 800bfc0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bfc2:	e02c      	b.n	800c01e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfc4:	4b40      	ldr	r3, [pc, #256]	; (800c0c8 <tcp_process+0x5a8>)
 800bfc6:	6819      	ldr	r1, [r3, #0]
 800bfc8:	4b40      	ldr	r3, [pc, #256]	; (800c0cc <tcp_process+0x5ac>)
 800bfca:	881b      	ldrh	r3, [r3, #0]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	4b40      	ldr	r3, [pc, #256]	; (800c0d0 <tcp_process+0x5b0>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfd4:	4b3f      	ldr	r3, [pc, #252]	; (800c0d4 <tcp_process+0x5b4>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfd8:	885b      	ldrh	r3, [r3, #2]
 800bfda:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfdc:	4a3d      	ldr	r2, [pc, #244]	; (800c0d4 <tcp_process+0x5b4>)
 800bfde:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfe0:	8812      	ldrh	r2, [r2, #0]
 800bfe2:	b292      	uxth	r2, r2
 800bfe4:	9202      	str	r2, [sp, #8]
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	4b3b      	ldr	r3, [pc, #236]	; (800c0d8 <tcp_process+0x5b8>)
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	4b3b      	ldr	r3, [pc, #236]	; (800c0dc <tcp_process+0x5bc>)
 800bfee:	4602      	mov	r2, r0
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f002 fbdf 	bl	800e7b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800bff6:	e167      	b.n	800c2c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bff8:	4b32      	ldr	r3, [pc, #200]	; (800c0c4 <tcp_process+0x5a4>)
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	f003 0302 	and.w	r3, r3, #2
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 8161 	beq.w	800c2c8 <tcp_process+0x7a8>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00a:	1e5a      	subs	r2, r3, #1
 800c00c:	4b30      	ldr	r3, [pc, #192]	; (800c0d0 <tcp_process+0x5b0>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	429a      	cmp	r2, r3
 800c012:	f040 8159 	bne.w	800c2c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f002 f9b8 	bl	800e38c <tcp_rexmit>
      break;
 800c01c:	e154      	b.n	800c2c8 <tcp_process+0x7a8>
 800c01e:	e153      	b.n	800c2c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fa71 	bl	800c508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c026:	4b32      	ldr	r3, [pc, #200]	; (800c0f0 <tcp_process+0x5d0>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	f003 0320 	and.w	r3, r3, #32
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f000 814c 	beq.w	800c2cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	8b5b      	ldrh	r3, [r3, #26]
 800c038:	f043 0302 	orr.w	r3, r3, #2
 800c03c:	b29a      	uxth	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2207      	movs	r2, #7
 800c046:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c048:	e140      	b.n	800c2cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fa5c 	bl	800c508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c050:	4b27      	ldr	r3, [pc, #156]	; (800c0f0 <tcp_process+0x5d0>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	f003 0320 	and.w	r3, r3, #32
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d071      	beq.n	800c140 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c05c:	4b19      	ldr	r3, [pc, #100]	; (800c0c4 <tcp_process+0x5a4>)
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	f003 0310 	and.w	r3, r3, #16
 800c064:	2b00      	cmp	r3, #0
 800c066:	d060      	beq.n	800c12a <tcp_process+0x60a>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c06c:	4b16      	ldr	r3, [pc, #88]	; (800c0c8 <tcp_process+0x5a8>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	429a      	cmp	r2, r3
 800c072:	d15a      	bne.n	800c12a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d156      	bne.n	800c12a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	8b5b      	ldrh	r3, [r3, #26]
 800c080:	f043 0302 	orr.w	r3, r3, #2
 800c084:	b29a      	uxth	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7fe fdbe 	bl	800ac0c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c090:	4b18      	ldr	r3, [pc, #96]	; (800c0f4 <tcp_process+0x5d4>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	429a      	cmp	r2, r3
 800c098:	d105      	bne.n	800c0a6 <tcp_process+0x586>
 800c09a:	4b16      	ldr	r3, [pc, #88]	; (800c0f4 <tcp_process+0x5d4>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	4a14      	ldr	r2, [pc, #80]	; (800c0f4 <tcp_process+0x5d4>)
 800c0a2:	6013      	str	r3, [r2, #0]
 800c0a4:	e02e      	b.n	800c104 <tcp_process+0x5e4>
 800c0a6:	4b13      	ldr	r3, [pc, #76]	; (800c0f4 <tcp_process+0x5d4>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	617b      	str	r3, [r7, #20]
 800c0ac:	e027      	b.n	800c0fe <tcp_process+0x5de>
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d11f      	bne.n	800c0f8 <tcp_process+0x5d8>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	60da      	str	r2, [r3, #12]
 800c0c0:	e020      	b.n	800c104 <tcp_process+0x5e4>
 800c0c2:	bf00      	nop
 800c0c4:	240019a8 	.word	0x240019a8
 800c0c8:	240019a0 	.word	0x240019a0
 800c0cc:	240019a6 	.word	0x240019a6
 800c0d0:	2400199c 	.word	0x2400199c
 800c0d4:	2400198c 	.word	0x2400198c
 800c0d8:	24001d84 	.word	0x24001d84
 800c0dc:	24001d88 	.word	0x24001d88
 800c0e0:	08013824 	.word	0x08013824
 800c0e4:	08013ac4 	.word	0x08013ac4
 800c0e8:	08013870 	.word	0x08013870
 800c0ec:	240019a4 	.word	0x240019a4
 800c0f0:	240019a9 	.word	0x240019a9
 800c0f4:	24004c64 	.word	0x24004c64
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	617b      	str	r3, [r7, #20]
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1d4      	bne.n	800c0ae <tcp_process+0x58e>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	60da      	str	r2, [r3, #12]
 800c10a:	4b77      	ldr	r3, [pc, #476]	; (800c2e8 <tcp_process+0x7c8>)
 800c10c:	2201      	movs	r2, #1
 800c10e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	220a      	movs	r2, #10
 800c114:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c116:	4b75      	ldr	r3, [pc, #468]	; (800c2ec <tcp_process+0x7cc>)
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	60da      	str	r2, [r3, #12]
 800c11e:	4a73      	ldr	r2, [pc, #460]	; (800c2ec <tcp_process+0x7cc>)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	f002 fd08 	bl	800eb38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c128:	e0d2      	b.n	800c2d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	8b5b      	ldrh	r3, [r3, #26]
 800c12e:	f043 0302 	orr.w	r3, r3, #2
 800c132:	b29a      	uxth	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2208      	movs	r2, #8
 800c13c:	751a      	strb	r2, [r3, #20]
      break;
 800c13e:	e0c7      	b.n	800c2d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c140:	4b6b      	ldr	r3, [pc, #428]	; (800c2f0 <tcp_process+0x7d0>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	f003 0310 	and.w	r3, r3, #16
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f000 80c1 	beq.w	800c2d0 <tcp_process+0x7b0>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c152:	4b68      	ldr	r3, [pc, #416]	; (800c2f4 <tcp_process+0x7d4>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	429a      	cmp	r2, r3
 800c158:	f040 80ba 	bne.w	800c2d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c160:	2b00      	cmp	r3, #0
 800c162:	f040 80b5 	bne.w	800c2d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2206      	movs	r2, #6
 800c16a:	751a      	strb	r2, [r3, #20]
      break;
 800c16c:	e0b0      	b.n	800c2d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f9ca 	bl	800c508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c174:	4b60      	ldr	r3, [pc, #384]	; (800c2f8 <tcp_process+0x7d8>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	f003 0320 	and.w	r3, r3, #32
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 80a9 	beq.w	800c2d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	8b5b      	ldrh	r3, [r3, #26]
 800c186:	f043 0302 	orr.w	r3, r3, #2
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7fe fd3b 	bl	800ac0c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c196:	4b59      	ldr	r3, [pc, #356]	; (800c2fc <tcp_process+0x7dc>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d105      	bne.n	800c1ac <tcp_process+0x68c>
 800c1a0:	4b56      	ldr	r3, [pc, #344]	; (800c2fc <tcp_process+0x7dc>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	4a55      	ldr	r2, [pc, #340]	; (800c2fc <tcp_process+0x7dc>)
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	e013      	b.n	800c1d4 <tcp_process+0x6b4>
 800c1ac:	4b53      	ldr	r3, [pc, #332]	; (800c2fc <tcp_process+0x7dc>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	613b      	str	r3, [r7, #16]
 800c1b2:	e00c      	b.n	800c1ce <tcp_process+0x6ae>
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d104      	bne.n	800c1c8 <tcp_process+0x6a8>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	60da      	str	r2, [r3, #12]
 800c1c6:	e005      	b.n	800c1d4 <tcp_process+0x6b4>
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	613b      	str	r3, [r7, #16]
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1ef      	bne.n	800c1b4 <tcp_process+0x694>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	60da      	str	r2, [r3, #12]
 800c1da:	4b43      	ldr	r3, [pc, #268]	; (800c2e8 <tcp_process+0x7c8>)
 800c1dc:	2201      	movs	r2, #1
 800c1de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	220a      	movs	r2, #10
 800c1e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c1e6:	4b41      	ldr	r3, [pc, #260]	; (800c2ec <tcp_process+0x7cc>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	60da      	str	r2, [r3, #12]
 800c1ee:	4a3f      	ldr	r2, [pc, #252]	; (800c2ec <tcp_process+0x7cc>)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6013      	str	r3, [r2, #0]
 800c1f4:	f002 fca0 	bl	800eb38 <tcp_timer_needed>
      }
      break;
 800c1f8:	e06c      	b.n	800c2d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f984 	bl	800c508 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c200:	4b3b      	ldr	r3, [pc, #236]	; (800c2f0 <tcp_process+0x7d0>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	f003 0310 	and.w	r3, r3, #16
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d065      	beq.n	800c2d8 <tcp_process+0x7b8>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c210:	4b38      	ldr	r3, [pc, #224]	; (800c2f4 <tcp_process+0x7d4>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	429a      	cmp	r2, r3
 800c216:	d15f      	bne.n	800c2d8 <tcp_process+0x7b8>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d15b      	bne.n	800c2d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7fe fcf3 	bl	800ac0c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c226:	4b35      	ldr	r3, [pc, #212]	; (800c2fc <tcp_process+0x7dc>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d105      	bne.n	800c23c <tcp_process+0x71c>
 800c230:	4b32      	ldr	r3, [pc, #200]	; (800c2fc <tcp_process+0x7dc>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	4a31      	ldr	r2, [pc, #196]	; (800c2fc <tcp_process+0x7dc>)
 800c238:	6013      	str	r3, [r2, #0]
 800c23a:	e013      	b.n	800c264 <tcp_process+0x744>
 800c23c:	4b2f      	ldr	r3, [pc, #188]	; (800c2fc <tcp_process+0x7dc>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	e00c      	b.n	800c25e <tcp_process+0x73e>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d104      	bne.n	800c258 <tcp_process+0x738>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	60da      	str	r2, [r3, #12]
 800c256:	e005      	b.n	800c264 <tcp_process+0x744>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1ef      	bne.n	800c244 <tcp_process+0x724>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	60da      	str	r2, [r3, #12]
 800c26a:	4b1f      	ldr	r3, [pc, #124]	; (800c2e8 <tcp_process+0x7c8>)
 800c26c:	2201      	movs	r2, #1
 800c26e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	220a      	movs	r2, #10
 800c274:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c276:	4b1d      	ldr	r3, [pc, #116]	; (800c2ec <tcp_process+0x7cc>)
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	4a1b      	ldr	r2, [pc, #108]	; (800c2ec <tcp_process+0x7cc>)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6013      	str	r3, [r2, #0]
 800c284:	f002 fc58 	bl	800eb38 <tcp_timer_needed>
      }
      break;
 800c288:	e026      	b.n	800c2d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f93c 	bl	800c508 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c290:	4b17      	ldr	r3, [pc, #92]	; (800c2f0 <tcp_process+0x7d0>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	f003 0310 	and.w	r3, r3, #16
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d01f      	beq.n	800c2dc <tcp_process+0x7bc>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2a0:	4b14      	ldr	r3, [pc, #80]	; (800c2f4 <tcp_process+0x7d4>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d119      	bne.n	800c2dc <tcp_process+0x7bc>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d115      	bne.n	800c2dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c2b0:	4b11      	ldr	r3, [pc, #68]	; (800c2f8 <tcp_process+0x7d8>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	f043 0310 	orr.w	r3, r3, #16
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	4b0f      	ldr	r3, [pc, #60]	; (800c2f8 <tcp_process+0x7d8>)
 800c2bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c2be:	e00d      	b.n	800c2dc <tcp_process+0x7bc>
    default:
      break;
 800c2c0:	bf00      	nop
 800c2c2:	e00c      	b.n	800c2de <tcp_process+0x7be>
      break;
 800c2c4:	bf00      	nop
 800c2c6:	e00a      	b.n	800c2de <tcp_process+0x7be>
      break;
 800c2c8:	bf00      	nop
 800c2ca:	e008      	b.n	800c2de <tcp_process+0x7be>
      break;
 800c2cc:	bf00      	nop
 800c2ce:	e006      	b.n	800c2de <tcp_process+0x7be>
      break;
 800c2d0:	bf00      	nop
 800c2d2:	e004      	b.n	800c2de <tcp_process+0x7be>
      break;
 800c2d4:	bf00      	nop
 800c2d6:	e002      	b.n	800c2de <tcp_process+0x7be>
      break;
 800c2d8:	bf00      	nop
 800c2da:	e000      	b.n	800c2de <tcp_process+0x7be>
      break;
 800c2dc:	bf00      	nop
  }
  return ERR_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3724      	adds	r7, #36	; 0x24
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd90      	pop	{r4, r7, pc}
 800c2e8:	24004c60 	.word	0x24004c60
 800c2ec:	24004c74 	.word	0x24004c74
 800c2f0:	240019a8 	.word	0x240019a8
 800c2f4:	240019a0 	.word	0x240019a0
 800c2f8:	240019a9 	.word	0x240019a9
 800c2fc:	24004c64 	.word	0x24004c64

0800c300 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c300:	b590      	push	{r4, r7, lr}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d106      	bne.n	800c31e <tcp_oos_insert_segment+0x1e>
 800c310:	4b3b      	ldr	r3, [pc, #236]	; (800c400 <tcp_oos_insert_segment+0x100>)
 800c312:	f240 421f 	movw	r2, #1055	; 0x41f
 800c316:	493b      	ldr	r1, [pc, #236]	; (800c404 <tcp_oos_insert_segment+0x104>)
 800c318:	483b      	ldr	r0, [pc, #236]	; (800c408 <tcp_oos_insert_segment+0x108>)
 800c31a:	f005 fa35 	bl	8011788 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	899b      	ldrh	r3, [r3, #12]
 800c324:	b29b      	uxth	r3, r3
 800c326:	4618      	mov	r0, r3
 800c328:	f7fb fc2e 	bl	8007b88 <lwip_htons>
 800c32c:	4603      	mov	r3, r0
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	f003 0301 	and.w	r3, r3, #1
 800c334:	2b00      	cmp	r3, #0
 800c336:	d028      	beq.n	800c38a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c338:	6838      	ldr	r0, [r7, #0]
 800c33a:	f7fe fa67 	bl	800a80c <tcp_segs_free>
    next = NULL;
 800c33e:	2300      	movs	r3, #0
 800c340:	603b      	str	r3, [r7, #0]
 800c342:	e056      	b.n	800c3f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	899b      	ldrh	r3, [r3, #12]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fb fc1b 	bl	8007b88 <lwip_htons>
 800c352:	4603      	mov	r3, r0
 800c354:	b2db      	uxtb	r3, r3
 800c356:	f003 0301 	and.w	r3, r3, #1
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00d      	beq.n	800c37a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	899b      	ldrh	r3, [r3, #12]
 800c364:	b29c      	uxth	r4, r3
 800c366:	2001      	movs	r0, #1
 800c368:	f7fb fc0e 	bl	8007b88 <lwip_htons>
 800c36c:	4603      	mov	r3, r0
 800c36e:	461a      	mov	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	4322      	orrs	r2, r4
 800c376:	b292      	uxth	r2, r2
 800c378:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f7fe fa55 	bl	800a834 <tcp_seg_free>
    while (next &&
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00e      	beq.n	800c3ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	891b      	ldrh	r3, [r3, #8]
 800c394:	461a      	mov	r2, r3
 800c396:	4b1d      	ldr	r3, [pc, #116]	; (800c40c <tcp_oos_insert_segment+0x10c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	441a      	add	r2, r3
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	8909      	ldrh	r1, [r1, #8]
 800c3a6:	440b      	add	r3, r1
 800c3a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	daca      	bge.n	800c344 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d01e      	beq.n	800c3f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	891b      	ldrh	r3, [r3, #8]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	4b14      	ldr	r3, [pc, #80]	; (800c40c <tcp_oos_insert_segment+0x10c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	441a      	add	r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	dd12      	ble.n	800c3f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	4b0d      	ldr	r3, [pc, #52]	; (800c40c <tcp_oos_insert_segment+0x10c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	685a      	ldr	r2, [r3, #4]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	891b      	ldrh	r3, [r3, #8]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f7fc fe33 	bl	8009058 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	601a      	str	r2, [r3, #0]
}
 800c3f8:	bf00      	nop
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd90      	pop	{r4, r7, pc}
 800c400:	08013824 	.word	0x08013824
 800c404:	08013ae4 	.word	0x08013ae4
 800c408:	08013870 	.word	0x08013870
 800c40c:	2400199c 	.word	0x2400199c

0800c410 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c410:	b5b0      	push	{r4, r5, r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
 800c41c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c41e:	e03e      	b.n	800c49e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fd f820 	bl	8009474 <pbuf_clen>
 800c434:	4603      	mov	r3, r0
 800c436:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c43e:	8a7a      	ldrh	r2, [r7, #18]
 800c440:	429a      	cmp	r2, r3
 800c442:	d906      	bls.n	800c452 <tcp_free_acked_segments+0x42>
 800c444:	4b2a      	ldr	r3, [pc, #168]	; (800c4f0 <tcp_free_acked_segments+0xe0>)
 800c446:	f240 4257 	movw	r2, #1111	; 0x457
 800c44a:	492a      	ldr	r1, [pc, #168]	; (800c4f4 <tcp_free_acked_segments+0xe4>)
 800c44c:	482a      	ldr	r0, [pc, #168]	; (800c4f8 <tcp_free_acked_segments+0xe8>)
 800c44e:	f005 f99b 	bl	8011788 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c458:	8a7b      	ldrh	r3, [r7, #18]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	891a      	ldrh	r2, [r3, #8]
 800c468:	4b24      	ldr	r3, [pc, #144]	; (800c4fc <tcp_free_acked_segments+0xec>)
 800c46a:	881b      	ldrh	r3, [r3, #0]
 800c46c:	4413      	add	r3, r2
 800c46e:	b29a      	uxth	r2, r3
 800c470:	4b22      	ldr	r3, [pc, #136]	; (800c4fc <tcp_free_acked_segments+0xec>)
 800c472:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c474:	6978      	ldr	r0, [r7, #20]
 800c476:	f7fe f9dd 	bl	800a834 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00c      	beq.n	800c49e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <tcp_free_acked_segments+0x8e>
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d106      	bne.n	800c49e <tcp_free_acked_segments+0x8e>
 800c490:	4b17      	ldr	r3, [pc, #92]	; (800c4f0 <tcp_free_acked_segments+0xe0>)
 800c492:	f240 4262 	movw	r2, #1122	; 0x462
 800c496:	491a      	ldr	r1, [pc, #104]	; (800c500 <tcp_free_acked_segments+0xf0>)
 800c498:	4817      	ldr	r0, [pc, #92]	; (800c4f8 <tcp_free_acked_segments+0xe8>)
 800c49a:	f005 f975 	bl	8011788 <iprintf>
  while (seg_list != NULL &&
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d020      	beq.n	800c4e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fb fb81 	bl	8007bb2 <lwip_htonl>
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	891b      	ldrh	r3, [r3, #8]
 800c4b6:	461d      	mov	r5, r3
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	899b      	ldrh	r3, [r3, #12]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fb fb61 	bl	8007b88 <lwip_htons>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	f003 0303 	and.w	r3, r3, #3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <tcp_free_acked_segments+0xc6>
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e000      	b.n	800c4d8 <tcp_free_acked_segments+0xc8>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	442b      	add	r3, r5
 800c4da:	18e2      	adds	r2, r4, r3
 800c4dc:	4b09      	ldr	r3, [pc, #36]	; (800c504 <tcp_free_acked_segments+0xf4>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	dd9c      	ble.n	800c420 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c4e6:	68bb      	ldr	r3, [r7, #8]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bdb0      	pop	{r4, r5, r7, pc}
 800c4f0:	08013824 	.word	0x08013824
 800c4f4:	08013b0c 	.word	0x08013b0c
 800c4f8:	08013870 	.word	0x08013870
 800c4fc:	240019a4 	.word	0x240019a4
 800c500:	08013b34 	.word	0x08013b34
 800c504:	240019a0 	.word	0x240019a0

0800c508 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c508:	b5b0      	push	{r4, r5, r7, lr}
 800c50a:	b094      	sub	sp, #80	; 0x50
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d106      	bne.n	800c528 <tcp_receive+0x20>
 800c51a:	4ba6      	ldr	r3, [pc, #664]	; (800c7b4 <tcp_receive+0x2ac>)
 800c51c:	f240 427b 	movw	r2, #1147	; 0x47b
 800c520:	49a5      	ldr	r1, [pc, #660]	; (800c7b8 <tcp_receive+0x2b0>)
 800c522:	48a6      	ldr	r0, [pc, #664]	; (800c7bc <tcp_receive+0x2b4>)
 800c524:	f005 f930 	bl	8011788 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	7d1b      	ldrb	r3, [r3, #20]
 800c52c:	2b03      	cmp	r3, #3
 800c52e:	d806      	bhi.n	800c53e <tcp_receive+0x36>
 800c530:	4ba0      	ldr	r3, [pc, #640]	; (800c7b4 <tcp_receive+0x2ac>)
 800c532:	f240 427c 	movw	r2, #1148	; 0x47c
 800c536:	49a2      	ldr	r1, [pc, #648]	; (800c7c0 <tcp_receive+0x2b8>)
 800c538:	48a0      	ldr	r0, [pc, #640]	; (800c7bc <tcp_receive+0x2b4>)
 800c53a:	f005 f925 	bl	8011788 <iprintf>

  if (flags & TCP_ACK) {
 800c53e:	4ba1      	ldr	r3, [pc, #644]	; (800c7c4 <tcp_receive+0x2bc>)
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	f003 0310 	and.w	r3, r3, #16
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 8263 	beq.w	800ca12 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c552:	461a      	mov	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c558:	4413      	add	r3, r2
 800c55a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c560:	4b99      	ldr	r3, [pc, #612]	; (800c7c8 <tcp_receive+0x2c0>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	db1b      	blt.n	800c5a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c56e:	4b96      	ldr	r3, [pc, #600]	; (800c7c8 <tcp_receive+0x2c0>)
 800c570:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c572:	429a      	cmp	r2, r3
 800c574:	d106      	bne.n	800c584 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c57a:	4b94      	ldr	r3, [pc, #592]	; (800c7cc <tcp_receive+0x2c4>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	db0e      	blt.n	800c5a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c588:	4b90      	ldr	r3, [pc, #576]	; (800c7cc <tcp_receive+0x2c4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d125      	bne.n	800c5dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c590:	4b8f      	ldr	r3, [pc, #572]	; (800c7d0 <tcp_receive+0x2c8>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	89db      	ldrh	r3, [r3, #14]
 800c596:	b29a      	uxth	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d91c      	bls.n	800c5dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5a2:	4b8b      	ldr	r3, [pc, #556]	; (800c7d0 <tcp_receive+0x2c8>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	89db      	ldrh	r3, [r3, #14]
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d205      	bcs.n	800c5cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c5cc:	4b7e      	ldr	r3, [pc, #504]	; (800c7c8 <tcp_receive+0x2c0>)
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c5d4:	4b7d      	ldr	r3, [pc, #500]	; (800c7cc <tcp_receive+0x2c4>)
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c5dc:	4b7b      	ldr	r3, [pc, #492]	; (800c7cc <tcp_receive+0x2c4>)
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	dc58      	bgt.n	800c69c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c5ea:	4b7a      	ldr	r3, [pc, #488]	; (800c7d4 <tcp_receive+0x2cc>)
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d14b      	bne.n	800c68a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c5fc:	4413      	add	r3, r2
 800c5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c600:	429a      	cmp	r2, r3
 800c602:	d142      	bne.n	800c68a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	db3d      	blt.n	800c68a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c612:	4b6e      	ldr	r3, [pc, #440]	; (800c7cc <tcp_receive+0x2c4>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	d137      	bne.n	800c68a <tcp_receive+0x182>
              found_dupack = 1;
 800c61a:	2301      	movs	r3, #1
 800c61c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c624:	2bff      	cmp	r3, #255	; 0xff
 800c626:	d007      	beq.n	800c638 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c62e:	3301      	adds	r3, #1
 800c630:	b2da      	uxtb	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d91b      	bls.n	800c67a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c64c:	4413      	add	r3, r2
 800c64e:	b29a      	uxth	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c656:	429a      	cmp	r2, r3
 800c658:	d30a      	bcc.n	800c670 <tcp_receive+0x168>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c664:	4413      	add	r3, r2
 800c666:	b29a      	uxth	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c66e:	e004      	b.n	800c67a <tcp_receive+0x172>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c676:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c680:	2b02      	cmp	r3, #2
 800c682:	d902      	bls.n	800c68a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f001 feed 	bl	800e464 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f040 8160 	bne.w	800c952 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c69a:	e15a      	b.n	800c952 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c69c:	4b4b      	ldr	r3, [pc, #300]	; (800c7cc <tcp_receive+0x2c4>)
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f2c0 814d 	blt.w	800c948 <tcp_receive+0x440>
 800c6ae:	4b47      	ldr	r3, [pc, #284]	; (800c7cc <tcp_receive+0x2c4>)
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f300 8145 	bgt.w	800c948 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	8b5b      	ldrh	r3, [r3, #26]
 800c6c2:	f003 0304 	and.w	r3, r3, #4
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d010      	beq.n	800c6ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	8b5b      	ldrh	r3, [r3, #26]
 800c6ce:	f023 0304 	bic.w	r3, r3, #4
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c6fa:	10db      	asrs	r3, r3, #3
 800c6fc:	b21b      	sxth	r3, r3
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c706:	b29b      	uxth	r3, r3
 800c708:	4413      	add	r3, r2
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	b21a      	sxth	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c714:	4b2d      	ldr	r3, [pc, #180]	; (800c7cc <tcp_receive+0x2c4>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	b29a      	uxth	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c71e:	b29b      	uxth	r3, r3
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c72c:	4b27      	ldr	r3, [pc, #156]	; (800c7cc <tcp_receive+0x2c4>)
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	7d1b      	ldrb	r3, [r3, #20]
 800c738:	2b03      	cmp	r3, #3
 800c73a:	f240 8096 	bls.w	800c86a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d244      	bcs.n	800c7d8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	8b5b      	ldrh	r3, [r3, #26]
 800c752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c756:	2b00      	cmp	r3, #0
 800c758:	d001      	beq.n	800c75e <tcp_receive+0x256>
 800c75a:	2301      	movs	r3, #1
 800c75c:	e000      	b.n	800c760 <tcp_receive+0x258>
 800c75e:	2302      	movs	r3, #2
 800c760:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c764:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c768:	b29a      	uxth	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c76e:	fb12 f303 	smulbb	r3, r2, r3
 800c772:	b29b      	uxth	r3, r3
 800c774:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c776:	4293      	cmp	r3, r2
 800c778:	bf28      	it	cs
 800c77a:	4613      	movcs	r3, r2
 800c77c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c784:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c786:	4413      	add	r3, r2
 800c788:	b29a      	uxth	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c790:	429a      	cmp	r2, r3
 800c792:	d309      	bcc.n	800c7a8 <tcp_receive+0x2a0>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c79a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c79c:	4413      	add	r3, r2
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c7a6:	e060      	b.n	800c86a <tcp_receive+0x362>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c7b2:	e05a      	b.n	800c86a <tcp_receive+0x362>
 800c7b4:	08013824 	.word	0x08013824
 800c7b8:	08013b54 	.word	0x08013b54
 800c7bc:	08013870 	.word	0x08013870
 800c7c0:	08013b70 	.word	0x08013b70
 800c7c4:	240019a8 	.word	0x240019a8
 800c7c8:	2400199c 	.word	0x2400199c
 800c7cc:	240019a0 	.word	0x240019a0
 800c7d0:	2400198c 	.word	0x2400198c
 800c7d4:	240019a6 	.word	0x240019a6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c7de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7e0:	4413      	add	r3, r2
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d309      	bcc.n	800c802 <tcp_receive+0x2fa>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c7f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7f6:	4413      	add	r3, r2
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c800:	e004      	b.n	800c80c <tcp_receive+0x304>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c818:	429a      	cmp	r2, r3
 800c81a:	d326      	bcc.n	800c86a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c83c:	4413      	add	r3, r2
 800c83e:	b29a      	uxth	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c846:	429a      	cmp	r2, r3
 800c848:	d30a      	bcc.n	800c860 <tcp_receive+0x358>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c854:	4413      	add	r3, r2
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c85e:	e004      	b.n	800c86a <tcp_receive+0x362>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c866:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c872:	4a98      	ldr	r2, [pc, #608]	; (800cad4 <tcp_receive+0x5cc>)
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff fdcb 	bl	800c410 <tcp_free_acked_segments>
 800c87a:	4602      	mov	r2, r0
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c888:	4a93      	ldr	r2, [pc, #588]	; (800cad8 <tcp_receive+0x5d0>)
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7ff fdc0 	bl	800c410 <tcp_free_acked_segments>
 800c890:	4602      	mov	r2, r0
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d104      	bne.n	800c8a8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8a4:	861a      	strh	r2, [r3, #48]	; 0x30
 800c8a6:	e002      	b.n	800c8ae <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d103      	bne.n	800c8c4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c8ca:	4b84      	ldr	r3, [pc, #528]	; (800cadc <tcp_receive+0x5d4>)
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	8b5b      	ldrh	r3, [r3, #26]
 800c8dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d035      	beq.n	800c950 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d118      	bne.n	800c91e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00c      	beq.n	800c90e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4618      	mov	r0, r3
 800c902:	f7fb f956 	bl	8007bb2 <lwip_htonl>
 800c906:	4603      	mov	r3, r0
 800c908:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	dc20      	bgt.n	800c950 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	8b5b      	ldrh	r3, [r3, #26]
 800c912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c916:	b29a      	uxth	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c91c:	e018      	b.n	800c950 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fb f941 	bl	8007bb2 <lwip_htonl>
 800c930:	4603      	mov	r3, r0
 800c932:	1ae3      	subs	r3, r4, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	dc0b      	bgt.n	800c950 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	8b5b      	ldrh	r3, [r3, #26]
 800c93c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c940:	b29a      	uxth	r2, r3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c946:	e003      	b.n	800c950 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f001 ff85 	bl	800e858 <tcp_send_empty_ack>
 800c94e:	e000      	b.n	800c952 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c950:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c956:	2b00      	cmp	r3, #0
 800c958:	d05b      	beq.n	800ca12 <tcp_receive+0x50a>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c95e:	4b60      	ldr	r3, [pc, #384]	; (800cae0 <tcp_receive+0x5d8>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	1ad3      	subs	r3, r2, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	da54      	bge.n	800ca12 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c968:	4b5e      	ldr	r3, [pc, #376]	; (800cae4 <tcp_receive+0x5dc>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c972:	b29b      	uxth	r3, r3
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	b29b      	uxth	r3, r3
 800c978:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c97c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c986:	10db      	asrs	r3, r3, #3
 800c988:	b21b      	sxth	r3, r3
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	b29b      	uxth	r3, r3
 800c990:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c9a0:	4413      	add	r3, r2
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	b21a      	sxth	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c9aa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	da05      	bge.n	800c9be <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c9b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c9b6:	425b      	negs	r3, r3
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c9be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c9c8:	109b      	asrs	r3, r3, #2
 800c9ca:	b21b      	sxth	r3, r3
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c9e2:	4413      	add	r3, r2
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	b21a      	sxth	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c9f2:	10db      	asrs	r3, r3, #3
 800c9f4:	b21b      	sxth	r3, r3
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	4413      	add	r3, r2
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	b21a      	sxth	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ca12:	4b35      	ldr	r3, [pc, #212]	; (800cae8 <tcp_receive+0x5e0>)
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f000 84e1 	beq.w	800d3de <tcp_receive+0xed6>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	7d1b      	ldrb	r3, [r3, #20]
 800ca20:	2b06      	cmp	r3, #6
 800ca22:	f200 84dc 	bhi.w	800d3de <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca2a:	4b30      	ldr	r3, [pc, #192]	; (800caec <tcp_receive+0x5e4>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	3b01      	subs	r3, #1
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f2c0 808e 	blt.w	800cb54 <tcp_receive+0x64c>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca3c:	4b2a      	ldr	r3, [pc, #168]	; (800cae8 <tcp_receive+0x5e0>)
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	4619      	mov	r1, r3
 800ca42:	4b2a      	ldr	r3, [pc, #168]	; (800caec <tcp_receive+0x5e4>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	440b      	add	r3, r1
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f300 8081 	bgt.w	800cb54 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ca52:	4b27      	ldr	r3, [pc, #156]	; (800caf0 <tcp_receive+0x5e8>)
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca5c:	4b23      	ldr	r3, [pc, #140]	; (800caec <tcp_receive+0x5e4>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ca64:	4b22      	ldr	r3, [pc, #136]	; (800caf0 <tcp_receive+0x5e8>)
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d106      	bne.n	800ca7a <tcp_receive+0x572>
 800ca6c:	4b21      	ldr	r3, [pc, #132]	; (800caf4 <tcp_receive+0x5ec>)
 800ca6e:	f240 5294 	movw	r2, #1428	; 0x594
 800ca72:	4921      	ldr	r1, [pc, #132]	; (800caf8 <tcp_receive+0x5f0>)
 800ca74:	4821      	ldr	r0, [pc, #132]	; (800cafc <tcp_receive+0x5f4>)
 800ca76:	f004 fe87 	bl	8011788 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d906      	bls.n	800ca92 <tcp_receive+0x58a>
 800ca84:	4b1b      	ldr	r3, [pc, #108]	; (800caf4 <tcp_receive+0x5ec>)
 800ca86:	f240 5295 	movw	r2, #1429	; 0x595
 800ca8a:	491d      	ldr	r1, [pc, #116]	; (800cb00 <tcp_receive+0x5f8>)
 800ca8c:	481b      	ldr	r0, [pc, #108]	; (800cafc <tcp_receive+0x5f4>)
 800ca8e:	f004 fe7b 	bl	8011788 <iprintf>
      off = (u16_t)off32;
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ca98:	4b15      	ldr	r3, [pc, #84]	; (800caf0 <tcp_receive+0x5e8>)
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	891b      	ldrh	r3, [r3, #8]
 800ca9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d906      	bls.n	800cab4 <tcp_receive+0x5ac>
 800caa6:	4b13      	ldr	r3, [pc, #76]	; (800caf4 <tcp_receive+0x5ec>)
 800caa8:	f240 5297 	movw	r2, #1431	; 0x597
 800caac:	4915      	ldr	r1, [pc, #84]	; (800cb04 <tcp_receive+0x5fc>)
 800caae:	4813      	ldr	r0, [pc, #76]	; (800cafc <tcp_receive+0x5f4>)
 800cab0:	f004 fe6a 	bl	8011788 <iprintf>
      inseg.len -= off;
 800cab4:	4b0e      	ldr	r3, [pc, #56]	; (800caf0 <tcp_receive+0x5e8>)
 800cab6:	891a      	ldrh	r2, [r3, #8]
 800cab8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cabc:	1ad3      	subs	r3, r2, r3
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	4b0b      	ldr	r3, [pc, #44]	; (800caf0 <tcp_receive+0x5e8>)
 800cac2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cac4:	4b0a      	ldr	r3, [pc, #40]	; (800caf0 <tcp_receive+0x5e8>)
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	891a      	ldrh	r2, [r3, #8]
 800caca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cad2:	e029      	b.n	800cb28 <tcp_receive+0x620>
 800cad4:	08013b8c 	.word	0x08013b8c
 800cad8:	08013b94 	.word	0x08013b94
 800cadc:	240019a4 	.word	0x240019a4
 800cae0:	240019a0 	.word	0x240019a0
 800cae4:	24004c68 	.word	0x24004c68
 800cae8:	240019a6 	.word	0x240019a6
 800caec:	2400199c 	.word	0x2400199c
 800caf0:	2400197c 	.word	0x2400197c
 800caf4:	08013824 	.word	0x08013824
 800caf8:	08013b9c 	.word	0x08013b9c
 800cafc:	08013870 	.word	0x08013870
 800cb00:	08013bac 	.word	0x08013bac
 800cb04:	08013bbc 	.word	0x08013bbc
        off -= p->len;
 800cb08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb0a:	895b      	ldrh	r3, [r3, #10]
 800cb0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cb16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb18:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb1a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cb1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb1e:	2200      	movs	r2, #0
 800cb20:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cb22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800cb28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb2a:	895b      	ldrh	r3, [r3, #10]
 800cb2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d8e9      	bhi.n	800cb08 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cb34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cb3c:	f7fc fb8c 	bl	8009258 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb44:	4a91      	ldr	r2, [pc, #580]	; (800cd8c <tcp_receive+0x884>)
 800cb46:	6013      	str	r3, [r2, #0]
 800cb48:	4b91      	ldr	r3, [pc, #580]	; (800cd90 <tcp_receive+0x888>)
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	4a8f      	ldr	r2, [pc, #572]	; (800cd8c <tcp_receive+0x884>)
 800cb4e:	6812      	ldr	r2, [r2, #0]
 800cb50:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cb52:	e00d      	b.n	800cb70 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cb54:	4b8d      	ldr	r3, [pc, #564]	; (800cd8c <tcp_receive+0x884>)
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	da06      	bge.n	800cb70 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	8b5b      	ldrh	r3, [r3, #26]
 800cb66:	f043 0302 	orr.w	r3, r3, #2
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cb70:	4b86      	ldr	r3, [pc, #536]	; (800cd8c <tcp_receive+0x884>)
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f2c0 842a 	blt.w	800d3d4 <tcp_receive+0xecc>
 800cb80:	4b82      	ldr	r3, [pc, #520]	; (800cd8c <tcp_receive+0x884>)
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	6879      	ldr	r1, [r7, #4]
 800cb8a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cb8c:	440b      	add	r3, r1
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	3301      	adds	r3, #1
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f300 841e 	bgt.w	800d3d4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb9c:	4b7b      	ldr	r3, [pc, #492]	; (800cd8c <tcp_receive+0x884>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	f040 829a 	bne.w	800d0da <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cba6:	4b7a      	ldr	r3, [pc, #488]	; (800cd90 <tcp_receive+0x888>)
 800cba8:	891c      	ldrh	r4, [r3, #8]
 800cbaa:	4b79      	ldr	r3, [pc, #484]	; (800cd90 <tcp_receive+0x888>)
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	899b      	ldrh	r3, [r3, #12]
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fa ffe8 	bl	8007b88 <lwip_htons>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	f003 0303 	and.w	r3, r3, #3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <tcp_receive+0x6c0>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e000      	b.n	800cbca <tcp_receive+0x6c2>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4423      	add	r3, r4
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	4b71      	ldr	r3, [pc, #452]	; (800cd94 <tcp_receive+0x88c>)
 800cbd0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cbd6:	4b6f      	ldr	r3, [pc, #444]	; (800cd94 <tcp_receive+0x88c>)
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d275      	bcs.n	800ccca <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cbde:	4b6c      	ldr	r3, [pc, #432]	; (800cd90 <tcp_receive+0x888>)
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	899b      	ldrh	r3, [r3, #12]
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fa ffce 	bl	8007b88 <lwip_htons>
 800cbec:	4603      	mov	r3, r0
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	f003 0301 	and.w	r3, r3, #1
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d01f      	beq.n	800cc38 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cbf8:	4b65      	ldr	r3, [pc, #404]	; (800cd90 <tcp_receive+0x888>)
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	899b      	ldrh	r3, [r3, #12]
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	b21b      	sxth	r3, r3
 800cc02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc06:	b21c      	sxth	r4, r3
 800cc08:	4b61      	ldr	r3, [pc, #388]	; (800cd90 <tcp_receive+0x888>)
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	899b      	ldrh	r3, [r3, #12]
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fa ffb9 	bl	8007b88 <lwip_htons>
 800cc16:	4603      	mov	r3, r0
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fa ffb0 	bl	8007b88 <lwip_htons>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	b21b      	sxth	r3, r3
 800cc2c:	4323      	orrs	r3, r4
 800cc2e:	b21a      	sxth	r2, r3
 800cc30:	4b57      	ldr	r3, [pc, #348]	; (800cd90 <tcp_receive+0x888>)
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	b292      	uxth	r2, r2
 800cc36:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc3c:	4b54      	ldr	r3, [pc, #336]	; (800cd90 <tcp_receive+0x888>)
 800cc3e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cc40:	4b53      	ldr	r3, [pc, #332]	; (800cd90 <tcp_receive+0x888>)
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	899b      	ldrh	r3, [r3, #12]
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fa ff9d 	bl	8007b88 <lwip_htons>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	f003 0302 	and.w	r3, r3, #2
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d005      	beq.n	800cc66 <tcp_receive+0x75e>
            inseg.len -= 1;
 800cc5a:	4b4d      	ldr	r3, [pc, #308]	; (800cd90 <tcp_receive+0x888>)
 800cc5c:	891b      	ldrh	r3, [r3, #8]
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	4b4b      	ldr	r3, [pc, #300]	; (800cd90 <tcp_receive+0x888>)
 800cc64:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cc66:	4b4a      	ldr	r3, [pc, #296]	; (800cd90 <tcp_receive+0x888>)
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	4b49      	ldr	r3, [pc, #292]	; (800cd90 <tcp_receive+0x888>)
 800cc6c:	891b      	ldrh	r3, [r3, #8]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	4610      	mov	r0, r2
 800cc72:	f7fc f9f1 	bl	8009058 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cc76:	4b46      	ldr	r3, [pc, #280]	; (800cd90 <tcp_receive+0x888>)
 800cc78:	891c      	ldrh	r4, [r3, #8]
 800cc7a:	4b45      	ldr	r3, [pc, #276]	; (800cd90 <tcp_receive+0x888>)
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	899b      	ldrh	r3, [r3, #12]
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fa ff80 	bl	8007b88 <lwip_htons>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	f003 0303 	and.w	r3, r3, #3
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <tcp_receive+0x790>
 800cc94:	2301      	movs	r3, #1
 800cc96:	e000      	b.n	800cc9a <tcp_receive+0x792>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	4423      	add	r3, r4
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	4b3d      	ldr	r3, [pc, #244]	; (800cd94 <tcp_receive+0x88c>)
 800cca0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cca2:	4b3c      	ldr	r3, [pc, #240]	; (800cd94 <tcp_receive+0x88c>)
 800cca4:	881b      	ldrh	r3, [r3, #0]
 800cca6:	461a      	mov	r2, r3
 800cca8:	4b38      	ldr	r3, [pc, #224]	; (800cd8c <tcp_receive+0x884>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	441a      	add	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb2:	6879      	ldr	r1, [r7, #4]
 800ccb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ccb6:	440b      	add	r3, r1
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d006      	beq.n	800ccca <tcp_receive+0x7c2>
 800ccbc:	4b36      	ldr	r3, [pc, #216]	; (800cd98 <tcp_receive+0x890>)
 800ccbe:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800ccc2:	4936      	ldr	r1, [pc, #216]	; (800cd9c <tcp_receive+0x894>)
 800ccc4:	4836      	ldr	r0, [pc, #216]	; (800cda0 <tcp_receive+0x898>)
 800ccc6:	f004 fd5f 	bl	8011788 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f000 80e7 	beq.w	800cea2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ccd4:	4b2e      	ldr	r3, [pc, #184]	; (800cd90 <tcp_receive+0x888>)
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	899b      	ldrh	r3, [r3, #12]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7fa ff53 	bl	8007b88 <lwip_htons>
 800cce2:	4603      	mov	r3, r0
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d010      	beq.n	800cd10 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ccee:	e00a      	b.n	800cd06 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccf4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f7fd fd97 	bl	800a834 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1f0      	bne.n	800ccf0 <tcp_receive+0x7e8>
 800cd0e:	e0c8      	b.n	800cea2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd14:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cd16:	e052      	b.n	800cdbe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	899b      	ldrh	r3, [r3, #12]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fa ff31 	bl	8007b88 <lwip_htons>
 800cd26:	4603      	mov	r3, r0
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	f003 0301 	and.w	r3, r3, #1
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d03d      	beq.n	800cdae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cd32:	4b17      	ldr	r3, [pc, #92]	; (800cd90 <tcp_receive+0x888>)
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	899b      	ldrh	r3, [r3, #12]
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7fa ff24 	bl	8007b88 <lwip_htons>
 800cd40:	4603      	mov	r3, r0
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d130      	bne.n	800cdae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cd4c:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <tcp_receive+0x888>)
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	899b      	ldrh	r3, [r3, #12]
 800cd52:	b29c      	uxth	r4, r3
 800cd54:	2001      	movs	r0, #1
 800cd56:	f7fa ff17 	bl	8007b88 <lwip_htons>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4b0c      	ldr	r3, [pc, #48]	; (800cd90 <tcp_receive+0x888>)
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	4322      	orrs	r2, r4
 800cd64:	b292      	uxth	r2, r2
 800cd66:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cd68:	4b09      	ldr	r3, [pc, #36]	; (800cd90 <tcp_receive+0x888>)
 800cd6a:	891c      	ldrh	r4, [r3, #8]
 800cd6c:	4b08      	ldr	r3, [pc, #32]	; (800cd90 <tcp_receive+0x888>)
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	899b      	ldrh	r3, [r3, #12]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fa ff07 	bl	8007b88 <lwip_htons>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	f003 0303 	and.w	r3, r3, #3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00e      	beq.n	800cda4 <tcp_receive+0x89c>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e00d      	b.n	800cda6 <tcp_receive+0x89e>
 800cd8a:	bf00      	nop
 800cd8c:	2400199c 	.word	0x2400199c
 800cd90:	2400197c 	.word	0x2400197c
 800cd94:	240019a6 	.word	0x240019a6
 800cd98:	08013824 	.word	0x08013824
 800cd9c:	08013bcc 	.word	0x08013bcc
 800cda0:	08013870 	.word	0x08013870
 800cda4:	2300      	movs	r3, #0
 800cda6:	4423      	add	r3, r4
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	4b98      	ldr	r3, [pc, #608]	; (800d00c <tcp_receive+0xb04>)
 800cdac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cdb8:	6938      	ldr	r0, [r7, #16]
 800cdba:	f7fd fd3b 	bl	800a834 <tcp_seg_free>
            while (next &&
 800cdbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00e      	beq.n	800cde2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cdc4:	4b91      	ldr	r3, [pc, #580]	; (800d00c <tcp_receive+0xb04>)
 800cdc6:	881b      	ldrh	r3, [r3, #0]
 800cdc8:	461a      	mov	r2, r3
 800cdca:	4b91      	ldr	r3, [pc, #580]	; (800d010 <tcp_receive+0xb08>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	441a      	add	r2, r3
 800cdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cdd8:	8909      	ldrh	r1, [r1, #8]
 800cdda:	440b      	add	r3, r1
 800cddc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	da9a      	bge.n	800cd18 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d059      	beq.n	800ce9c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800cde8:	4b88      	ldr	r3, [pc, #544]	; (800d00c <tcp_receive+0xb04>)
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	461a      	mov	r2, r3
 800cdee:	4b88      	ldr	r3, [pc, #544]	; (800d010 <tcp_receive+0xb08>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	441a      	add	r2, r3
 800cdf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	dd4d      	ble.n	800ce9c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ce00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	4b81      	ldr	r3, [pc, #516]	; (800d010 <tcp_receive+0xb08>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	b29a      	uxth	r2, r3
 800ce12:	4b80      	ldr	r3, [pc, #512]	; (800d014 <tcp_receive+0xb0c>)
 800ce14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ce16:	4b7f      	ldr	r3, [pc, #508]	; (800d014 <tcp_receive+0xb0c>)
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	899b      	ldrh	r3, [r3, #12]
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fa feb2 	bl	8007b88 <lwip_htons>
 800ce24:	4603      	mov	r3, r0
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	f003 0302 	and.w	r3, r3, #2
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d005      	beq.n	800ce3c <tcp_receive+0x934>
                inseg.len -= 1;
 800ce30:	4b78      	ldr	r3, [pc, #480]	; (800d014 <tcp_receive+0xb0c>)
 800ce32:	891b      	ldrh	r3, [r3, #8]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	4b76      	ldr	r3, [pc, #472]	; (800d014 <tcp_receive+0xb0c>)
 800ce3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ce3c:	4b75      	ldr	r3, [pc, #468]	; (800d014 <tcp_receive+0xb0c>)
 800ce3e:	685a      	ldr	r2, [r3, #4]
 800ce40:	4b74      	ldr	r3, [pc, #464]	; (800d014 <tcp_receive+0xb0c>)
 800ce42:	891b      	ldrh	r3, [r3, #8]
 800ce44:	4619      	mov	r1, r3
 800ce46:	4610      	mov	r0, r2
 800ce48:	f7fc f906 	bl	8009058 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ce4c:	4b71      	ldr	r3, [pc, #452]	; (800d014 <tcp_receive+0xb0c>)
 800ce4e:	891c      	ldrh	r4, [r3, #8]
 800ce50:	4b70      	ldr	r3, [pc, #448]	; (800d014 <tcp_receive+0xb0c>)
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	899b      	ldrh	r3, [r3, #12]
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fa fe95 	bl	8007b88 <lwip_htons>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	f003 0303 	and.w	r3, r3, #3
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <tcp_receive+0x966>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e000      	b.n	800ce70 <tcp_receive+0x968>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	4423      	add	r3, r4
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	4b65      	ldr	r3, [pc, #404]	; (800d00c <tcp_receive+0xb04>)
 800ce76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ce78:	4b64      	ldr	r3, [pc, #400]	; (800d00c <tcp_receive+0xb04>)
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	4b64      	ldr	r3, [pc, #400]	; (800d010 <tcp_receive+0xb08>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	441a      	add	r2, r3
 800ce84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d006      	beq.n	800ce9c <tcp_receive+0x994>
 800ce8e:	4b62      	ldr	r3, [pc, #392]	; (800d018 <tcp_receive+0xb10>)
 800ce90:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800ce94:	4961      	ldr	r1, [pc, #388]	; (800d01c <tcp_receive+0xb14>)
 800ce96:	4862      	ldr	r0, [pc, #392]	; (800d020 <tcp_receive+0xb18>)
 800ce98:	f004 fc76 	bl	8011788 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cea0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cea2:	4b5a      	ldr	r3, [pc, #360]	; (800d00c <tcp_receive+0xb04>)
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	461a      	mov	r2, r3
 800cea8:	4b59      	ldr	r3, [pc, #356]	; (800d010 <tcp_receive+0xb08>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	441a      	add	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ceb6:	4b55      	ldr	r3, [pc, #340]	; (800d00c <tcp_receive+0xb04>)
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d206      	bcs.n	800cecc <tcp_receive+0x9c4>
 800cebe:	4b56      	ldr	r3, [pc, #344]	; (800d018 <tcp_receive+0xb10>)
 800cec0:	f240 6207 	movw	r2, #1543	; 0x607
 800cec4:	4957      	ldr	r1, [pc, #348]	; (800d024 <tcp_receive+0xb1c>)
 800cec6:	4856      	ldr	r0, [pc, #344]	; (800d020 <tcp_receive+0xb18>)
 800cec8:	f004 fc5e 	bl	8011788 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ced0:	4b4e      	ldr	r3, [pc, #312]	; (800d00c <tcp_receive+0xb04>)
 800ced2:	881b      	ldrh	r3, [r3, #0]
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7fc ffcd 	bl	8009e7c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cee2:	4b4c      	ldr	r3, [pc, #304]	; (800d014 <tcp_receive+0xb0c>)
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	891b      	ldrh	r3, [r3, #8]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d006      	beq.n	800cefa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ceec:	4b49      	ldr	r3, [pc, #292]	; (800d014 <tcp_receive+0xb0c>)
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	4a4d      	ldr	r2, [pc, #308]	; (800d028 <tcp_receive+0xb20>)
 800cef2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cef4:	4b47      	ldr	r3, [pc, #284]	; (800d014 <tcp_receive+0xb0c>)
 800cef6:	2200      	movs	r2, #0
 800cef8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cefa:	4b46      	ldr	r3, [pc, #280]	; (800d014 <tcp_receive+0xb0c>)
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	899b      	ldrh	r3, [r3, #12]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fa fe40 	bl	8007b88 <lwip_htons>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 80b8 	beq.w	800d086 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cf16:	4b45      	ldr	r3, [pc, #276]	; (800d02c <tcp_receive+0xb24>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	f043 0320 	orr.w	r3, r3, #32
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	4b42      	ldr	r3, [pc, #264]	; (800d02c <tcp_receive+0xb24>)
 800cf22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cf24:	e0af      	b.n	800d086 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	4a36      	ldr	r2, [pc, #216]	; (800d010 <tcp_receive+0xb08>)
 800cf36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	891b      	ldrh	r3, [r3, #8]
 800cf3c:	461c      	mov	r4, r3
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	899b      	ldrh	r3, [r3, #12]
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7fa fe1e 	bl	8007b88 <lwip_htons>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	f003 0303 	and.w	r3, r3, #3
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <tcp_receive+0xa54>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e000      	b.n	800cf5e <tcp_receive+0xa56>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	191a      	adds	r2, r3, r4
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	441a      	add	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf6e:	461c      	mov	r4, r3
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	891b      	ldrh	r3, [r3, #8]
 800cf74:	461d      	mov	r5, r3
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	899b      	ldrh	r3, [r3, #12]
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fa fe02 	bl	8007b88 <lwip_htons>
 800cf84:	4603      	mov	r3, r0
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	f003 0303 	and.w	r3, r3, #3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <tcp_receive+0xa8c>
 800cf90:	2301      	movs	r3, #1
 800cf92:	e000      	b.n	800cf96 <tcp_receive+0xa8e>
 800cf94:	2300      	movs	r3, #0
 800cf96:	442b      	add	r3, r5
 800cf98:	429c      	cmp	r4, r3
 800cf9a:	d206      	bcs.n	800cfaa <tcp_receive+0xaa2>
 800cf9c:	4b1e      	ldr	r3, [pc, #120]	; (800d018 <tcp_receive+0xb10>)
 800cf9e:	f240 622c 	movw	r2, #1580	; 0x62c
 800cfa2:	4923      	ldr	r1, [pc, #140]	; (800d030 <tcp_receive+0xb28>)
 800cfa4:	481e      	ldr	r0, [pc, #120]	; (800d020 <tcp_receive+0xb18>)
 800cfa6:	f004 fbef 	bl	8011788 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	891b      	ldrh	r3, [r3, #8]
 800cfae:	461c      	mov	r4, r3
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	899b      	ldrh	r3, [r3, #12]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fa fde5 	bl	8007b88 <lwip_htons>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	f003 0303 	and.w	r3, r3, #3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <tcp_receive+0xac6>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e000      	b.n	800cfd0 <tcp_receive+0xac8>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	1919      	adds	r1, r3, r4
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cfd6:	b28b      	uxth	r3, r1
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7fc ff4b 	bl	8009e7c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	891b      	ldrh	r3, [r3, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d028      	beq.n	800d042 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cff0:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <tcp_receive+0xb20>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d01d      	beq.n	800d034 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800cff8:	4b0b      	ldr	r3, [pc, #44]	; (800d028 <tcp_receive+0xb20>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	4619      	mov	r1, r3
 800d002:	4610      	mov	r0, r2
 800d004:	f7fc fa70 	bl	80094e8 <pbuf_cat>
 800d008:	e018      	b.n	800d03c <tcp_receive+0xb34>
 800d00a:	bf00      	nop
 800d00c:	240019a6 	.word	0x240019a6
 800d010:	2400199c 	.word	0x2400199c
 800d014:	2400197c 	.word	0x2400197c
 800d018:	08013824 	.word	0x08013824
 800d01c:	08013c04 	.word	0x08013c04
 800d020:	08013870 	.word	0x08013870
 800d024:	08013c40 	.word	0x08013c40
 800d028:	240019ac 	.word	0x240019ac
 800d02c:	240019a9 	.word	0x240019a9
 800d030:	08013c60 	.word	0x08013c60
            } else {
              recv_data = cseg->p;
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	4a70      	ldr	r2, [pc, #448]	; (800d1fc <tcp_receive+0xcf4>)
 800d03a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	2200      	movs	r2, #0
 800d040:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	899b      	ldrh	r3, [r3, #12]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fa fd9c 	bl	8007b88 <lwip_htons>
 800d050:	4603      	mov	r3, r0
 800d052:	b2db      	uxtb	r3, r3
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00d      	beq.n	800d078 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d05c:	4b68      	ldr	r3, [pc, #416]	; (800d200 <tcp_receive+0xcf8>)
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	f043 0320 	orr.w	r3, r3, #32
 800d064:	b2da      	uxtb	r2, r3
 800d066:	4b66      	ldr	r3, [pc, #408]	; (800d200 <tcp_receive+0xcf8>)
 800d068:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	7d1b      	ldrb	r3, [r3, #20]
 800d06e:	2b04      	cmp	r3, #4
 800d070:	d102      	bne.n	800d078 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2207      	movs	r2, #7
 800d076:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d080:	68b8      	ldr	r0, [r7, #8]
 800d082:	f7fd fbd7 	bl	800a834 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d008      	beq.n	800d0a0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d09a:	429a      	cmp	r2, r3
 800d09c:	f43f af43 	beq.w	800cf26 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	8b5b      	ldrh	r3, [r3, #26]
 800d0a4:	f003 0301 	and.w	r3, r3, #1
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00e      	beq.n	800d0ca <tcp_receive+0xbc2>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	8b5b      	ldrh	r3, [r3, #26]
 800d0b0:	f023 0301 	bic.w	r3, r3, #1
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	835a      	strh	r2, [r3, #26]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	8b5b      	ldrh	r3, [r3, #26]
 800d0be:	f043 0302 	orr.w	r3, r3, #2
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d0c8:	e188      	b.n	800d3dc <tcp_receive+0xed4>
        tcp_ack(pcb);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	8b5b      	ldrh	r3, [r3, #26]
 800d0ce:	f043 0301 	orr.w	r3, r3, #1
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d0d8:	e180      	b.n	800d3dc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d106      	bne.n	800d0f0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d0e2:	4848      	ldr	r0, [pc, #288]	; (800d204 <tcp_receive+0xcfc>)
 800d0e4:	f7fd fbbe 	bl	800a864 <tcp_seg_copy>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	675a      	str	r2, [r3, #116]	; 0x74
 800d0ee:	e16d      	b.n	800d3cc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0fa:	e157      	b.n	800d3ac <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	685a      	ldr	r2, [r3, #4]
 800d102:	4b41      	ldr	r3, [pc, #260]	; (800d208 <tcp_receive+0xd00>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	429a      	cmp	r2, r3
 800d108:	d11d      	bne.n	800d146 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d10a:	4b3e      	ldr	r3, [pc, #248]	; (800d204 <tcp_receive+0xcfc>)
 800d10c:	891a      	ldrh	r2, [r3, #8]
 800d10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d110:	891b      	ldrh	r3, [r3, #8]
 800d112:	429a      	cmp	r2, r3
 800d114:	f240 814f 	bls.w	800d3b6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d118:	483a      	ldr	r0, [pc, #232]	; (800d204 <tcp_receive+0xcfc>)
 800d11a:	f7fd fba3 	bl	800a864 <tcp_seg_copy>
 800d11e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2b00      	cmp	r3, #0
 800d124:	f000 8149 	beq.w	800d3ba <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800d128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d003      	beq.n	800d136 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d130:	697a      	ldr	r2, [r7, #20]
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	e002      	b.n	800d13c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d13c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d13e:	6978      	ldr	r0, [r7, #20]
 800d140:	f7ff f8de 	bl	800c300 <tcp_oos_insert_segment>
                }
                break;
 800d144:	e139      	b.n	800d3ba <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d117      	bne.n	800d17c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d14c:	4b2e      	ldr	r3, [pc, #184]	; (800d208 <tcp_receive+0xd00>)
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	da57      	bge.n	800d20c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d15c:	4829      	ldr	r0, [pc, #164]	; (800d204 <tcp_receive+0xcfc>)
 800d15e:	f7fd fb81 	bl	800a864 <tcp_seg_copy>
 800d162:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 8129 	beq.w	800d3be <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	69ba      	ldr	r2, [r7, #24]
 800d170:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d174:	69b8      	ldr	r0, [r7, #24]
 800d176:	f7ff f8c3 	bl	800c300 <tcp_oos_insert_segment>
                  }
                  break;
 800d17a:	e120      	b.n	800d3be <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d17c:	4b22      	ldr	r3, [pc, #136]	; (800d208 <tcp_receive+0xd00>)
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	3b01      	subs	r3, #1
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	db3e      	blt.n	800d20c <tcp_receive+0xd04>
 800d18e:	4b1e      	ldr	r3, [pc, #120]	; (800d208 <tcp_receive+0xd00>)
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	1ad3      	subs	r3, r2, r3
 800d19a:	3301      	adds	r3, #1
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dc35      	bgt.n	800d20c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1a0:	4818      	ldr	r0, [pc, #96]	; (800d204 <tcp_receive+0xcfc>)
 800d1a2:	f7fd fb5f 	bl	800a864 <tcp_seg_copy>
 800d1a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f000 8109 	beq.w	800d3c2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1b8:	8912      	ldrh	r2, [r2, #8]
 800d1ba:	441a      	add	r2, r3
 800d1bc:	4b12      	ldr	r3, [pc, #72]	; (800d208 <tcp_receive+0xd00>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	dd12      	ble.n	800d1ec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d1c6:	4b10      	ldr	r3, [pc, #64]	; (800d208 <tcp_receive+0xd00>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	b29a      	uxth	r2, r3
 800d1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1de:	685a      	ldr	r2, [r3, #4]
 800d1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e2:	891b      	ldrh	r3, [r3, #8]
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	f7fb ff36 	bl	8009058 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ee:	69fa      	ldr	r2, [r7, #28]
 800d1f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d1f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1f4:	69f8      	ldr	r0, [r7, #28]
 800d1f6:	f7ff f883 	bl	800c300 <tcp_oos_insert_segment>
                  }
                  break;
 800d1fa:	e0e2      	b.n	800d3c2 <tcp_receive+0xeba>
 800d1fc:	240019ac 	.word	0x240019ac
 800d200:	240019a9 	.word	0x240019a9
 800d204:	2400197c 	.word	0x2400197c
 800d208:	2400199c 	.word	0x2400199c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	f040 80c6 	bne.w	800d3a6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d21a:	4b80      	ldr	r3, [pc, #512]	; (800d41c <tcp_receive+0xf14>)
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d226:	2b00      	cmp	r3, #0
 800d228:	f340 80bd 	ble.w	800d3a6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	899b      	ldrh	r3, [r3, #12]
 800d232:	b29b      	uxth	r3, r3
 800d234:	4618      	mov	r0, r3
 800d236:	f7fa fca7 	bl	8007b88 <lwip_htons>
 800d23a:	4603      	mov	r3, r0
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	f003 0301 	and.w	r3, r3, #1
 800d242:	2b00      	cmp	r3, #0
 800d244:	f040 80bf 	bne.w	800d3c6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d248:	4875      	ldr	r0, [pc, #468]	; (800d420 <tcp_receive+0xf18>)
 800d24a:	f7fd fb0b 	bl	800a864 <tcp_seg_copy>
 800d24e:	4602      	mov	r2, r0
 800d250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d252:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 80b6 	beq.w	800d3ca <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d266:	8912      	ldrh	r2, [r2, #8]
 800d268:	441a      	add	r2, r3
 800d26a:	4b6c      	ldr	r3, [pc, #432]	; (800d41c <tcp_receive+0xf14>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	2b00      	cmp	r3, #0
 800d272:	dd12      	ble.n	800d29a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d274:	4b69      	ldr	r3, [pc, #420]	; (800d41c <tcp_receive+0xf14>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	b29a      	uxth	r2, r3
 800d27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	b29b      	uxth	r3, r3
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	b29a      	uxth	r2, r3
 800d286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d288:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28c:	685a      	ldr	r2, [r3, #4]
 800d28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d290:	891b      	ldrh	r3, [r3, #8]
 800d292:	4619      	mov	r1, r3
 800d294:	4610      	mov	r0, r2
 800d296:	f7fb fedf 	bl	8009058 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d29a:	4b62      	ldr	r3, [pc, #392]	; (800d424 <tcp_receive+0xf1c>)
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	4b5e      	ldr	r3, [pc, #376]	; (800d41c <tcp_receive+0xf14>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	441a      	add	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2aa:	6879      	ldr	r1, [r7, #4]
 800d2ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d2ae:	440b      	add	r3, r1
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f340 8089 	ble.w	800d3ca <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	899b      	ldrh	r3, [r3, #12]
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fa fc60 	bl	8007b88 <lwip_htons>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	f003 0301 	and.w	r3, r3, #1
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d022      	beq.n	800d31a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	899b      	ldrh	r3, [r3, #12]
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	b21b      	sxth	r3, r3
 800d2e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d2e4:	b21c      	sxth	r4, r3
 800d2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	899b      	ldrh	r3, [r3, #12]
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7fa fc49 	bl	8007b88 <lwip_htons>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d300:	b29b      	uxth	r3, r3
 800d302:	4618      	mov	r0, r3
 800d304:	f7fa fc40 	bl	8007b88 <lwip_htons>
 800d308:	4603      	mov	r3, r0
 800d30a:	b21b      	sxth	r3, r3
 800d30c:	4323      	orrs	r3, r4
 800d30e:	b21a      	sxth	r2, r3
 800d310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	b292      	uxth	r2, r2
 800d318:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31e:	b29a      	uxth	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d324:	4413      	add	r3, r2
 800d326:	b299      	uxth	r1, r3
 800d328:	4b3c      	ldr	r3, [pc, #240]	; (800d41c <tcp_receive+0xf14>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	1a8a      	subs	r2, r1, r2
 800d334:	b292      	uxth	r2, r2
 800d336:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	685a      	ldr	r2, [r3, #4]
 800d33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	891b      	ldrh	r3, [r3, #8]
 800d344:	4619      	mov	r1, r3
 800d346:	4610      	mov	r0, r2
 800d348:	f7fb fe86 	bl	8009058 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	891c      	ldrh	r4, [r3, #8]
 800d352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	899b      	ldrh	r3, [r3, #12]
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fa fc13 	bl	8007b88 <lwip_htons>
 800d362:	4603      	mov	r3, r0
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 0303 	and.w	r3, r3, #3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d001      	beq.n	800d372 <tcp_receive+0xe6a>
 800d36e:	2301      	movs	r3, #1
 800d370:	e000      	b.n	800d374 <tcp_receive+0xe6c>
 800d372:	2300      	movs	r3, #0
 800d374:	4423      	add	r3, r4
 800d376:	b29a      	uxth	r2, r3
 800d378:	4b2a      	ldr	r3, [pc, #168]	; (800d424 <tcp_receive+0xf1c>)
 800d37a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d37c:	4b29      	ldr	r3, [pc, #164]	; (800d424 <tcp_receive+0xf1c>)
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	461a      	mov	r2, r3
 800d382:	4b26      	ldr	r3, [pc, #152]	; (800d41c <tcp_receive+0xf14>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	441a      	add	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38c:	6879      	ldr	r1, [r7, #4]
 800d38e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d390:	440b      	add	r3, r1
 800d392:	429a      	cmp	r2, r3
 800d394:	d019      	beq.n	800d3ca <tcp_receive+0xec2>
 800d396:	4b24      	ldr	r3, [pc, #144]	; (800d428 <tcp_receive+0xf20>)
 800d398:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d39c:	4923      	ldr	r1, [pc, #140]	; (800d42c <tcp_receive+0xf24>)
 800d39e:	4824      	ldr	r0, [pc, #144]	; (800d430 <tcp_receive+0xf28>)
 800d3a0:	f004 f9f2 	bl	8011788 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d3a4:	e011      	b.n	800d3ca <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f47f aea4 	bne.w	800d0fc <tcp_receive+0xbf4>
 800d3b4:	e00a      	b.n	800d3cc <tcp_receive+0xec4>
                break;
 800d3b6:	bf00      	nop
 800d3b8:	e008      	b.n	800d3cc <tcp_receive+0xec4>
                break;
 800d3ba:	bf00      	nop
 800d3bc:	e006      	b.n	800d3cc <tcp_receive+0xec4>
                  break;
 800d3be:	bf00      	nop
 800d3c0:	e004      	b.n	800d3cc <tcp_receive+0xec4>
                  break;
 800d3c2:	bf00      	nop
 800d3c4:	e002      	b.n	800d3cc <tcp_receive+0xec4>
                  break;
 800d3c6:	bf00      	nop
 800d3c8:	e000      	b.n	800d3cc <tcp_receive+0xec4>
                break;
 800d3ca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f001 fa43 	bl	800e858 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d3d2:	e003      	b.n	800d3dc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f001 fa3f 	bl	800e858 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d3da:	e01a      	b.n	800d412 <tcp_receive+0xf0a>
 800d3dc:	e019      	b.n	800d412 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d3de:	4b0f      	ldr	r3, [pc, #60]	; (800d41c <tcp_receive+0xf14>)
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	db0a      	blt.n	800d402 <tcp_receive+0xefa>
 800d3ec:	4b0b      	ldr	r3, [pc, #44]	; (800d41c <tcp_receive+0xf14>)
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	6879      	ldr	r1, [r7, #4]
 800d3f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d3f8:	440b      	add	r3, r1
 800d3fa:	1ad3      	subs	r3, r2, r3
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	dd07      	ble.n	800d412 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	8b5b      	ldrh	r3, [r3, #26]
 800d406:	f043 0302 	orr.w	r3, r3, #2
 800d40a:	b29a      	uxth	r2, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d410:	e7ff      	b.n	800d412 <tcp_receive+0xf0a>
 800d412:	bf00      	nop
 800d414:	3750      	adds	r7, #80	; 0x50
 800d416:	46bd      	mov	sp, r7
 800d418:	bdb0      	pop	{r4, r5, r7, pc}
 800d41a:	bf00      	nop
 800d41c:	2400199c 	.word	0x2400199c
 800d420:	2400197c 	.word	0x2400197c
 800d424:	240019a6 	.word	0x240019a6
 800d428:	08013824 	.word	0x08013824
 800d42c:	08013bcc 	.word	0x08013bcc
 800d430:	08013870 	.word	0x08013870

0800d434 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d43a:	4b15      	ldr	r3, [pc, #84]	; (800d490 <tcp_get_next_optbyte+0x5c>)
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	b291      	uxth	r1, r2
 800d442:	4a13      	ldr	r2, [pc, #76]	; (800d490 <tcp_get_next_optbyte+0x5c>)
 800d444:	8011      	strh	r1, [r2, #0]
 800d446:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d448:	4b12      	ldr	r3, [pc, #72]	; (800d494 <tcp_get_next_optbyte+0x60>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d004      	beq.n	800d45a <tcp_get_next_optbyte+0x26>
 800d450:	4b11      	ldr	r3, [pc, #68]	; (800d498 <tcp_get_next_optbyte+0x64>)
 800d452:	881b      	ldrh	r3, [r3, #0]
 800d454:	88fa      	ldrh	r2, [r7, #6]
 800d456:	429a      	cmp	r2, r3
 800d458:	d208      	bcs.n	800d46c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d45a:	4b10      	ldr	r3, [pc, #64]	; (800d49c <tcp_get_next_optbyte+0x68>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3314      	adds	r3, #20
 800d460:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d462:	88fb      	ldrh	r3, [r7, #6]
 800d464:	683a      	ldr	r2, [r7, #0]
 800d466:	4413      	add	r3, r2
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	e00b      	b.n	800d484 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d46c:	88fb      	ldrh	r3, [r7, #6]
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	4b09      	ldr	r3, [pc, #36]	; (800d498 <tcp_get_next_optbyte+0x64>)
 800d472:	881b      	ldrh	r3, [r3, #0]
 800d474:	b2db      	uxtb	r3, r3
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d47a:	4b06      	ldr	r3, [pc, #24]	; (800d494 <tcp_get_next_optbyte+0x60>)
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	797b      	ldrb	r3, [r7, #5]
 800d480:	4413      	add	r3, r2
 800d482:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d484:	4618      	mov	r0, r3
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	24001998 	.word	0x24001998
 800d494:	24001994 	.word	0x24001994
 800d498:	24001992 	.word	0x24001992
 800d49c:	2400198c 	.word	0x2400198c

0800d4a0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d106      	bne.n	800d4bc <tcp_parseopt+0x1c>
 800d4ae:	4b31      	ldr	r3, [pc, #196]	; (800d574 <tcp_parseopt+0xd4>)
 800d4b0:	f240 727d 	movw	r2, #1917	; 0x77d
 800d4b4:	4930      	ldr	r1, [pc, #192]	; (800d578 <tcp_parseopt+0xd8>)
 800d4b6:	4831      	ldr	r0, [pc, #196]	; (800d57c <tcp_parseopt+0xdc>)
 800d4b8:	f004 f966 	bl	8011788 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d4bc:	4b30      	ldr	r3, [pc, #192]	; (800d580 <tcp_parseopt+0xe0>)
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d053      	beq.n	800d56c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d4c4:	4b2f      	ldr	r3, [pc, #188]	; (800d584 <tcp_parseopt+0xe4>)
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	801a      	strh	r2, [r3, #0]
 800d4ca:	e043      	b.n	800d554 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800d4cc:	f7ff ffb2 	bl	800d434 <tcp_get_next_optbyte>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d03c      	beq.n	800d554 <tcp_parseopt+0xb4>
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d002      	beq.n	800d4e4 <tcp_parseopt+0x44>
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d03f      	beq.n	800d562 <tcp_parseopt+0xc2>
 800d4e2:	e026      	b.n	800d532 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d4e4:	f7ff ffa6 	bl	800d434 <tcp_get_next_optbyte>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b04      	cmp	r3, #4
 800d4ec:	d13b      	bne.n	800d566 <tcp_parseopt+0xc6>
 800d4ee:	4b25      	ldr	r3, [pc, #148]	; (800d584 <tcp_parseopt+0xe4>)
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	3302      	adds	r3, #2
 800d4f4:	4a22      	ldr	r2, [pc, #136]	; (800d580 <tcp_parseopt+0xe0>)
 800d4f6:	8812      	ldrh	r2, [r2, #0]
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	dc34      	bgt.n	800d566 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d4fc:	f7ff ff9a 	bl	800d434 <tcp_get_next_optbyte>
 800d500:	4603      	mov	r3, r0
 800d502:	b29b      	uxth	r3, r3
 800d504:	021b      	lsls	r3, r3, #8
 800d506:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d508:	f7ff ff94 	bl	800d434 <tcp_get_next_optbyte>
 800d50c:	4603      	mov	r3, r0
 800d50e:	b29a      	uxth	r2, r3
 800d510:	89bb      	ldrh	r3, [r7, #12]
 800d512:	4313      	orrs	r3, r2
 800d514:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d516:	89bb      	ldrh	r3, [r7, #12]
 800d518:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d51c:	d804      	bhi.n	800d528 <tcp_parseopt+0x88>
 800d51e:	89bb      	ldrh	r3, [r7, #12]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d001      	beq.n	800d528 <tcp_parseopt+0x88>
 800d524:	89ba      	ldrh	r2, [r7, #12]
 800d526:	e001      	b.n	800d52c <tcp_parseopt+0x8c>
 800d528:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d530:	e010      	b.n	800d554 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d532:	f7ff ff7f 	bl	800d434 <tcp_get_next_optbyte>
 800d536:	4603      	mov	r3, r0
 800d538:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d53a:	7afb      	ldrb	r3, [r7, #11]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d914      	bls.n	800d56a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d540:	7afb      	ldrb	r3, [r7, #11]
 800d542:	b29a      	uxth	r2, r3
 800d544:	4b0f      	ldr	r3, [pc, #60]	; (800d584 <tcp_parseopt+0xe4>)
 800d546:	881b      	ldrh	r3, [r3, #0]
 800d548:	4413      	add	r3, r2
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	3b02      	subs	r3, #2
 800d54e:	b29a      	uxth	r2, r3
 800d550:	4b0c      	ldr	r3, [pc, #48]	; (800d584 <tcp_parseopt+0xe4>)
 800d552:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d554:	4b0b      	ldr	r3, [pc, #44]	; (800d584 <tcp_parseopt+0xe4>)
 800d556:	881a      	ldrh	r2, [r3, #0]
 800d558:	4b09      	ldr	r3, [pc, #36]	; (800d580 <tcp_parseopt+0xe0>)
 800d55a:	881b      	ldrh	r3, [r3, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d3b5      	bcc.n	800d4cc <tcp_parseopt+0x2c>
 800d560:	e004      	b.n	800d56c <tcp_parseopt+0xcc>
          return;
 800d562:	bf00      	nop
 800d564:	e002      	b.n	800d56c <tcp_parseopt+0xcc>
            return;
 800d566:	bf00      	nop
 800d568:	e000      	b.n	800d56c <tcp_parseopt+0xcc>
            return;
 800d56a:	bf00      	nop
      }
    }
  }
}
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	08013824 	.word	0x08013824
 800d578:	08013c88 	.word	0x08013c88
 800d57c:	08013870 	.word	0x08013870
 800d580:	24001990 	.word	0x24001990
 800d584:	24001998 	.word	0x24001998

0800d588 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d588:	b480      	push	{r7}
 800d58a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d58c:	4b05      	ldr	r3, [pc, #20]	; (800d5a4 <tcp_trigger_input_pcb_close+0x1c>)
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	f043 0310 	orr.w	r3, r3, #16
 800d594:	b2da      	uxtb	r2, r3
 800d596:	4b03      	ldr	r3, [pc, #12]	; (800d5a4 <tcp_trigger_input_pcb_close+0x1c>)
 800d598:	701a      	strb	r2, [r3, #0]
}
 800d59a:	bf00      	nop
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr
 800d5a4:	240019a9 	.word	0x240019a9

0800d5a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00a      	beq.n	800d5d0 <tcp_route+0x28>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	7a1b      	ldrb	r3, [r3, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d006      	beq.n	800d5d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	7a1b      	ldrb	r3, [r3, #8]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fb fb70 	bl	8008cac <netif_get_by_index>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	e003      	b.n	800d5d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f002 feb3 	bl	801033c <ip4_route>
 800d5d6:	4603      	mov	r3, r0
  }
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b087      	sub	sp, #28
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	603b      	str	r3, [r7, #0]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d105      	bne.n	800d602 <tcp_create_segment+0x22>
 800d5f6:	4b44      	ldr	r3, [pc, #272]	; (800d708 <tcp_create_segment+0x128>)
 800d5f8:	22a3      	movs	r2, #163	; 0xa3
 800d5fa:	4944      	ldr	r1, [pc, #272]	; (800d70c <tcp_create_segment+0x12c>)
 800d5fc:	4844      	ldr	r0, [pc, #272]	; (800d710 <tcp_create_segment+0x130>)
 800d5fe:	f004 f8c3 	bl	8011788 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d105      	bne.n	800d614 <tcp_create_segment+0x34>
 800d608:	4b3f      	ldr	r3, [pc, #252]	; (800d708 <tcp_create_segment+0x128>)
 800d60a:	22a4      	movs	r2, #164	; 0xa4
 800d60c:	4941      	ldr	r1, [pc, #260]	; (800d714 <tcp_create_segment+0x134>)
 800d60e:	4840      	ldr	r0, [pc, #256]	; (800d710 <tcp_create_segment+0x130>)
 800d610:	f004 f8ba 	bl	8011788 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	f003 0304 	and.w	r3, r3, #4
 800d620:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d622:	2003      	movs	r0, #3
 800d624:	f7fa ffe0 	bl	80085e8 <memp_malloc>
 800d628:	6138      	str	r0, [r7, #16]
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d104      	bne.n	800d63a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d630:	68b8      	ldr	r0, [r7, #8]
 800d632:	f7fb fe97 	bl	8009364 <pbuf_free>
    return NULL;
 800d636:	2300      	movs	r3, #0
 800d638:	e061      	b.n	800d6fe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d640:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	2200      	movs	r2, #0
 800d646:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	891a      	ldrh	r2, [r3, #8]
 800d652:	7dfb      	ldrb	r3, [r7, #23]
 800d654:	b29b      	uxth	r3, r3
 800d656:	429a      	cmp	r2, r3
 800d658:	d205      	bcs.n	800d666 <tcp_create_segment+0x86>
 800d65a:	4b2b      	ldr	r3, [pc, #172]	; (800d708 <tcp_create_segment+0x128>)
 800d65c:	22b0      	movs	r2, #176	; 0xb0
 800d65e:	492e      	ldr	r1, [pc, #184]	; (800d718 <tcp_create_segment+0x138>)
 800d660:	482b      	ldr	r0, [pc, #172]	; (800d710 <tcp_create_segment+0x130>)
 800d662:	f004 f891 	bl	8011788 <iprintf>
  seg->len = p->tot_len - optlen;
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	891a      	ldrh	r2, [r3, #8]
 800d66a:	7dfb      	ldrb	r3, [r7, #23]
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	b29a      	uxth	r2, r3
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d676:	2114      	movs	r1, #20
 800d678:	68b8      	ldr	r0, [r7, #8]
 800d67a:	f7fb fddd 	bl	8009238 <pbuf_add_header>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d004      	beq.n	800d68e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d684:	6938      	ldr	r0, [r7, #16]
 800d686:	f7fd f8d5 	bl	800a834 <tcp_seg_free>
    return NULL;
 800d68a:	2300      	movs	r3, #0
 800d68c:	e037      	b.n	800d6fe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	8ada      	ldrh	r2, [r3, #22]
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	68dc      	ldr	r4, [r3, #12]
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f7fa fa71 	bl	8007b88 <lwip_htons>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	8b1a      	ldrh	r2, [r3, #24]
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	68dc      	ldr	r4, [r3, #12]
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	f7fa fa68 	bl	8007b88 <lwip_htons>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	68dc      	ldr	r4, [r3, #12]
 800d6c0:	6838      	ldr	r0, [r7, #0]
 800d6c2:	f7fa fa76 	bl	8007bb2 <lwip_htonl>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d6ca:	7dfb      	ldrb	r3, [r7, #23]
 800d6cc:	089b      	lsrs	r3, r3, #2
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	3305      	adds	r3, #5
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	031b      	lsls	r3, r3, #12
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	68dc      	ldr	r4, [r3, #12]
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	f7fa fa4e 	bl	8007b88 <lwip_htons>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	749a      	strb	r2, [r3, #18]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	74da      	strb	r2, [r3, #19]
  return seg;
 800d6fc:	693b      	ldr	r3, [r7, #16]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	371c      	adds	r7, #28
 800d702:	46bd      	mov	sp, r7
 800d704:	bd90      	pop	{r4, r7, pc}
 800d706:	bf00      	nop
 800d708:	08013ca4 	.word	0x08013ca4
 800d70c:	08013cd8 	.word	0x08013cd8
 800d710:	08013cf8 	.word	0x08013cf8
 800d714:	08013d20 	.word	0x08013d20
 800d718:	08013d44 	.word	0x08013d44

0800d71c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d71c:	b590      	push	{r4, r7, lr}
 800d71e:	b08b      	sub	sp, #44	; 0x2c
 800d720:	af02      	add	r7, sp, #8
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	61fb      	str	r3, [r7, #28]
 800d72c:	2300      	movs	r3, #0
 800d72e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d730:	2300      	movs	r3, #0
 800d732:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d106      	bne.n	800d748 <tcp_split_unsent_seg+0x2c>
 800d73a:	4b95      	ldr	r3, [pc, #596]	; (800d990 <tcp_split_unsent_seg+0x274>)
 800d73c:	f240 324b 	movw	r2, #843	; 0x34b
 800d740:	4994      	ldr	r1, [pc, #592]	; (800d994 <tcp_split_unsent_seg+0x278>)
 800d742:	4895      	ldr	r0, [pc, #596]	; (800d998 <tcp_split_unsent_seg+0x27c>)
 800d744:	f004 f820 	bl	8011788 <iprintf>

  useg = pcb->unsent;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d74c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d102      	bne.n	800d75a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d754:	f04f 33ff 	mov.w	r3, #4294967295
 800d758:	e116      	b.n	800d988 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d75a:	887b      	ldrh	r3, [r7, #2]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d109      	bne.n	800d774 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d760:	4b8b      	ldr	r3, [pc, #556]	; (800d990 <tcp_split_unsent_seg+0x274>)
 800d762:	f240 3253 	movw	r2, #851	; 0x353
 800d766:	498d      	ldr	r1, [pc, #564]	; (800d99c <tcp_split_unsent_seg+0x280>)
 800d768:	488b      	ldr	r0, [pc, #556]	; (800d998 <tcp_split_unsent_seg+0x27c>)
 800d76a:	f004 f80d 	bl	8011788 <iprintf>
    return ERR_VAL;
 800d76e:	f06f 0305 	mvn.w	r3, #5
 800d772:	e109      	b.n	800d988 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	891b      	ldrh	r3, [r3, #8]
 800d778:	887a      	ldrh	r2, [r7, #2]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d301      	bcc.n	800d782 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	e102      	b.n	800d988 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d786:	887a      	ldrh	r2, [r7, #2]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d906      	bls.n	800d79a <tcp_split_unsent_seg+0x7e>
 800d78c:	4b80      	ldr	r3, [pc, #512]	; (800d990 <tcp_split_unsent_seg+0x274>)
 800d78e:	f240 325b 	movw	r2, #859	; 0x35b
 800d792:	4983      	ldr	r1, [pc, #524]	; (800d9a0 <tcp_split_unsent_seg+0x284>)
 800d794:	4880      	ldr	r0, [pc, #512]	; (800d998 <tcp_split_unsent_seg+0x27c>)
 800d796:	f003 fff7 	bl	8011788 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	891b      	ldrh	r3, [r3, #8]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <tcp_split_unsent_seg+0x94>
 800d7a2:	4b7b      	ldr	r3, [pc, #492]	; (800d990 <tcp_split_unsent_seg+0x274>)
 800d7a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d7a8:	497e      	ldr	r1, [pc, #504]	; (800d9a4 <tcp_split_unsent_seg+0x288>)
 800d7aa:	487b      	ldr	r0, [pc, #492]	; (800d998 <tcp_split_unsent_seg+0x27c>)
 800d7ac:	f003 ffec 	bl	8011788 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	7a9b      	ldrb	r3, [r3, #10]
 800d7b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d7b6:	7bfb      	ldrb	r3, [r7, #15]
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	f003 0304 	and.w	r3, r3, #4
 800d7c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	891a      	ldrh	r2, [r3, #8]
 800d7c6:	887b      	ldrh	r3, [r7, #2]
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d7cc:	7bbb      	ldrb	r3, [r7, #14]
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	89bb      	ldrh	r3, [r7, #12]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d7da:	4619      	mov	r1, r3
 800d7dc:	2036      	movs	r0, #54	; 0x36
 800d7de:	f7fb fae1 	bl	8008da4 <pbuf_alloc>
 800d7e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f000 80b7 	beq.w	800d95a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	891a      	ldrh	r2, [r3, #8]
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	891b      	ldrh	r3, [r3, #8]
 800d7f6:	1ad3      	subs	r3, r2, r3
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	887b      	ldrh	r3, [r7, #2]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	6858      	ldr	r0, [r3, #4]
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	7bbb      	ldrb	r3, [r7, #14]
 800d80a:	18d1      	adds	r1, r2, r3
 800d80c:	897b      	ldrh	r3, [r7, #10]
 800d80e:	89ba      	ldrh	r2, [r7, #12]
 800d810:	f7fb ff92 	bl	8009738 <pbuf_copy_partial>
 800d814:	4603      	mov	r3, r0
 800d816:	461a      	mov	r2, r3
 800d818:	89bb      	ldrh	r3, [r7, #12]
 800d81a:	4293      	cmp	r3, r2
 800d81c:	f040 809f 	bne.w	800d95e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	899b      	ldrh	r3, [r3, #12]
 800d826:	b29b      	uxth	r3, r3
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fa f9ad 	bl	8007b88 <lwip_htons>
 800d82e:	4603      	mov	r3, r0
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d836:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d838:	2300      	movs	r3, #0
 800d83a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d83c:	7efb      	ldrb	r3, [r7, #27]
 800d83e:	f003 0308 	and.w	r3, r3, #8
 800d842:	2b00      	cmp	r3, #0
 800d844:	d007      	beq.n	800d856 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d846:	7efb      	ldrb	r3, [r7, #27]
 800d848:	f023 0308 	bic.w	r3, r3, #8
 800d84c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d84e:	7ebb      	ldrb	r3, [r7, #26]
 800d850:	f043 0308 	orr.w	r3, r3, #8
 800d854:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d856:	7efb      	ldrb	r3, [r7, #27]
 800d858:	f003 0301 	and.w	r3, r3, #1
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d007      	beq.n	800d870 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d860:	7efb      	ldrb	r3, [r7, #27]
 800d862:	f023 0301 	bic.w	r3, r3, #1
 800d866:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d868:	7ebb      	ldrb	r3, [r7, #26]
 800d86a:	f043 0301 	orr.w	r3, r3, #1
 800d86e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	4618      	mov	r0, r3
 800d878:	f7fa f99b 	bl	8007bb2 <lwip_htonl>
 800d87c:	4602      	mov	r2, r0
 800d87e:	887b      	ldrh	r3, [r7, #2]
 800d880:	18d1      	adds	r1, r2, r3
 800d882:	7eba      	ldrb	r2, [r7, #26]
 800d884:	7bfb      	ldrb	r3, [r7, #15]
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	460b      	mov	r3, r1
 800d88a:	6939      	ldr	r1, [r7, #16]
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7ff fea7 	bl	800d5e0 <tcp_create_segment>
 800d892:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d063      	beq.n	800d962 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fb fde8 	bl	8009474 <pbuf_clen>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8ae:	1a9b      	subs	r3, r3, r2
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	6858      	ldr	r0, [r3, #4]
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	891a      	ldrh	r2, [r3, #8]
 800d8c2:	89bb      	ldrh	r3, [r7, #12]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	f7fb fbc5 	bl	8009058 <pbuf_realloc>
  useg->len -= remainder;
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	891a      	ldrh	r2, [r3, #8]
 800d8d2:	89bb      	ldrh	r3, [r7, #12]
 800d8d4:	1ad3      	subs	r3, r2, r3
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	899b      	ldrh	r3, [r3, #12]
 800d8e2:	b29c      	uxth	r4, r3
 800d8e4:	7efb      	ldrb	r3, [r7, #27]
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7fa f94d 	bl	8007b88 <lwip_htons>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	4322      	orrs	r2, r4
 800d8f8:	b292      	uxth	r2, r2
 800d8fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	4618      	mov	r0, r3
 800d902:	f7fb fdb7 	bl	8009474 <pbuf_clen>
 800d906:	4603      	mov	r3, r0
 800d908:	461a      	mov	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d910:	4413      	add	r3, r2
 800d912:	b29a      	uxth	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fb fda8 	bl	8009474 <pbuf_clen>
 800d924:	4603      	mov	r3, r0
 800d926:	461a      	mov	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d92e:	4413      	add	r3, r2
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	69fa      	ldr	r2, [r7, #28]
 800d944:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d103      	bne.n	800d956 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	e016      	b.n	800d988 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d95a:	bf00      	nop
 800d95c:	e002      	b.n	800d964 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d95e:	bf00      	nop
 800d960:	e000      	b.n	800d964 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d962:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d006      	beq.n	800d978 <tcp_split_unsent_seg+0x25c>
 800d96a:	4b09      	ldr	r3, [pc, #36]	; (800d990 <tcp_split_unsent_seg+0x274>)
 800d96c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d970:	490d      	ldr	r1, [pc, #52]	; (800d9a8 <tcp_split_unsent_seg+0x28c>)
 800d972:	4809      	ldr	r0, [pc, #36]	; (800d998 <tcp_split_unsent_seg+0x27c>)
 800d974:	f003 ff08 	bl	8011788 <iprintf>
  if (p != NULL) {
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d002      	beq.n	800d984 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d97e:	6938      	ldr	r0, [r7, #16]
 800d980:	f7fb fcf0 	bl	8009364 <pbuf_free>
  }

  return ERR_MEM;
 800d984:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3724      	adds	r7, #36	; 0x24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd90      	pop	{r4, r7, pc}
 800d990:	08013ca4 	.word	0x08013ca4
 800d994:	08014038 	.word	0x08014038
 800d998:	08013cf8 	.word	0x08013cf8
 800d99c:	0801405c 	.word	0x0801405c
 800d9a0:	08014080 	.word	0x08014080
 800d9a4:	08014090 	.word	0x08014090
 800d9a8:	080140a0 	.word	0x080140a0

0800d9ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d9ac:	b590      	push	{r4, r7, lr}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d106      	bne.n	800d9c8 <tcp_send_fin+0x1c>
 800d9ba:	4b21      	ldr	r3, [pc, #132]	; (800da40 <tcp_send_fin+0x94>)
 800d9bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d9c0:	4920      	ldr	r1, [pc, #128]	; (800da44 <tcp_send_fin+0x98>)
 800d9c2:	4821      	ldr	r0, [pc, #132]	; (800da48 <tcp_send_fin+0x9c>)
 800d9c4:	f003 fee0 	bl	8011788 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d02e      	beq.n	800da2e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d4:	60fb      	str	r3, [r7, #12]
 800d9d6:	e002      	b.n	800d9de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1f8      	bne.n	800d9d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	899b      	ldrh	r3, [r3, #12]
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fa f8ca 	bl	8007b88 <lwip_htons>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 0307 	and.w	r3, r3, #7
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d116      	bne.n	800da2e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	899b      	ldrh	r3, [r3, #12]
 800da06:	b29c      	uxth	r4, r3
 800da08:	2001      	movs	r0, #1
 800da0a:	f7fa f8bd 	bl	8007b88 <lwip_htons>
 800da0e:	4603      	mov	r3, r0
 800da10:	461a      	mov	r2, r3
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	4322      	orrs	r2, r4
 800da18:	b292      	uxth	r2, r2
 800da1a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	8b5b      	ldrh	r3, [r3, #26]
 800da20:	f043 0320 	orr.w	r3, r3, #32
 800da24:	b29a      	uxth	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	e004      	b.n	800da38 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800da2e:	2101      	movs	r1, #1
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 f80b 	bl	800da4c <tcp_enqueue_flags>
 800da36:	4603      	mov	r3, r0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3714      	adds	r7, #20
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd90      	pop	{r4, r7, pc}
 800da40:	08013ca4 	.word	0x08013ca4
 800da44:	080140ac 	.word	0x080140ac
 800da48:	08013cf8 	.word	0x08013cf8

0800da4c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b08a      	sub	sp, #40	; 0x28
 800da50:	af02      	add	r7, sp, #8
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	460b      	mov	r3, r1
 800da56:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	f003 0303 	and.w	r3, r3, #3
 800da66:	2b00      	cmp	r3, #0
 800da68:	d106      	bne.n	800da78 <tcp_enqueue_flags+0x2c>
 800da6a:	4b67      	ldr	r3, [pc, #412]	; (800dc08 <tcp_enqueue_flags+0x1bc>)
 800da6c:	f240 4212 	movw	r2, #1042	; 0x412
 800da70:	4966      	ldr	r1, [pc, #408]	; (800dc0c <tcp_enqueue_flags+0x1c0>)
 800da72:	4867      	ldr	r0, [pc, #412]	; (800dc10 <tcp_enqueue_flags+0x1c4>)
 800da74:	f003 fe88 	bl	8011788 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d106      	bne.n	800da8c <tcp_enqueue_flags+0x40>
 800da7e:	4b62      	ldr	r3, [pc, #392]	; (800dc08 <tcp_enqueue_flags+0x1bc>)
 800da80:	f240 4213 	movw	r2, #1043	; 0x413
 800da84:	4963      	ldr	r1, [pc, #396]	; (800dc14 <tcp_enqueue_flags+0x1c8>)
 800da86:	4862      	ldr	r0, [pc, #392]	; (800dc10 <tcp_enqueue_flags+0x1c4>)
 800da88:	f003 fe7e 	bl	8011788 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800da8c:	78fb      	ldrb	r3, [r7, #3]
 800da8e:	f003 0302 	and.w	r3, r3, #2
 800da92:	2b00      	cmp	r3, #0
 800da94:	d001      	beq.n	800da9a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800da96:	2301      	movs	r3, #1
 800da98:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800da9a:	7ffb      	ldrb	r3, [r7, #31]
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	f003 0304 	and.w	r3, r3, #4
 800daa4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800daae:	4619      	mov	r1, r3
 800dab0:	2036      	movs	r0, #54	; 0x36
 800dab2:	f7fb f977 	bl	8008da4 <pbuf_alloc>
 800dab6:	6138      	str	r0, [r7, #16]
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d109      	bne.n	800dad2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	8b5b      	ldrh	r3, [r3, #26]
 800dac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dacc:	f04f 33ff 	mov.w	r3, #4294967295
 800dad0:	e095      	b.n	800dbfe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	895a      	ldrh	r2, [r3, #10]
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	429a      	cmp	r2, r3
 800dadc:	d206      	bcs.n	800daec <tcp_enqueue_flags+0xa0>
 800dade:	4b4a      	ldr	r3, [pc, #296]	; (800dc08 <tcp_enqueue_flags+0x1bc>)
 800dae0:	f240 423a 	movw	r2, #1082	; 0x43a
 800dae4:	494c      	ldr	r1, [pc, #304]	; (800dc18 <tcp_enqueue_flags+0x1cc>)
 800dae6:	484a      	ldr	r0, [pc, #296]	; (800dc10 <tcp_enqueue_flags+0x1c4>)
 800dae8:	f003 fe4e 	bl	8011788 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800daf0:	78fa      	ldrb	r2, [r7, #3]
 800daf2:	7ffb      	ldrb	r3, [r7, #31]
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	460b      	mov	r3, r1
 800daf8:	6939      	ldr	r1, [r7, #16]
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7ff fd70 	bl	800d5e0 <tcp_create_segment>
 800db00:	60f8      	str	r0, [r7, #12]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d109      	bne.n	800db1c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	8b5b      	ldrh	r3, [r3, #26]
 800db0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db10:	b29a      	uxth	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800db16:	f04f 33ff 	mov.w	r3, #4294967295
 800db1a:	e070      	b.n	800dbfe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	f003 0303 	and.w	r3, r3, #3
 800db24:	2b00      	cmp	r3, #0
 800db26:	d006      	beq.n	800db36 <tcp_enqueue_flags+0xea>
 800db28:	4b37      	ldr	r3, [pc, #220]	; (800dc08 <tcp_enqueue_flags+0x1bc>)
 800db2a:	f240 4242 	movw	r2, #1090	; 0x442
 800db2e:	493b      	ldr	r1, [pc, #236]	; (800dc1c <tcp_enqueue_flags+0x1d0>)
 800db30:	4837      	ldr	r0, [pc, #220]	; (800dc10 <tcp_enqueue_flags+0x1c4>)
 800db32:	f003 fe29 	bl	8011788 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	891b      	ldrh	r3, [r3, #8]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d006      	beq.n	800db4c <tcp_enqueue_flags+0x100>
 800db3e:	4b32      	ldr	r3, [pc, #200]	; (800dc08 <tcp_enqueue_flags+0x1bc>)
 800db40:	f240 4243 	movw	r2, #1091	; 0x443
 800db44:	4936      	ldr	r1, [pc, #216]	; (800dc20 <tcp_enqueue_flags+0x1d4>)
 800db46:	4832      	ldr	r0, [pc, #200]	; (800dc10 <tcp_enqueue_flags+0x1c4>)
 800db48:	f003 fe1e 	bl	8011788 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db50:	2b00      	cmp	r3, #0
 800db52:	d103      	bne.n	800db5c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	66da      	str	r2, [r3, #108]	; 0x6c
 800db5a:	e00d      	b.n	800db78 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db60:	61bb      	str	r3, [r7, #24]
 800db62:	e002      	b.n	800db6a <tcp_enqueue_flags+0x11e>
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	61bb      	str	r3, [r7, #24]
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d1f8      	bne.n	800db64 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800db80:	78fb      	ldrb	r3, [r7, #3]
 800db82:	f003 0302 	and.w	r3, r3, #2
 800db86:	2b00      	cmp	r3, #0
 800db88:	d104      	bne.n	800db94 <tcp_enqueue_flags+0x148>
 800db8a:	78fb      	ldrb	r3, [r7, #3]
 800db8c:	f003 0301 	and.w	r3, r3, #1
 800db90:	2b00      	cmp	r3, #0
 800db92:	d004      	beq.n	800db9e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db98:	1c5a      	adds	r2, r3, #1
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800db9e:	78fb      	ldrb	r3, [r7, #3]
 800dba0:	f003 0301 	and.w	r3, r3, #1
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d006      	beq.n	800dbb6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	8b5b      	ldrh	r3, [r3, #26]
 800dbac:	f043 0320 	orr.w	r3, r3, #32
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fb fc5a 	bl	8009474 <pbuf_clen>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbca:	4413      	add	r3, r2
 800dbcc:	b29a      	uxth	r2, r3
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00e      	beq.n	800dbfc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10a      	bne.n	800dbfc <tcp_enqueue_flags+0x1b0>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d106      	bne.n	800dbfc <tcp_enqueue_flags+0x1b0>
 800dbee:	4b06      	ldr	r3, [pc, #24]	; (800dc08 <tcp_enqueue_flags+0x1bc>)
 800dbf0:	f240 4266 	movw	r2, #1126	; 0x466
 800dbf4:	490b      	ldr	r1, [pc, #44]	; (800dc24 <tcp_enqueue_flags+0x1d8>)
 800dbf6:	4806      	ldr	r0, [pc, #24]	; (800dc10 <tcp_enqueue_flags+0x1c4>)
 800dbf8:	f003 fdc6 	bl	8011788 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3720      	adds	r7, #32
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	08013ca4 	.word	0x08013ca4
 800dc0c:	080140c8 	.word	0x080140c8
 800dc10:	08013cf8 	.word	0x08013cf8
 800dc14:	08014120 	.word	0x08014120
 800dc18:	08014140 	.word	0x08014140
 800dc1c:	0801417c 	.word	0x0801417c
 800dc20:	08014194 	.word	0x08014194
 800dc24:	080141c0 	.word	0x080141c0

0800dc28 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dc28:	b5b0      	push	{r4, r5, r7, lr}
 800dc2a:	b08a      	sub	sp, #40	; 0x28
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d106      	bne.n	800dc44 <tcp_output+0x1c>
 800dc36:	4ba0      	ldr	r3, [pc, #640]	; (800deb8 <tcp_output+0x290>)
 800dc38:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800dc3c:	499f      	ldr	r1, [pc, #636]	; (800debc <tcp_output+0x294>)
 800dc3e:	48a0      	ldr	r0, [pc, #640]	; (800dec0 <tcp_output+0x298>)
 800dc40:	f003 fda2 	bl	8011788 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7d1b      	ldrb	r3, [r3, #20]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d106      	bne.n	800dc5a <tcp_output+0x32>
 800dc4c:	4b9a      	ldr	r3, [pc, #616]	; (800deb8 <tcp_output+0x290>)
 800dc4e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800dc52:	499c      	ldr	r1, [pc, #624]	; (800dec4 <tcp_output+0x29c>)
 800dc54:	489a      	ldr	r0, [pc, #616]	; (800dec0 <tcp_output+0x298>)
 800dc56:	f003 fd97 	bl	8011788 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dc5a:	4b9b      	ldr	r3, [pc, #620]	; (800dec8 <tcp_output+0x2a0>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d101      	bne.n	800dc68 <tcp_output+0x40>
    return ERR_OK;
 800dc64:	2300      	movs	r3, #0
 800dc66:	e1d2      	b.n	800e00e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d203      	bcs.n	800dc80 <tcp_output+0x58>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc7e:	e002      	b.n	800dc86 <tcp_output+0x5e>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc86:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc8c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10b      	bne.n	800dcac <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	8b5b      	ldrh	r3, [r3, #26]
 800dc98:	f003 0302 	and.w	r3, r3, #2
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f000 81a9 	beq.w	800dff4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fdd8 	bl	800e858 <tcp_send_empty_ack>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	e1b0      	b.n	800e00e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dcac:	6879      	ldr	r1, [r7, #4]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7ff fc77 	bl	800d5a8 <tcp_route>
 800dcba:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d102      	bne.n	800dcc8 <tcp_output+0xa0>
    return ERR_RTE;
 800dcc2:	f06f 0303 	mvn.w	r3, #3
 800dcc6:	e1a2      	b.n	800e00e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d003      	beq.n	800dcd6 <tcp_output+0xae>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d111      	bne.n	800dcfa <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <tcp_output+0xba>
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	3304      	adds	r3, #4
 800dce0:	e000      	b.n	800dce4 <tcp_output+0xbc>
 800dce2:	2300      	movs	r3, #0
 800dce4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d102      	bne.n	800dcf2 <tcp_output+0xca>
      return ERR_RTE;
 800dcec:	f06f 0303 	mvn.w	r3, #3
 800dcf0:	e18d      	b.n	800e00e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7f9 ff56 	bl	8007bb2 <lwip_htonl>
 800dd06:	4602      	mov	r2, r0
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd0c:	1ad3      	subs	r3, r2, r3
 800dd0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd10:	8912      	ldrh	r2, [r2, #8]
 800dd12:	4413      	add	r3, r2
 800dd14:	69ba      	ldr	r2, [r7, #24]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d227      	bcs.n	800dd6a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd20:	461a      	mov	r2, r3
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d114      	bne.n	800dd52 <tcp_output+0x12a>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d110      	bne.n	800dd52 <tcp_output+0x12a>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10b      	bne.n	800dd52 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2201      	movs	r2, #1
 800dd46:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	8b5b      	ldrh	r3, [r3, #26]
 800dd56:	f003 0302 	and.w	r3, r3, #2
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f000 814c 	beq.w	800dff8 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 fd79 	bl	800e858 <tcp_send_empty_ack>
 800dd66:	4603      	mov	r3, r0
 800dd68:	e151      	b.n	800e00e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd76:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dd78:	6a3b      	ldr	r3, [r7, #32]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f000 811b 	beq.w	800dfb6 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800dd80:	e002      	b.n	800dd88 <tcp_output+0x160>
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	623b      	str	r3, [r7, #32]
 800dd88:	6a3b      	ldr	r3, [r7, #32]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d1f8      	bne.n	800dd82 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dd90:	e111      	b.n	800dfb6 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	899b      	ldrh	r3, [r3, #12]
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7f9 fef4 	bl	8007b88 <lwip_htons>
 800dda0:	4603      	mov	r3, r0
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	f003 0304 	and.w	r3, r3, #4
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d006      	beq.n	800ddba <tcp_output+0x192>
 800ddac:	4b42      	ldr	r3, [pc, #264]	; (800deb8 <tcp_output+0x290>)
 800ddae:	f240 5237 	movw	r2, #1335	; 0x537
 800ddb2:	4946      	ldr	r1, [pc, #280]	; (800decc <tcp_output+0x2a4>)
 800ddb4:	4842      	ldr	r0, [pc, #264]	; (800dec0 <tcp_output+0x298>)
 800ddb6:	f003 fce7 	bl	8011788 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d01f      	beq.n	800de02 <tcp_output+0x1da>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	8b5b      	ldrh	r3, [r3, #26]
 800ddc6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d119      	bne.n	800de02 <tcp_output+0x1da>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00b      	beq.n	800ddee <tcp_output+0x1c6>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d110      	bne.n	800de02 <tcp_output+0x1da>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde4:	891a      	ldrh	r2, [r3, #8]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d209      	bcs.n	800de02 <tcp_output+0x1da>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d004      	beq.n	800de02 <tcp_output+0x1da>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddfe:	2b08      	cmp	r3, #8
 800de00:	d901      	bls.n	800de06 <tcp_output+0x1de>
 800de02:	2301      	movs	r3, #1
 800de04:	e000      	b.n	800de08 <tcp_output+0x1e0>
 800de06:	2300      	movs	r3, #0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	8b5b      	ldrh	r3, [r3, #26]
 800de10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800de14:	2b00      	cmp	r3, #0
 800de16:	f000 80e3 	beq.w	800dfe0 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	7d1b      	ldrb	r3, [r3, #20]
 800de1e:	2b02      	cmp	r3, #2
 800de20:	d00d      	beq.n	800de3e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800de22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	899b      	ldrh	r3, [r3, #12]
 800de28:	b29c      	uxth	r4, r3
 800de2a:	2010      	movs	r0, #16
 800de2c:	f7f9 feac 	bl	8007b88 <lwip_htons>
 800de30:	4603      	mov	r3, r0
 800de32:	461a      	mov	r2, r3
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	4322      	orrs	r2, r4
 800de3a:	b292      	uxth	r2, r2
 800de3c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800de3e:	697a      	ldr	r2, [r7, #20]
 800de40:	6879      	ldr	r1, [r7, #4]
 800de42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de44:	f000 f908 	bl	800e058 <tcp_output_segment>
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800de4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d009      	beq.n	800de68 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	8b5b      	ldrh	r3, [r3, #26]
 800de58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	835a      	strh	r2, [r3, #26]
      return err;
 800de62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de66:	e0d2      	b.n	800e00e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	7d1b      	ldrb	r3, [r3, #20]
 800de74:	2b02      	cmp	r3, #2
 800de76:	d006      	beq.n	800de86 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	8b5b      	ldrh	r3, [r3, #26]
 800de7c:	f023 0303 	bic.w	r3, r3, #3
 800de80:	b29a      	uxth	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7f9 fe90 	bl	8007bb2 <lwip_htonl>
 800de92:	4604      	mov	r4, r0
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	891b      	ldrh	r3, [r3, #8]
 800de98:	461d      	mov	r5, r3
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	899b      	ldrh	r3, [r3, #12]
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7f9 fe70 	bl	8007b88 <lwip_htons>
 800dea8:	4603      	mov	r3, r0
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	f003 0303 	and.w	r3, r3, #3
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00d      	beq.n	800ded0 <tcp_output+0x2a8>
 800deb4:	2301      	movs	r3, #1
 800deb6:	e00c      	b.n	800ded2 <tcp_output+0x2aa>
 800deb8:	08013ca4 	.word	0x08013ca4
 800debc:	080141e8 	.word	0x080141e8
 800dec0:	08013cf8 	.word	0x08013cf8
 800dec4:	08014200 	.word	0x08014200
 800dec8:	24004c78 	.word	0x24004c78
 800decc:	08014228 	.word	0x08014228
 800ded0:	2300      	movs	r3, #0
 800ded2:	442b      	add	r3, r5
 800ded4:	4423      	add	r3, r4
 800ded6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	1ad3      	subs	r3, r2, r3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	da02      	bge.n	800deea <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	891b      	ldrh	r3, [r3, #8]
 800deee:	461c      	mov	r4, r3
 800def0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	899b      	ldrh	r3, [r3, #12]
 800def6:	b29b      	uxth	r3, r3
 800def8:	4618      	mov	r0, r3
 800defa:	f7f9 fe45 	bl	8007b88 <lwip_htons>
 800defe:	4603      	mov	r3, r0
 800df00:	b2db      	uxtb	r3, r3
 800df02:	f003 0303 	and.w	r3, r3, #3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d001      	beq.n	800df0e <tcp_output+0x2e6>
 800df0a:	2301      	movs	r3, #1
 800df0c:	e000      	b.n	800df10 <tcp_output+0x2e8>
 800df0e:	2300      	movs	r3, #0
 800df10:	4423      	add	r3, r4
 800df12:	2b00      	cmp	r3, #0
 800df14:	d049      	beq.n	800dfaa <tcp_output+0x382>
      seg->next = NULL;
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df20:	2b00      	cmp	r3, #0
 800df22:	d105      	bne.n	800df30 <tcp_output+0x308>
        pcb->unacked = seg;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df28:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	623b      	str	r3, [r7, #32]
 800df2e:	e03f      	b.n	800dfb0 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800df30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	4618      	mov	r0, r3
 800df38:	f7f9 fe3b 	bl	8007bb2 <lwip_htonl>
 800df3c:	4604      	mov	r4, r0
 800df3e:	6a3b      	ldr	r3, [r7, #32]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	4618      	mov	r0, r3
 800df46:	f7f9 fe34 	bl	8007bb2 <lwip_htonl>
 800df4a:	4603      	mov	r3, r0
 800df4c:	1ae3      	subs	r3, r4, r3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	da24      	bge.n	800df9c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	3370      	adds	r3, #112	; 0x70
 800df56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800df58:	e002      	b.n	800df60 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d011      	beq.n	800df8c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	4618      	mov	r0, r3
 800df72:	f7f9 fe1e 	bl	8007bb2 <lwip_htonl>
 800df76:	4604      	mov	r4, r0
 800df78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	4618      	mov	r0, r3
 800df80:	f7f9 fe17 	bl	8007bb2 <lwip_htonl>
 800df84:	4603      	mov	r3, r0
 800df86:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800df88:	2b00      	cmp	r3, #0
 800df8a:	dbe6      	blt.n	800df5a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	e009      	b.n	800dfb0 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfa0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800dfa2:	6a3b      	ldr	r3, [r7, #32]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	623b      	str	r3, [r7, #32]
 800dfa8:	e002      	b.n	800dfb0 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800dfaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfac:	f7fc fc42 	bl	800a834 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d012      	beq.n	800dfe2 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7f9 fdf5 	bl	8007bb2 <lwip_htonl>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfce:	1ad3      	subs	r3, r2, r3
 800dfd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfd2:	8912      	ldrh	r2, [r2, #8]
 800dfd4:	4413      	add	r3, r2
  while (seg != NULL &&
 800dfd6:	69ba      	ldr	r2, [r7, #24]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	f4bf aeda 	bcs.w	800dd92 <tcp_output+0x16a>
 800dfde:	e000      	b.n	800dfe2 <tcp_output+0x3ba>
      break;
 800dfe0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d108      	bne.n	800dffc <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800dff2:	e004      	b.n	800dffe <tcp_output+0x3d6>
    goto output_done;
 800dff4:	bf00      	nop
 800dff6:	e002      	b.n	800dffe <tcp_output+0x3d6>
    goto output_done;
 800dff8:	bf00      	nop
 800dffa:	e000      	b.n	800dffe <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800dffc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	8b5b      	ldrh	r3, [r3, #26]
 800e002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e006:	b29a      	uxth	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3728      	adds	r7, #40	; 0x28
 800e012:	46bd      	mov	sp, r7
 800e014:	bdb0      	pop	{r4, r5, r7, pc}
 800e016:	bf00      	nop

0800e018 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d106      	bne.n	800e034 <tcp_output_segment_busy+0x1c>
 800e026:	4b09      	ldr	r3, [pc, #36]	; (800e04c <tcp_output_segment_busy+0x34>)
 800e028:	f240 529a 	movw	r2, #1434	; 0x59a
 800e02c:	4908      	ldr	r1, [pc, #32]	; (800e050 <tcp_output_segment_busy+0x38>)
 800e02e:	4809      	ldr	r0, [pc, #36]	; (800e054 <tcp_output_segment_busy+0x3c>)
 800e030:	f003 fbaa 	bl	8011788 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	7b9b      	ldrb	r3, [r3, #14]
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d001      	beq.n	800e042 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e03e:	2301      	movs	r3, #1
 800e040:	e000      	b.n	800e044 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e042:	2300      	movs	r3, #0
}
 800e044:	4618      	mov	r0, r3
 800e046:	3708      	adds	r7, #8
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	08013ca4 	.word	0x08013ca4
 800e050:	08014240 	.word	0x08014240
 800e054:	08013cf8 	.word	0x08013cf8

0800e058 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e058:	b5b0      	push	{r4, r5, r7, lr}
 800e05a:	b08c      	sub	sp, #48	; 0x30
 800e05c:	af04      	add	r7, sp, #16
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d106      	bne.n	800e078 <tcp_output_segment+0x20>
 800e06a:	4b64      	ldr	r3, [pc, #400]	; (800e1fc <tcp_output_segment+0x1a4>)
 800e06c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e070:	4963      	ldr	r1, [pc, #396]	; (800e200 <tcp_output_segment+0x1a8>)
 800e072:	4864      	ldr	r0, [pc, #400]	; (800e204 <tcp_output_segment+0x1ac>)
 800e074:	f003 fb88 	bl	8011788 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d106      	bne.n	800e08c <tcp_output_segment+0x34>
 800e07e:	4b5f      	ldr	r3, [pc, #380]	; (800e1fc <tcp_output_segment+0x1a4>)
 800e080:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e084:	4960      	ldr	r1, [pc, #384]	; (800e208 <tcp_output_segment+0x1b0>)
 800e086:	485f      	ldr	r0, [pc, #380]	; (800e204 <tcp_output_segment+0x1ac>)
 800e088:	f003 fb7e 	bl	8011788 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d106      	bne.n	800e0a0 <tcp_output_segment+0x48>
 800e092:	4b5a      	ldr	r3, [pc, #360]	; (800e1fc <tcp_output_segment+0x1a4>)
 800e094:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e098:	495c      	ldr	r1, [pc, #368]	; (800e20c <tcp_output_segment+0x1b4>)
 800e09a:	485a      	ldr	r0, [pc, #360]	; (800e204 <tcp_output_segment+0x1ac>)
 800e09c:	f003 fb74 	bl	8011788 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f7ff ffb9 	bl	800e018 <tcp_output_segment_busy>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	e0a0      	b.n	800e1f2 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	68dc      	ldr	r4, [r3, #12]
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	f7f9 fd7a 	bl	8007bb2 <lwip_htonl>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	68dc      	ldr	r4, [r3, #12]
 800e0ca:	4610      	mov	r0, r2
 800e0cc:	f7f9 fd5c 	bl	8007b88 <lwip_htons>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d8:	68ba      	ldr	r2, [r7, #8]
 800e0da:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e0dc:	441a      	add	r2, r3
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	3314      	adds	r3, #20
 800e0e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	7a9b      	ldrb	r3, [r3, #10]
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d015      	beq.n	800e122 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	6879      	ldr	r1, [r7, #4]
 800e0fe:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e102:	f7fc fe8d 	bl	800ae20 <tcp_eff_send_mss_netif>
 800e106:	4603      	mov	r3, r0
 800e108:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e10a:	8b7b      	ldrh	r3, [r7, #26]
 800e10c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e110:	4618      	mov	r0, r3
 800e112:	f7f9 fd4e 	bl	8007bb2 <lwip_htonl>
 800e116:	4602      	mov	r2, r0
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	3304      	adds	r3, #4
 800e120:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e128:	2b00      	cmp	r3, #0
 800e12a:	da02      	bge.n	800e132 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	2200      	movs	r2, #0
 800e130:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10c      	bne.n	800e154 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e13a:	4b35      	ldr	r3, [pc, #212]	; (800e210 <tcp_output_segment+0x1b8>)
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	4618      	mov	r0, r3
 800e14a:	f7f9 fd32 	bl	8007bb2 <lwip_htonl>
 800e14e:	4602      	mov	r2, r0
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	461a      	mov	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	8959      	ldrh	r1, [r3, #10]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	8b3a      	ldrh	r2, [r7, #24]
 800e170:	1a8a      	subs	r2, r1, r2
 800e172:	b292      	uxth	r2, r2
 800e174:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	8919      	ldrh	r1, [r3, #8]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	8b3a      	ldrh	r2, [r7, #24]
 800e182:	1a8a      	subs	r2, r1, r2
 800e184:	b292      	uxth	r2, r2
 800e186:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	68d2      	ldr	r2, [r2, #12]
 800e190:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	2200      	movs	r2, #0
 800e198:	741a      	strb	r2, [r3, #16]
 800e19a:	2200      	movs	r2, #0
 800e19c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	f103 0214 	add.w	r2, r3, #20
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	7a9b      	ldrb	r3, [r3, #10]
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	4413      	add	r3, r2
 800e1b2:	69fa      	ldr	r2, [r7, #28]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d006      	beq.n	800e1c6 <tcp_output_segment+0x16e>
 800e1b8:	4b10      	ldr	r3, [pc, #64]	; (800e1fc <tcp_output_segment+0x1a4>)
 800e1ba:	f240 621c 	movw	r2, #1564	; 0x61c
 800e1be:	4915      	ldr	r1, [pc, #84]	; (800e214 <tcp_output_segment+0x1bc>)
 800e1c0:	4810      	ldr	r0, [pc, #64]	; (800e204 <tcp_output_segment+0x1ac>)
 800e1c2:	f003 fae1 	bl	8011788 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6858      	ldr	r0, [r3, #4]
 800e1ca:	68b9      	ldr	r1, [r7, #8]
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	1d1c      	adds	r4, r3, #4
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	7add      	ldrb	r5, [r3, #11]
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	7a9b      	ldrb	r3, [r3, #10]
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	9202      	str	r2, [sp, #8]
 800e1dc:	2206      	movs	r2, #6
 800e1de:	9201      	str	r2, [sp, #4]
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	4622      	mov	r2, r4
 800e1e6:	f002 fa65 	bl	80106b4 <ip4_output_if>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e1ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3720      	adds	r7, #32
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bdb0      	pop	{r4, r5, r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	08013ca4 	.word	0x08013ca4
 800e200:	08014268 	.word	0x08014268
 800e204:	08013cf8 	.word	0x08013cf8
 800e208:	08014288 	.word	0x08014288
 800e20c:	080142a8 	.word	0x080142a8
 800e210:	24004c68 	.word	0x24004c68
 800e214:	080142cc 	.word	0x080142cc

0800e218 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e218:	b5b0      	push	{r4, r5, r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <tcp_rexmit_rto_prepare+0x1c>
 800e226:	4b31      	ldr	r3, [pc, #196]	; (800e2ec <tcp_rexmit_rto_prepare+0xd4>)
 800e228:	f240 6263 	movw	r2, #1635	; 0x663
 800e22c:	4930      	ldr	r1, [pc, #192]	; (800e2f0 <tcp_rexmit_rto_prepare+0xd8>)
 800e22e:	4831      	ldr	r0, [pc, #196]	; (800e2f4 <tcp_rexmit_rto_prepare+0xdc>)
 800e230:	f003 faaa 	bl	8011788 <iprintf>

  if (pcb->unacked == NULL) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d102      	bne.n	800e242 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e23c:	f06f 0305 	mvn.w	r3, #5
 800e240:	e050      	b.n	800e2e4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	e00b      	b.n	800e262 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f7ff fee4 	bl	800e018 <tcp_output_segment_busy>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e256:	f06f 0305 	mvn.w	r3, #5
 800e25a:	e043      	b.n	800e2e4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	60fb      	str	r3, [r7, #12]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1ef      	bne.n	800e24a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f7ff fed4 	bl	800e018 <tcp_output_segment_busy>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d002      	beq.n	800e27c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e276:	f06f 0305 	mvn.w	r3, #5
 800e27a:	e033      	b.n	800e2e4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	8b5b      	ldrh	r3, [r3, #26]
 800e296:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7f9 fc83 	bl	8007bb2 <lwip_htonl>
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	891b      	ldrh	r3, [r3, #8]
 800e2b2:	461d      	mov	r5, r3
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	899b      	ldrh	r3, [r3, #12]
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7f9 fc63 	bl	8007b88 <lwip_htons>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	f003 0303 	and.w	r3, r3, #3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d001      	beq.n	800e2d2 <tcp_rexmit_rto_prepare+0xba>
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e000      	b.n	800e2d4 <tcp_rexmit_rto_prepare+0xbc>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	442b      	add	r3, r5
 800e2d6:	18e2      	adds	r2, r4, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bdb0      	pop	{r4, r5, r7, pc}
 800e2ec:	08013ca4 	.word	0x08013ca4
 800e2f0:	080142e0 	.word	0x080142e0
 800e2f4:	08013cf8 	.word	0x08013cf8

0800e2f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d106      	bne.n	800e314 <tcp_rexmit_rto_commit+0x1c>
 800e306:	4b0d      	ldr	r3, [pc, #52]	; (800e33c <tcp_rexmit_rto_commit+0x44>)
 800e308:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e30c:	490c      	ldr	r1, [pc, #48]	; (800e340 <tcp_rexmit_rto_commit+0x48>)
 800e30e:	480d      	ldr	r0, [pc, #52]	; (800e344 <tcp_rexmit_rto_commit+0x4c>)
 800e310:	f003 fa3a 	bl	8011788 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e31a:	2bff      	cmp	r3, #255	; 0xff
 800e31c:	d007      	beq.n	800e32e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e324:	3301      	adds	r3, #1
 800e326:	b2da      	uxtb	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f7ff fc7a 	bl	800dc28 <tcp_output>
}
 800e334:	bf00      	nop
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	08013ca4 	.word	0x08013ca4
 800e340:	08014304 	.word	0x08014304
 800e344:	08013cf8 	.word	0x08013cf8

0800e348 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d106      	bne.n	800e364 <tcp_rexmit_rto+0x1c>
 800e356:	4b0a      	ldr	r3, [pc, #40]	; (800e380 <tcp_rexmit_rto+0x38>)
 800e358:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e35c:	4909      	ldr	r1, [pc, #36]	; (800e384 <tcp_rexmit_rto+0x3c>)
 800e35e:	480a      	ldr	r0, [pc, #40]	; (800e388 <tcp_rexmit_rto+0x40>)
 800e360:	f003 fa12 	bl	8011788 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7ff ff57 	bl	800e218 <tcp_rexmit_rto_prepare>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d102      	bne.n	800e376 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7ff ffc1 	bl	800e2f8 <tcp_rexmit_rto_commit>
  }
}
 800e376:	bf00      	nop
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	08013ca4 	.word	0x08013ca4
 800e384:	08014328 	.word	0x08014328
 800e388:	08013cf8 	.word	0x08013cf8

0800e38c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e38c:	b590      	push	{r4, r7, lr}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d106      	bne.n	800e3a8 <tcp_rexmit+0x1c>
 800e39a:	4b2f      	ldr	r3, [pc, #188]	; (800e458 <tcp_rexmit+0xcc>)
 800e39c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e3a0:	492e      	ldr	r1, [pc, #184]	; (800e45c <tcp_rexmit+0xd0>)
 800e3a2:	482f      	ldr	r0, [pc, #188]	; (800e460 <tcp_rexmit+0xd4>)
 800e3a4:	f003 f9f0 	bl	8011788 <iprintf>

  if (pcb->unacked == NULL) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d102      	bne.n	800e3b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e3b0:	f06f 0305 	mvn.w	r3, #5
 800e3b4:	e04c      	b.n	800e450 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e3bc:	68b8      	ldr	r0, [r7, #8]
 800e3be:	f7ff fe2b 	bl	800e018 <tcp_output_segment_busy>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d002      	beq.n	800e3ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e3c8:	f06f 0305 	mvn.w	r3, #5
 800e3cc:	e040      	b.n	800e450 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	336c      	adds	r3, #108	; 0x6c
 800e3da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e3dc:	e002      	b.n	800e3e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d011      	beq.n	800e410 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7f9 fbdc 	bl	8007bb2 <lwip_htonl>
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	4618      	mov	r0, r3
 800e404:	f7f9 fbd5 	bl	8007bb2 <lwip_htonl>
 800e408:	4603      	mov	r3, r0
 800e40a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dbe6      	blt.n	800e3de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d103      	bne.n	800e42e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e434:	2bff      	cmp	r3, #255	; 0xff
 800e436:	d007      	beq.n	800e448 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e43e:	3301      	adds	r3, #1
 800e440:	b2da      	uxtb	r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e44e:	2300      	movs	r3, #0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3714      	adds	r7, #20
 800e454:	46bd      	mov	sp, r7
 800e456:	bd90      	pop	{r4, r7, pc}
 800e458:	08013ca4 	.word	0x08013ca4
 800e45c:	08014344 	.word	0x08014344
 800e460:	08013cf8 	.word	0x08013cf8

0800e464 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d106      	bne.n	800e480 <tcp_rexmit_fast+0x1c>
 800e472:	4b2f      	ldr	r3, [pc, #188]	; (800e530 <tcp_rexmit_fast+0xcc>)
 800e474:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e478:	492e      	ldr	r1, [pc, #184]	; (800e534 <tcp_rexmit_fast+0xd0>)
 800e47a:	482f      	ldr	r0, [pc, #188]	; (800e538 <tcp_rexmit_fast+0xd4>)
 800e47c:	f003 f984 	bl	8011788 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e484:	2b00      	cmp	r3, #0
 800e486:	d04f      	beq.n	800e528 <tcp_rexmit_fast+0xc4>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8b5b      	ldrh	r3, [r3, #26]
 800e48c:	f003 0304 	and.w	r3, r3, #4
 800e490:	2b00      	cmp	r3, #0
 800e492:	d149      	bne.n	800e528 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7ff ff79 	bl	800e38c <tcp_rexmit>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d143      	bne.n	800e528 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d208      	bcs.n	800e4c2 <tcp_rexmit_fast+0x5e>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	da00      	bge.n	800e4bc <tcp_rexmit_fast+0x58>
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	105b      	asrs	r3, r3, #1
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	e007      	b.n	800e4d2 <tcp_rexmit_fast+0x6e>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	da00      	bge.n	800e4ce <tcp_rexmit_fast+0x6a>
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	105b      	asrs	r3, r3, #1
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e4de:	461a      	mov	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4e4:	005b      	lsls	r3, r3, #1
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d206      	bcs.n	800e4f8 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4ee:	005b      	lsls	r3, r3, #1
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e502:	4619      	mov	r1, r3
 800e504:	0049      	lsls	r1, r1, #1
 800e506:	440b      	add	r3, r1
 800e508:	b29b      	uxth	r3, r3
 800e50a:	4413      	add	r3, r2
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	8b5b      	ldrh	r3, [r3, #26]
 800e518:	f043 0304 	orr.w	r3, r3, #4
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e528:	bf00      	nop
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	08013ca4 	.word	0x08013ca4
 800e534:	0801435c 	.word	0x0801435c
 800e538:	08013cf8 	.word	0x08013cf8

0800e53c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b086      	sub	sp, #24
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	607b      	str	r3, [r7, #4]
 800e546:	460b      	mov	r3, r1
 800e548:	817b      	strh	r3, [r7, #10]
 800e54a:	4613      	mov	r3, r2
 800e54c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e54e:	897a      	ldrh	r2, [r7, #10]
 800e550:	893b      	ldrh	r3, [r7, #8]
 800e552:	4413      	add	r3, r2
 800e554:	b29b      	uxth	r3, r3
 800e556:	3314      	adds	r3, #20
 800e558:	b29b      	uxth	r3, r3
 800e55a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e55e:	4619      	mov	r1, r3
 800e560:	2022      	movs	r0, #34	; 0x22
 800e562:	f7fa fc1f 	bl	8008da4 <pbuf_alloc>
 800e566:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d04e      	beq.n	800e60c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	895b      	ldrh	r3, [r3, #10]
 800e572:	461a      	mov	r2, r3
 800e574:	897b      	ldrh	r3, [r7, #10]
 800e576:	3314      	adds	r3, #20
 800e578:	429a      	cmp	r2, r3
 800e57a:	da06      	bge.n	800e58a <tcp_output_alloc_header_common+0x4e>
 800e57c:	4b26      	ldr	r3, [pc, #152]	; (800e618 <tcp_output_alloc_header_common+0xdc>)
 800e57e:	f240 7224 	movw	r2, #1828	; 0x724
 800e582:	4926      	ldr	r1, [pc, #152]	; (800e61c <tcp_output_alloc_header_common+0xe0>)
 800e584:	4826      	ldr	r0, [pc, #152]	; (800e620 <tcp_output_alloc_header_common+0xe4>)
 800e586:	f003 f8ff 	bl	8011788 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e590:	8c3b      	ldrh	r3, [r7, #32]
 800e592:	4618      	mov	r0, r3
 800e594:	f7f9 faf8 	bl	8007b88 <lwip_htons>
 800e598:	4603      	mov	r3, r0
 800e59a:	461a      	mov	r2, r3
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e5a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7f9 faf0 	bl	8007b88 <lwip_htons>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	f7f9 fafb 	bl	8007bb2 <lwip_htonl>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e5c2:	897b      	ldrh	r3, [r7, #10]
 800e5c4:	089b      	lsrs	r3, r3, #2
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	3305      	adds	r3, #5
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	031b      	lsls	r3, r3, #12
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7f9 fad4 	bl	8007b88 <lwip_htons>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e5e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7f9 facc 	bl	8007b88 <lwip_htons>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	741a      	strb	r2, [r3, #16]
 800e5fe:	2200      	movs	r2, #0
 800e600:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	2200      	movs	r2, #0
 800e606:	749a      	strb	r2, [r3, #18]
 800e608:	2200      	movs	r2, #0
 800e60a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e60c:	697b      	ldr	r3, [r7, #20]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	08013ca4 	.word	0x08013ca4
 800e61c:	0801437c 	.word	0x0801437c
 800e620:	08013cf8 	.word	0x08013cf8

0800e624 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e624:	b5b0      	push	{r4, r5, r7, lr}
 800e626:	b08a      	sub	sp, #40	; 0x28
 800e628:	af04      	add	r7, sp, #16
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	607b      	str	r3, [r7, #4]
 800e62e:	460b      	mov	r3, r1
 800e630:	817b      	strh	r3, [r7, #10]
 800e632:	4613      	mov	r3, r2
 800e634:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d106      	bne.n	800e64a <tcp_output_alloc_header+0x26>
 800e63c:	4b15      	ldr	r3, [pc, #84]	; (800e694 <tcp_output_alloc_header+0x70>)
 800e63e:	f240 7242 	movw	r2, #1858	; 0x742
 800e642:	4915      	ldr	r1, [pc, #84]	; (800e698 <tcp_output_alloc_header+0x74>)
 800e644:	4815      	ldr	r0, [pc, #84]	; (800e69c <tcp_output_alloc_header+0x78>)
 800e646:	f003 f89f 	bl	8011788 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	8adb      	ldrh	r3, [r3, #22]
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	8b12      	ldrh	r2, [r2, #24]
 800e656:	68f9      	ldr	r1, [r7, #12]
 800e658:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e65a:	893d      	ldrh	r5, [r7, #8]
 800e65c:	897c      	ldrh	r4, [r7, #10]
 800e65e:	9103      	str	r1, [sp, #12]
 800e660:	2110      	movs	r1, #16
 800e662:	9102      	str	r1, [sp, #8]
 800e664:	9201      	str	r2, [sp, #4]
 800e666:	9300      	str	r3, [sp, #0]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	462a      	mov	r2, r5
 800e66c:	4621      	mov	r1, r4
 800e66e:	f7ff ff65 	bl	800e53c <tcp_output_alloc_header_common>
 800e672:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d006      	beq.n	800e688 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e682:	441a      	add	r2, r3
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e688:	697b      	ldr	r3, [r7, #20]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bdb0      	pop	{r4, r5, r7, pc}
 800e692:	bf00      	nop
 800e694:	08013ca4 	.word	0x08013ca4
 800e698:	080143ac 	.word	0x080143ac
 800e69c:	08013cf8 	.word	0x08013cf8

0800e6a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	71fb      	strb	r3, [r7, #7]
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d106      	bne.n	800e6ce <tcp_output_fill_options+0x2e>
 800e6c0:	4b13      	ldr	r3, [pc, #76]	; (800e710 <tcp_output_fill_options+0x70>)
 800e6c2:	f240 7256 	movw	r2, #1878	; 0x756
 800e6c6:	4913      	ldr	r1, [pc, #76]	; (800e714 <tcp_output_fill_options+0x74>)
 800e6c8:	4813      	ldr	r0, [pc, #76]	; (800e718 <tcp_output_fill_options+0x78>)
 800e6ca:	f003 f85d 	bl	8011788 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e6d4:	69bb      	ldr	r3, [r7, #24]
 800e6d6:	3314      	adds	r3, #20
 800e6d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	f103 0214 	add.w	r2, r3, #20
 800e6e0:	8bfb      	ldrh	r3, [r7, #30]
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	f003 0304 	and.w	r3, r3, #4
 800e6ee:	440b      	add	r3, r1
 800e6f0:	4413      	add	r3, r2
 800e6f2:	697a      	ldr	r2, [r7, #20]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d006      	beq.n	800e706 <tcp_output_fill_options+0x66>
 800e6f8:	4b05      	ldr	r3, [pc, #20]	; (800e710 <tcp_output_fill_options+0x70>)
 800e6fa:	f240 7275 	movw	r2, #1909	; 0x775
 800e6fe:	4907      	ldr	r1, [pc, #28]	; (800e71c <tcp_output_fill_options+0x7c>)
 800e700:	4805      	ldr	r0, [pc, #20]	; (800e718 <tcp_output_fill_options+0x78>)
 800e702:	f003 f841 	bl	8011788 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e706:	bf00      	nop
 800e708:	3720      	adds	r7, #32
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	08013ca4 	.word	0x08013ca4
 800e714:	080143d4 	.word	0x080143d4
 800e718:	08013cf8 	.word	0x08013cf8
 800e71c:	080142cc 	.word	0x080142cc

0800e720 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b08a      	sub	sp, #40	; 0x28
 800e724:	af04      	add	r7, sp, #16
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
 800e72c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d106      	bne.n	800e742 <tcp_output_control_segment+0x22>
 800e734:	4b1c      	ldr	r3, [pc, #112]	; (800e7a8 <tcp_output_control_segment+0x88>)
 800e736:	f240 7287 	movw	r2, #1927	; 0x787
 800e73a:	491c      	ldr	r1, [pc, #112]	; (800e7ac <tcp_output_control_segment+0x8c>)
 800e73c:	481c      	ldr	r0, [pc, #112]	; (800e7b0 <tcp_output_control_segment+0x90>)
 800e73e:	f003 f823 	bl	8011788 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	6879      	ldr	r1, [r7, #4]
 800e746:	68f8      	ldr	r0, [r7, #12]
 800e748:	f7fe ff2e 	bl	800d5a8 <tcp_route>
 800e74c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d102      	bne.n	800e75a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e754:	23fc      	movs	r3, #252	; 0xfc
 800e756:	75fb      	strb	r3, [r7, #23]
 800e758:	e01c      	b.n	800e794 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d006      	beq.n	800e76e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	7adb      	ldrb	r3, [r3, #11]
 800e764:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	7a9b      	ldrb	r3, [r3, #10]
 800e76a:	757b      	strb	r3, [r7, #21]
 800e76c:	e003      	b.n	800e776 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e76e:	23ff      	movs	r3, #255	; 0xff
 800e770:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e776:	7dba      	ldrb	r2, [r7, #22]
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	9302      	str	r3, [sp, #8]
 800e77c:	2306      	movs	r3, #6
 800e77e:	9301      	str	r3, [sp, #4]
 800e780:	7d7b      	ldrb	r3, [r7, #21]
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	4613      	mov	r3, r2
 800e786:	683a      	ldr	r2, [r7, #0]
 800e788:	6879      	ldr	r1, [r7, #4]
 800e78a:	68b8      	ldr	r0, [r7, #8]
 800e78c:	f001 ff92 	bl	80106b4 <ip4_output_if>
 800e790:	4603      	mov	r3, r0
 800e792:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e794:	68b8      	ldr	r0, [r7, #8]
 800e796:	f7fa fde5 	bl	8009364 <pbuf_free>
  return err;
 800e79a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3718      	adds	r7, #24
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	08013ca4 	.word	0x08013ca4
 800e7ac:	080143fc 	.word	0x080143fc
 800e7b0:	08013cf8 	.word	0x08013cf8

0800e7b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e7b4:	b590      	push	{r4, r7, lr}
 800e7b6:	b08b      	sub	sp, #44	; 0x2c
 800e7b8:	af04      	add	r7, sp, #16
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
 800e7c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d106      	bne.n	800e7d6 <tcp_rst+0x22>
 800e7c8:	4b1f      	ldr	r3, [pc, #124]	; (800e848 <tcp_rst+0x94>)
 800e7ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e7ce:	491f      	ldr	r1, [pc, #124]	; (800e84c <tcp_rst+0x98>)
 800e7d0:	481f      	ldr	r0, [pc, #124]	; (800e850 <tcp_rst+0x9c>)
 800e7d2:	f002 ffd9 	bl	8011788 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d106      	bne.n	800e7ea <tcp_rst+0x36>
 800e7dc:	4b1a      	ldr	r3, [pc, #104]	; (800e848 <tcp_rst+0x94>)
 800e7de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e7e2:	491c      	ldr	r1, [pc, #112]	; (800e854 <tcp_rst+0xa0>)
 800e7e4:	481a      	ldr	r0, [pc, #104]	; (800e850 <tcp_rst+0x9c>)
 800e7e6:	f002 ffcf 	bl	8011788 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e7ee:	f246 0308 	movw	r3, #24584	; 0x6008
 800e7f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e7f4:	7dfb      	ldrb	r3, [r7, #23]
 800e7f6:	b29c      	uxth	r4, r3
 800e7f8:	68b8      	ldr	r0, [r7, #8]
 800e7fa:	f7f9 f9da 	bl	8007bb2 <lwip_htonl>
 800e7fe:	4602      	mov	r2, r0
 800e800:	8abb      	ldrh	r3, [r7, #20]
 800e802:	9303      	str	r3, [sp, #12]
 800e804:	2314      	movs	r3, #20
 800e806:	9302      	str	r3, [sp, #8]
 800e808:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e80a:	9301      	str	r3, [sp, #4]
 800e80c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e80e:	9300      	str	r3, [sp, #0]
 800e810:	4613      	mov	r3, r2
 800e812:	2200      	movs	r2, #0
 800e814:	4621      	mov	r1, r4
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7ff fe90 	bl	800e53c <tcp_output_alloc_header_common>
 800e81c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00c      	beq.n	800e83e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e824:	7dfb      	ldrb	r3, [r7, #23]
 800e826:	2200      	movs	r2, #0
 800e828:	6939      	ldr	r1, [r7, #16]
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f7ff ff38 	bl	800e6a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e832:	683a      	ldr	r2, [r7, #0]
 800e834:	6939      	ldr	r1, [r7, #16]
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f7ff ff72 	bl	800e720 <tcp_output_control_segment>
 800e83c:	e000      	b.n	800e840 <tcp_rst+0x8c>
    return;
 800e83e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e840:	371c      	adds	r7, #28
 800e842:	46bd      	mov	sp, r7
 800e844:	bd90      	pop	{r4, r7, pc}
 800e846:	bf00      	nop
 800e848:	08013ca4 	.word	0x08013ca4
 800e84c:	08014428 	.word	0x08014428
 800e850:	08013cf8 	.word	0x08013cf8
 800e854:	08014444 	.word	0x08014444

0800e858 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e858:	b590      	push	{r4, r7, lr}
 800e85a:	b087      	sub	sp, #28
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e860:	2300      	movs	r3, #0
 800e862:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e864:	2300      	movs	r3, #0
 800e866:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d106      	bne.n	800e87c <tcp_send_empty_ack+0x24>
 800e86e:	4b28      	ldr	r3, [pc, #160]	; (800e910 <tcp_send_empty_ack+0xb8>)
 800e870:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e874:	4927      	ldr	r1, [pc, #156]	; (800e914 <tcp_send_empty_ack+0xbc>)
 800e876:	4828      	ldr	r0, [pc, #160]	; (800e918 <tcp_send_empty_ack+0xc0>)
 800e878:	f002 ff86 	bl	8011788 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	009b      	lsls	r3, r3, #2
 800e880:	b2db      	uxtb	r3, r3
 800e882:	f003 0304 	and.w	r3, r3, #4
 800e886:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e888:	7d7b      	ldrb	r3, [r7, #21]
 800e88a:	b29c      	uxth	r4, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e890:	4618      	mov	r0, r3
 800e892:	f7f9 f98e 	bl	8007bb2 <lwip_htonl>
 800e896:	4603      	mov	r3, r0
 800e898:	2200      	movs	r2, #0
 800e89a:	4621      	mov	r1, r4
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7ff fec1 	bl	800e624 <tcp_output_alloc_header>
 800e8a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d109      	bne.n	800e8be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	8b5b      	ldrh	r3, [r3, #26]
 800e8ae:	f043 0303 	orr.w	r3, r3, #3
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e8b8:	f06f 0301 	mvn.w	r3, #1
 800e8bc:	e023      	b.n	800e906 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e8be:	7dbb      	ldrb	r3, [r7, #22]
 800e8c0:	7dfa      	ldrb	r2, [r7, #23]
 800e8c2:	6939      	ldr	r1, [r7, #16]
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7ff feeb 	bl	800e6a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	6939      	ldr	r1, [r7, #16]
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7ff ff24 	bl	800e720 <tcp_output_control_segment>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e8dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d007      	beq.n	800e8f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	8b5b      	ldrh	r3, [r3, #26]
 800e8e8:	f043 0303 	orr.w	r3, r3, #3
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	835a      	strh	r2, [r3, #26]
 800e8f2:	e006      	b.n	800e902 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	8b5b      	ldrh	r3, [r3, #26]
 800e8f8:	f023 0303 	bic.w	r3, r3, #3
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e902:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e906:	4618      	mov	r0, r3
 800e908:	371c      	adds	r7, #28
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd90      	pop	{r4, r7, pc}
 800e90e:	bf00      	nop
 800e910:	08013ca4 	.word	0x08013ca4
 800e914:	08014460 	.word	0x08014460
 800e918:	08013cf8 	.word	0x08013cf8

0800e91c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e91c:	b590      	push	{r4, r7, lr}
 800e91e:	b087      	sub	sp, #28
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e924:	2300      	movs	r3, #0
 800e926:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d106      	bne.n	800e93c <tcp_keepalive+0x20>
 800e92e:	4b18      	ldr	r3, [pc, #96]	; (800e990 <tcp_keepalive+0x74>)
 800e930:	f640 0224 	movw	r2, #2084	; 0x824
 800e934:	4917      	ldr	r1, [pc, #92]	; (800e994 <tcp_keepalive+0x78>)
 800e936:	4818      	ldr	r0, [pc, #96]	; (800e998 <tcp_keepalive+0x7c>)
 800e938:	f002 ff26 	bl	8011788 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e93c:	7dfb      	ldrb	r3, [r7, #23]
 800e93e:	b29c      	uxth	r4, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e944:	3b01      	subs	r3, #1
 800e946:	4618      	mov	r0, r3
 800e948:	f7f9 f933 	bl	8007bb2 <lwip_htonl>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2200      	movs	r2, #0
 800e950:	4621      	mov	r1, r4
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f7ff fe66 	bl	800e624 <tcp_output_alloc_header>
 800e958:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d102      	bne.n	800e966 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e960:	f04f 33ff 	mov.w	r3, #4294967295
 800e964:	e010      	b.n	800e988 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e966:	7dfb      	ldrb	r3, [r7, #23]
 800e968:	2200      	movs	r2, #0
 800e96a:	6939      	ldr	r1, [r7, #16]
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f7ff fe97 	bl	800e6a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	3304      	adds	r3, #4
 800e978:	6939      	ldr	r1, [r7, #16]
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f7ff fed0 	bl	800e720 <tcp_output_control_segment>
 800e980:	4603      	mov	r3, r0
 800e982:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	371c      	adds	r7, #28
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd90      	pop	{r4, r7, pc}
 800e990:	08013ca4 	.word	0x08013ca4
 800e994:	08014480 	.word	0x08014480
 800e998:	08013cf8 	.word	0x08013cf8

0800e99c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e99c:	b590      	push	{r4, r7, lr}
 800e99e:	b08b      	sub	sp, #44	; 0x2c
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d106      	bne.n	800e9be <tcp_zero_window_probe+0x22>
 800e9b0:	4b4c      	ldr	r3, [pc, #304]	; (800eae4 <tcp_zero_window_probe+0x148>)
 800e9b2:	f640 024f 	movw	r2, #2127	; 0x84f
 800e9b6:	494c      	ldr	r1, [pc, #304]	; (800eae8 <tcp_zero_window_probe+0x14c>)
 800e9b8:	484c      	ldr	r0, [pc, #304]	; (800eaec <tcp_zero_window_probe+0x150>)
 800e9ba:	f002 fee5 	bl	8011788 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e9c4:	6a3b      	ldr	r3, [r7, #32]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d101      	bne.n	800e9ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	e086      	b.n	800eadc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e9d4:	2bff      	cmp	r3, #255	; 0xff
 800e9d6:	d007      	beq.n	800e9e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e9de:	3301      	adds	r3, #1
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e9e8:	6a3b      	ldr	r3, [r7, #32]
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	899b      	ldrh	r3, [r3, #12]
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7f9 f8c9 	bl	8007b88 <lwip_htons>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d005      	beq.n	800ea0e <tcp_zero_window_probe+0x72>
 800ea02:	6a3b      	ldr	r3, [r7, #32]
 800ea04:	891b      	ldrh	r3, [r3, #8]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d101      	bne.n	800ea0e <tcp_zero_window_probe+0x72>
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e000      	b.n	800ea10 <tcp_zero_window_probe+0x74>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ea12:	7ffb      	ldrb	r3, [r7, #31]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	bf0c      	ite	eq
 800ea18:	2301      	moveq	r3, #1
 800ea1a:	2300      	movne	r3, #0
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ea20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea24:	b299      	uxth	r1, r3
 800ea26:	6a3b      	ldr	r3, [r7, #32]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	8bba      	ldrh	r2, [r7, #28]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7ff fdf8 	bl	800e624 <tcp_output_alloc_header>
 800ea34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d102      	bne.n	800ea42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ea3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea40:	e04c      	b.n	800eadc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ea48:	7ffb      	ldrb	r3, [r7, #31]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d011      	beq.n	800ea72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	899b      	ldrh	r3, [r3, #12]
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	b21b      	sxth	r3, r3
 800ea56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ea5a:	b21c      	sxth	r4, r3
 800ea5c:	2011      	movs	r0, #17
 800ea5e:	f7f9 f893 	bl	8007b88 <lwip_htons>
 800ea62:	4603      	mov	r3, r0
 800ea64:	b21b      	sxth	r3, r3
 800ea66:	4323      	orrs	r3, r4
 800ea68:	b21b      	sxth	r3, r3
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	819a      	strh	r2, [r3, #12]
 800ea70:	e010      	b.n	800ea94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	3314      	adds	r3, #20
 800ea78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	6858      	ldr	r0, [r3, #4]
 800ea7e:	6a3b      	ldr	r3, [r7, #32]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	891a      	ldrh	r2, [r3, #8]
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	891b      	ldrh	r3, [r3, #8]
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	6939      	ldr	r1, [r7, #16]
 800ea90:	f7fa fe52 	bl	8009738 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7f9 f889 	bl	8007bb2 <lwip_htonl>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	da02      	bge.n	800eab8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eabc:	2200      	movs	r2, #0
 800eabe:	69b9      	ldr	r1, [r7, #24]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7ff fded 	bl	800e6a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	3304      	adds	r3, #4
 800eacc:	69b9      	ldr	r1, [r7, #24]
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7ff fe26 	bl	800e720 <tcp_output_control_segment>
 800ead4:	4603      	mov	r3, r0
 800ead6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ead8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	372c      	adds	r7, #44	; 0x2c
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd90      	pop	{r4, r7, pc}
 800eae4:	08013ca4 	.word	0x08013ca4
 800eae8:	0801449c 	.word	0x0801449c
 800eaec:	08013cf8 	.word	0x08013cf8

0800eaf0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800eaf8:	f7fa ff0c 	bl	8009914 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eafc:	4b0a      	ldr	r3, [pc, #40]	; (800eb28 <tcpip_tcp_timer+0x38>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d103      	bne.n	800eb0c <tcpip_tcp_timer+0x1c>
 800eb04:	4b09      	ldr	r3, [pc, #36]	; (800eb2c <tcpip_tcp_timer+0x3c>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d005      	beq.n	800eb18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	4908      	ldr	r1, [pc, #32]	; (800eb30 <tcpip_tcp_timer+0x40>)
 800eb10:	20fa      	movs	r0, #250	; 0xfa
 800eb12:	f000 f8f1 	bl	800ecf8 <sys_timeout>
 800eb16:	e002      	b.n	800eb1e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eb18:	4b06      	ldr	r3, [pc, #24]	; (800eb34 <tcpip_tcp_timer+0x44>)
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	601a      	str	r2, [r3, #0]
  }
}
 800eb1e:	bf00      	nop
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	24004c64 	.word	0x24004c64
 800eb2c:	24004c74 	.word	0x24004c74
 800eb30:	0800eaf1 	.word	0x0800eaf1
 800eb34:	240019b8 	.word	0x240019b8

0800eb38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eb3c:	4b0a      	ldr	r3, [pc, #40]	; (800eb68 <tcp_timer_needed+0x30>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10f      	bne.n	800eb64 <tcp_timer_needed+0x2c>
 800eb44:	4b09      	ldr	r3, [pc, #36]	; (800eb6c <tcp_timer_needed+0x34>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d103      	bne.n	800eb54 <tcp_timer_needed+0x1c>
 800eb4c:	4b08      	ldr	r3, [pc, #32]	; (800eb70 <tcp_timer_needed+0x38>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d007      	beq.n	800eb64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eb54:	4b04      	ldr	r3, [pc, #16]	; (800eb68 <tcp_timer_needed+0x30>)
 800eb56:	2201      	movs	r2, #1
 800eb58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	4905      	ldr	r1, [pc, #20]	; (800eb74 <tcp_timer_needed+0x3c>)
 800eb5e:	20fa      	movs	r0, #250	; 0xfa
 800eb60:	f000 f8ca 	bl	800ecf8 <sys_timeout>
  }
}
 800eb64:	bf00      	nop
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	240019b8 	.word	0x240019b8
 800eb6c:	24004c64 	.word	0x24004c64
 800eb70:	24004c74 	.word	0x24004c74
 800eb74:	0800eaf1 	.word	0x0800eaf1

0800eb78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eb84:	2006      	movs	r0, #6
 800eb86:	f7f9 fd2f 	bl	80085e8 <memp_malloc>
 800eb8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d109      	bne.n	800eba6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d151      	bne.n	800ec3c <sys_timeout_abs+0xc4>
 800eb98:	4b2a      	ldr	r3, [pc, #168]	; (800ec44 <sys_timeout_abs+0xcc>)
 800eb9a:	22be      	movs	r2, #190	; 0xbe
 800eb9c:	492a      	ldr	r1, [pc, #168]	; (800ec48 <sys_timeout_abs+0xd0>)
 800eb9e:	482b      	ldr	r0, [pc, #172]	; (800ec4c <sys_timeout_abs+0xd4>)
 800eba0:	f002 fdf2 	bl	8011788 <iprintf>
    return;
 800eba4:	e04a      	b.n	800ec3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	68ba      	ldr	r2, [r7, #8]
 800ebb0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	687a      	ldr	r2, [r7, #4]
 800ebb6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ebbe:	4b24      	ldr	r3, [pc, #144]	; (800ec50 <sys_timeout_abs+0xd8>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d103      	bne.n	800ebce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ebc6:	4a22      	ldr	r2, [pc, #136]	; (800ec50 <sys_timeout_abs+0xd8>)
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	6013      	str	r3, [r2, #0]
    return;
 800ebcc:	e037      	b.n	800ec3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	4b1f      	ldr	r3, [pc, #124]	; (800ec50 <sys_timeout_abs+0xd8>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	0fdb      	lsrs	r3, r3, #31
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d007      	beq.n	800ebf6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ebe6:	4b1a      	ldr	r3, [pc, #104]	; (800ec50 <sys_timeout_abs+0xd8>)
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ebee:	4a18      	ldr	r2, [pc, #96]	; (800ec50 <sys_timeout_abs+0xd8>)
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	e023      	b.n	800ec3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ebf6:	4b16      	ldr	r3, [pc, #88]	; (800ec50 <sys_timeout_abs+0xd8>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	617b      	str	r3, [r7, #20]
 800ebfc:	e01a      	b.n	800ec34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00b      	beq.n	800ec1e <sys_timeout_abs+0xa6>
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	685a      	ldr	r2, [r3, #4]
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	1ad3      	subs	r3, r2, r3
 800ec12:	0fdb      	lsrs	r3, r3, #31
 800ec14:	f003 0301 	and.w	r3, r3, #1
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d007      	beq.n	800ec2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	693a      	ldr	r2, [r7, #16]
 800ec2a:	601a      	str	r2, [r3, #0]
        break;
 800ec2c:	e007      	b.n	800ec3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	617b      	str	r3, [r7, #20]
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1e1      	bne.n	800ebfe <sys_timeout_abs+0x86>
 800ec3a:	e000      	b.n	800ec3e <sys_timeout_abs+0xc6>
    return;
 800ec3c:	bf00      	nop
      }
    }
  }
}
 800ec3e:	3718      	adds	r7, #24
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	080144c0 	.word	0x080144c0
 800ec48:	080144f4 	.word	0x080144f4
 800ec4c:	08014534 	.word	0x08014534
 800ec50:	240019b0 	.word	0x240019b0

0800ec54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	4798      	blx	r3

  now = sys_now();
 800ec66:	f7f8 feb5 	bl	80079d4 <sys_now>
 800ec6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	4b0f      	ldr	r3, [pc, #60]	; (800ecb0 <lwip_cyclic_timer+0x5c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4413      	add	r3, r2
 800ec76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	0fdb      	lsrs	r3, r3, #31
 800ec80:	f003 0301 	and.w	r3, r3, #1
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d009      	beq.n	800ec9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	4413      	add	r3, r2
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	4907      	ldr	r1, [pc, #28]	; (800ecb4 <lwip_cyclic_timer+0x60>)
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7ff ff6e 	bl	800eb78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ec9c:	e004      	b.n	800eca8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	4904      	ldr	r1, [pc, #16]	; (800ecb4 <lwip_cyclic_timer+0x60>)
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f7ff ff68 	bl	800eb78 <sys_timeout_abs>
}
 800eca8:	bf00      	nop
 800ecaa:	3718      	adds	r7, #24
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	240019b4 	.word	0x240019b4
 800ecb4:	0800ec55 	.word	0x0800ec55

0800ecb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	607b      	str	r3, [r7, #4]
 800ecc2:	e00e      	b.n	800ece2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ecc4:	4a0a      	ldr	r2, [pc, #40]	; (800ecf0 <sys_timeouts_init+0x38>)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	00db      	lsls	r3, r3, #3
 800ecd0:	4a07      	ldr	r2, [pc, #28]	; (800ecf0 <sys_timeouts_init+0x38>)
 800ecd2:	4413      	add	r3, r2
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	4907      	ldr	r1, [pc, #28]	; (800ecf4 <sys_timeouts_init+0x3c>)
 800ecd8:	f000 f80e 	bl	800ecf8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	3301      	adds	r3, #1
 800ece0:	607b      	str	r3, [r7, #4]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b02      	cmp	r3, #2
 800ece6:	d9ed      	bls.n	800ecc4 <sys_timeouts_init+0xc>
  }
}
 800ece8:	bf00      	nop
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	080150bc 	.word	0x080150bc
 800ecf4:	0800ec55 	.word	0x0800ec55

0800ecf8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed0a:	d306      	bcc.n	800ed1a <sys_timeout+0x22>
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	; (800ed38 <sys_timeout+0x40>)
 800ed0e:	f240 1229 	movw	r2, #297	; 0x129
 800ed12:	490a      	ldr	r1, [pc, #40]	; (800ed3c <sys_timeout+0x44>)
 800ed14:	480a      	ldr	r0, [pc, #40]	; (800ed40 <sys_timeout+0x48>)
 800ed16:	f002 fd37 	bl	8011788 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ed1a:	f7f8 fe5b 	bl	80079d4 <sys_now>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	4413      	add	r3, r2
 800ed24:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	68b9      	ldr	r1, [r7, #8]
 800ed2a:	6978      	ldr	r0, [r7, #20]
 800ed2c:	f7ff ff24 	bl	800eb78 <sys_timeout_abs>
#endif
}
 800ed30:	bf00      	nop
 800ed32:	3718      	adds	r7, #24
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	080144c0 	.word	0x080144c0
 800ed3c:	0801455c 	.word	0x0801455c
 800ed40:	08014534 	.word	0x08014534

0800ed44 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ed4a:	f7f8 fe43 	bl	80079d4 <sys_now>
 800ed4e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ed50:	4b1a      	ldr	r3, [pc, #104]	; (800edbc <sys_check_timeouts+0x78>)
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d001      	beq.n	800ed5e <sys_check_timeouts+0x1a>
 800ed5a:	f7f9 ffcd 	bl	8008cf8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ed5e:	4b18      	ldr	r3, [pc, #96]	; (800edc0 <sys_check_timeouts+0x7c>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d022      	beq.n	800edb0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	0fdb      	lsrs	r3, r3, #31
 800ed74:	f003 0301 	and.w	r3, r3, #1
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d11a      	bne.n	800edb4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4a0f      	ldr	r2, [pc, #60]	; (800edc0 <sys_check_timeouts+0x7c>)
 800ed84:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	4a0b      	ldr	r2, [pc, #44]	; (800edc4 <sys_check_timeouts+0x80>)
 800ed98:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ed9a:	68b9      	ldr	r1, [r7, #8]
 800ed9c:	2006      	movs	r0, #6
 800ed9e:	f7f9 fc93 	bl	80086c8 <memp_free>
    if (handler != NULL) {
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d0d3      	beq.n	800ed50 <sys_check_timeouts+0xc>
      handler(arg);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6838      	ldr	r0, [r7, #0]
 800edac:	4798      	blx	r3
  do {
 800edae:	e7cf      	b.n	800ed50 <sys_check_timeouts+0xc>
      return;
 800edb0:	bf00      	nop
 800edb2:	e000      	b.n	800edb6 <sys_check_timeouts+0x72>
      return;
 800edb4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	24004c5c 	.word	0x24004c5c
 800edc0:	240019b0 	.word	0x240019b0
 800edc4:	240019b4 	.word	0x240019b4

0800edc8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800edcc:	f002 fcf4 	bl	80117b8 <rand>
 800edd0:	4603      	mov	r3, r0
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800edd8:	b29b      	uxth	r3, r3
 800edda:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800edde:	b29a      	uxth	r2, r3
 800ede0:	4b01      	ldr	r3, [pc, #4]	; (800ede8 <udp_init+0x20>)
 800ede2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ede4:	bf00      	nop
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	2400002c 	.word	0x2400002c

0800edec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	4613      	mov	r3, r2
 800edf8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d105      	bne.n	800ee0c <udp_input_local_match+0x20>
 800ee00:	4b27      	ldr	r3, [pc, #156]	; (800eea0 <udp_input_local_match+0xb4>)
 800ee02:	2287      	movs	r2, #135	; 0x87
 800ee04:	4927      	ldr	r1, [pc, #156]	; (800eea4 <udp_input_local_match+0xb8>)
 800ee06:	4828      	ldr	r0, [pc, #160]	; (800eea8 <udp_input_local_match+0xbc>)
 800ee08:	f002 fcbe 	bl	8011788 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d105      	bne.n	800ee1e <udp_input_local_match+0x32>
 800ee12:	4b23      	ldr	r3, [pc, #140]	; (800eea0 <udp_input_local_match+0xb4>)
 800ee14:	2288      	movs	r2, #136	; 0x88
 800ee16:	4925      	ldr	r1, [pc, #148]	; (800eeac <udp_input_local_match+0xc0>)
 800ee18:	4823      	ldr	r0, [pc, #140]	; (800eea8 <udp_input_local_match+0xbc>)
 800ee1a:	f002 fcb5 	bl	8011788 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	7a1b      	ldrb	r3, [r3, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00b      	beq.n	800ee3e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	7a1a      	ldrb	r2, [r3, #8]
 800ee2a:	4b21      	ldr	r3, [pc, #132]	; (800eeb0 <udp_input_local_match+0xc4>)
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee32:	3301      	adds	r3, #1
 800ee34:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d001      	beq.n	800ee3e <udp_input_local_match+0x52>
    return 0;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	e02b      	b.n	800ee96 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d018      	beq.n	800ee76 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d013      	beq.n	800ee72 <udp_input_local_match+0x86>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00f      	beq.n	800ee72 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee52:	4b17      	ldr	r3, [pc, #92]	; (800eeb0 <udp_input_local_match+0xc4>)
 800ee54:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5a:	d00a      	beq.n	800ee72 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	4b13      	ldr	r3, [pc, #76]	; (800eeb0 <udp_input_local_match+0xc4>)
 800ee62:	695b      	ldr	r3, [r3, #20]
 800ee64:	405a      	eors	r2, r3
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	3308      	adds	r3, #8
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d110      	bne.n	800ee94 <udp_input_local_match+0xa8>
          return 1;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e00f      	b.n	800ee96 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d009      	beq.n	800ee90 <udp_input_local_match+0xa4>
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d005      	beq.n	800ee90 <udp_input_local_match+0xa4>
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	4b09      	ldr	r3, [pc, #36]	; (800eeb0 <udp_input_local_match+0xc4>)
 800ee8a:	695b      	ldr	r3, [r3, #20]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d101      	bne.n	800ee94 <udp_input_local_match+0xa8>
        return 1;
 800ee90:	2301      	movs	r3, #1
 800ee92:	e000      	b.n	800ee96 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	080145a8 	.word	0x080145a8
 800eea4:	080145d8 	.word	0x080145d8
 800eea8:	080145fc 	.word	0x080145fc
 800eeac:	08014624 	.word	0x08014624
 800eeb0:	24001d74 	.word	0x24001d74

0800eeb4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eeb4:	b590      	push	{r4, r7, lr}
 800eeb6:	b08d      	sub	sp, #52	; 0x34
 800eeb8:	af02      	add	r7, sp, #8
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800eebe:	2300      	movs	r3, #0
 800eec0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d105      	bne.n	800eed4 <udp_input+0x20>
 800eec8:	4b7c      	ldr	r3, [pc, #496]	; (800f0bc <udp_input+0x208>)
 800eeca:	22cf      	movs	r2, #207	; 0xcf
 800eecc:	497c      	ldr	r1, [pc, #496]	; (800f0c0 <udp_input+0x20c>)
 800eece:	487d      	ldr	r0, [pc, #500]	; (800f0c4 <udp_input+0x210>)
 800eed0:	f002 fc5a 	bl	8011788 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d105      	bne.n	800eee6 <udp_input+0x32>
 800eeda:	4b78      	ldr	r3, [pc, #480]	; (800f0bc <udp_input+0x208>)
 800eedc:	22d0      	movs	r2, #208	; 0xd0
 800eede:	497a      	ldr	r1, [pc, #488]	; (800f0c8 <udp_input+0x214>)
 800eee0:	4878      	ldr	r0, [pc, #480]	; (800f0c4 <udp_input+0x210>)
 800eee2:	f002 fc51 	bl	8011788 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	895b      	ldrh	r3, [r3, #10]
 800eeea:	2b07      	cmp	r3, #7
 800eeec:	d803      	bhi.n	800eef6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f7fa fa38 	bl	8009364 <pbuf_free>
    goto end;
 800eef4:	e0de      	b.n	800f0b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eefc:	4b73      	ldr	r3, [pc, #460]	; (800f0cc <udp_input+0x218>)
 800eefe:	695a      	ldr	r2, [r3, #20]
 800ef00:	4b72      	ldr	r3, [pc, #456]	; (800f0cc <udp_input+0x218>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4619      	mov	r1, r3
 800ef06:	4610      	mov	r0, r2
 800ef08:	f001 fcac 	bl	8010864 <ip4_addr_isbroadcast_u32>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7f8 fe36 	bl	8007b88 <lwip_htons>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	885b      	ldrh	r3, [r3, #2]
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7f8 fe2e 	bl	8007b88 <lwip_htons>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ef30:	2300      	movs	r3, #0
 800ef32:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ef34:	2300      	movs	r3, #0
 800ef36:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef3c:	4b64      	ldr	r3, [pc, #400]	; (800f0d0 <udp_input+0x21c>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	627b      	str	r3, [r7, #36]	; 0x24
 800ef42:	e054      	b.n	800efee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ef44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef46:	8a5b      	ldrh	r3, [r3, #18]
 800ef48:	89fa      	ldrh	r2, [r7, #14]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d14a      	bne.n	800efe4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ef4e:	7cfb      	ldrb	r3, [r7, #19]
 800ef50:	461a      	mov	r2, r3
 800ef52:	6839      	ldr	r1, [r7, #0]
 800ef54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef56:	f7ff ff49 	bl	800edec <udp_input_local_match>
 800ef5a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d041      	beq.n	800efe4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	7c1b      	ldrb	r3, [r3, #16]
 800ef64:	f003 0304 	and.w	r3, r3, #4
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d11d      	bne.n	800efa8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d102      	bne.n	800ef78 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ef72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef74:	61fb      	str	r3, [r7, #28]
 800ef76:	e017      	b.n	800efa8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ef78:	7cfb      	ldrb	r3, [r7, #19]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d014      	beq.n	800efa8 <udp_input+0xf4>
 800ef7e:	4b53      	ldr	r3, [pc, #332]	; (800f0cc <udp_input+0x218>)
 800ef80:	695b      	ldr	r3, [r3, #20]
 800ef82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef86:	d10f      	bne.n	800efa8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	3304      	adds	r3, #4
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d008      	beq.n	800efa8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ef96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	3304      	adds	r3, #4
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d101      	bne.n	800efa8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efaa:	8a9b      	ldrh	r3, [r3, #20]
 800efac:	8a3a      	ldrh	r2, [r7, #16]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d118      	bne.n	800efe4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800efb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d005      	beq.n	800efc6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800efba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbc:	685a      	ldr	r2, [r3, #4]
 800efbe:	4b43      	ldr	r3, [pc, #268]	; (800f0cc <udp_input+0x218>)
 800efc0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d10e      	bne.n	800efe4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800efc6:	6a3b      	ldr	r3, [r7, #32]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d014      	beq.n	800eff6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	68da      	ldr	r2, [r3, #12]
 800efd0:	6a3b      	ldr	r3, [r7, #32]
 800efd2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800efd4:	4b3e      	ldr	r3, [pc, #248]	; (800f0d0 <udp_input+0x21c>)
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efda:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800efdc:	4a3c      	ldr	r2, [pc, #240]	; (800f0d0 <udp_input+0x21c>)
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800efe2:	e008      	b.n	800eff6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	627b      	str	r3, [r7, #36]	; 0x24
 800efee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1a7      	bne.n	800ef44 <udp_input+0x90>
 800eff4:	e000      	b.n	800eff8 <udp_input+0x144>
        break;
 800eff6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800eff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <udp_input+0x14e>
    pcb = uncon_pcb;
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f004:	2b00      	cmp	r3, #0
 800f006:	d002      	beq.n	800f00e <udp_input+0x15a>
    for_us = 1;
 800f008:	2301      	movs	r3, #1
 800f00a:	76fb      	strb	r3, [r7, #27]
 800f00c:	e00a      	b.n	800f024 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	3304      	adds	r3, #4
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	4b2d      	ldr	r3, [pc, #180]	; (800f0cc <udp_input+0x218>)
 800f016:	695b      	ldr	r3, [r3, #20]
 800f018:	429a      	cmp	r2, r3
 800f01a:	bf0c      	ite	eq
 800f01c:	2301      	moveq	r3, #1
 800f01e:	2300      	movne	r3, #0
 800f020:	b2db      	uxtb	r3, r3
 800f022:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f024:	7efb      	ldrb	r3, [r7, #27]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d041      	beq.n	800f0ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f02a:	2108      	movs	r1, #8
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7fa f913 	bl	8009258 <pbuf_remove_header>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d00a      	beq.n	800f04e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f038:	4b20      	ldr	r3, [pc, #128]	; (800f0bc <udp_input+0x208>)
 800f03a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f03e:	4925      	ldr	r1, [pc, #148]	; (800f0d4 <udp_input+0x220>)
 800f040:	4820      	ldr	r0, [pc, #128]	; (800f0c4 <udp_input+0x210>)
 800f042:	f002 fba1 	bl	8011788 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7fa f98c 	bl	8009364 <pbuf_free>
      goto end;
 800f04c:	e032      	b.n	800f0b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f050:	2b00      	cmp	r3, #0
 800f052:	d012      	beq.n	800f07a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f056:	699b      	ldr	r3, [r3, #24]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d00a      	beq.n	800f072 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05e:	699c      	ldr	r4, [r3, #24]
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	69d8      	ldr	r0, [r3, #28]
 800f064:	8a3b      	ldrh	r3, [r7, #16]
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	4b1b      	ldr	r3, [pc, #108]	; (800f0d8 <udp_input+0x224>)
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f06e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f070:	e021      	b.n	800f0b6 <udp_input+0x202>
        pbuf_free(p);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f7fa f976 	bl	8009364 <pbuf_free>
        goto end;
 800f078:	e01c      	b.n	800f0b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f07a:	7cfb      	ldrb	r3, [r7, #19]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d112      	bne.n	800f0a6 <udp_input+0x1f2>
 800f080:	4b12      	ldr	r3, [pc, #72]	; (800f0cc <udp_input+0x218>)
 800f082:	695b      	ldr	r3, [r3, #20]
 800f084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f088:	2be0      	cmp	r3, #224	; 0xe0
 800f08a:	d00c      	beq.n	800f0a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f08c:	4b0f      	ldr	r3, [pc, #60]	; (800f0cc <udp_input+0x218>)
 800f08e:	899b      	ldrh	r3, [r3, #12]
 800f090:	3308      	adds	r3, #8
 800f092:	b29b      	uxth	r3, r3
 800f094:	b21b      	sxth	r3, r3
 800f096:	4619      	mov	r1, r3
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f7fa f950 	bl	800933e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f09e:	2103      	movs	r1, #3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f001 f8b7 	bl	8010214 <icmp_dest_unreach>
      pbuf_free(p);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f7fa f95c 	bl	8009364 <pbuf_free>
  return;
 800f0ac:	e003      	b.n	800f0b6 <udp_input+0x202>
    pbuf_free(p);
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7fa f958 	bl	8009364 <pbuf_free>
  return;
 800f0b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f0b6:	372c      	adds	r7, #44	; 0x2c
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd90      	pop	{r4, r7, pc}
 800f0bc:	080145a8 	.word	0x080145a8
 800f0c0:	0801464c 	.word	0x0801464c
 800f0c4:	080145fc 	.word	0x080145fc
 800f0c8:	08014664 	.word	0x08014664
 800f0cc:	24001d74 	.word	0x24001d74
 800f0d0:	24004c7c 	.word	0x24004c7c
 800f0d4:	08014680 	.word	0x08014680
 800f0d8:	24001d84 	.word	0x24001d84

0800f0dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d01e      	beq.n	800f12a <udp_netif_ip_addr_changed+0x4e>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d01a      	beq.n	800f12a <udp_netif_ip_addr_changed+0x4e>
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d017      	beq.n	800f12a <udp_netif_ip_addr_changed+0x4e>
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d013      	beq.n	800f12a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f102:	4b0d      	ldr	r3, [pc, #52]	; (800f138 <udp_netif_ip_addr_changed+0x5c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	60fb      	str	r3, [r7, #12]
 800f108:	e00c      	b.n	800f124 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	429a      	cmp	r2, r3
 800f114:	d103      	bne.n	800f11e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1ef      	bne.n	800f10a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f12a:	bf00      	nop
 800f12c:	3714      	adds	r7, #20
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop
 800f138:	24004c7c 	.word	0x24004c7c

0800f13c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f144:	4915      	ldr	r1, [pc, #84]	; (800f19c <etharp_free_entry+0x60>)
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	4613      	mov	r3, r2
 800f14a:	005b      	lsls	r3, r3, #1
 800f14c:	4413      	add	r3, r2
 800f14e:	00db      	lsls	r3, r3, #3
 800f150:	440b      	add	r3, r1
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d013      	beq.n	800f180 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f158:	4910      	ldr	r1, [pc, #64]	; (800f19c <etharp_free_entry+0x60>)
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	4613      	mov	r3, r2
 800f15e:	005b      	lsls	r3, r3, #1
 800f160:	4413      	add	r3, r2
 800f162:	00db      	lsls	r3, r3, #3
 800f164:	440b      	add	r3, r1
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fa f8fb 	bl	8009364 <pbuf_free>
    arp_table[i].q = NULL;
 800f16e:	490b      	ldr	r1, [pc, #44]	; (800f19c <etharp_free_entry+0x60>)
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	4613      	mov	r3, r2
 800f174:	005b      	lsls	r3, r3, #1
 800f176:	4413      	add	r3, r2
 800f178:	00db      	lsls	r3, r3, #3
 800f17a:	440b      	add	r3, r1
 800f17c:	2200      	movs	r2, #0
 800f17e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f180:	4906      	ldr	r1, [pc, #24]	; (800f19c <etharp_free_entry+0x60>)
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	4613      	mov	r3, r2
 800f186:	005b      	lsls	r3, r3, #1
 800f188:	4413      	add	r3, r2
 800f18a:	00db      	lsls	r3, r3, #3
 800f18c:	440b      	add	r3, r1
 800f18e:	3314      	adds	r3, #20
 800f190:	2200      	movs	r2, #0
 800f192:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f194:	bf00      	nop
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	240019bc 	.word	0x240019bc

0800f1a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	607b      	str	r3, [r7, #4]
 800f1aa:	e096      	b.n	800f2da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f1ac:	494f      	ldr	r1, [pc, #316]	; (800f2ec <etharp_tmr+0x14c>)
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	005b      	lsls	r3, r3, #1
 800f1b4:	4413      	add	r3, r2
 800f1b6:	00db      	lsls	r3, r3, #3
 800f1b8:	440b      	add	r3, r1
 800f1ba:	3314      	adds	r3, #20
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f1c0:	78fb      	ldrb	r3, [r7, #3]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f000 8086 	beq.w	800f2d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f1c8:	4948      	ldr	r1, [pc, #288]	; (800f2ec <etharp_tmr+0x14c>)
 800f1ca:	687a      	ldr	r2, [r7, #4]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	005b      	lsls	r3, r3, #1
 800f1d0:	4413      	add	r3, r2
 800f1d2:	00db      	lsls	r3, r3, #3
 800f1d4:	440b      	add	r3, r1
 800f1d6:	3312      	adds	r3, #18
 800f1d8:	881b      	ldrh	r3, [r3, #0]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	b298      	uxth	r0, r3
 800f1de:	4943      	ldr	r1, [pc, #268]	; (800f2ec <etharp_tmr+0x14c>)
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	4413      	add	r3, r2
 800f1e8:	00db      	lsls	r3, r3, #3
 800f1ea:	440b      	add	r3, r1
 800f1ec:	3312      	adds	r3, #18
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f1f2:	493e      	ldr	r1, [pc, #248]	; (800f2ec <etharp_tmr+0x14c>)
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	4613      	mov	r3, r2
 800f1f8:	005b      	lsls	r3, r3, #1
 800f1fa:	4413      	add	r3, r2
 800f1fc:	00db      	lsls	r3, r3, #3
 800f1fe:	440b      	add	r3, r1
 800f200:	3312      	adds	r3, #18
 800f202:	881b      	ldrh	r3, [r3, #0]
 800f204:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f208:	d215      	bcs.n	800f236 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f20a:	4938      	ldr	r1, [pc, #224]	; (800f2ec <etharp_tmr+0x14c>)
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	4613      	mov	r3, r2
 800f210:	005b      	lsls	r3, r3, #1
 800f212:	4413      	add	r3, r2
 800f214:	00db      	lsls	r3, r3, #3
 800f216:	440b      	add	r3, r1
 800f218:	3314      	adds	r3, #20
 800f21a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d10e      	bne.n	800f23e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f220:	4932      	ldr	r1, [pc, #200]	; (800f2ec <etharp_tmr+0x14c>)
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	4613      	mov	r3, r2
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	4413      	add	r3, r2
 800f22a:	00db      	lsls	r3, r3, #3
 800f22c:	440b      	add	r3, r1
 800f22e:	3312      	adds	r3, #18
 800f230:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f232:	2b04      	cmp	r3, #4
 800f234:	d903      	bls.n	800f23e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff ff80 	bl	800f13c <etharp_free_entry>
 800f23c:	e04a      	b.n	800f2d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f23e:	492b      	ldr	r1, [pc, #172]	; (800f2ec <etharp_tmr+0x14c>)
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	4613      	mov	r3, r2
 800f244:	005b      	lsls	r3, r3, #1
 800f246:	4413      	add	r3, r2
 800f248:	00db      	lsls	r3, r3, #3
 800f24a:	440b      	add	r3, r1
 800f24c:	3314      	adds	r3, #20
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	2b03      	cmp	r3, #3
 800f252:	d10a      	bne.n	800f26a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f254:	4925      	ldr	r1, [pc, #148]	; (800f2ec <etharp_tmr+0x14c>)
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	4613      	mov	r3, r2
 800f25a:	005b      	lsls	r3, r3, #1
 800f25c:	4413      	add	r3, r2
 800f25e:	00db      	lsls	r3, r3, #3
 800f260:	440b      	add	r3, r1
 800f262:	3314      	adds	r3, #20
 800f264:	2204      	movs	r2, #4
 800f266:	701a      	strb	r2, [r3, #0]
 800f268:	e034      	b.n	800f2d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f26a:	4920      	ldr	r1, [pc, #128]	; (800f2ec <etharp_tmr+0x14c>)
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	4613      	mov	r3, r2
 800f270:	005b      	lsls	r3, r3, #1
 800f272:	4413      	add	r3, r2
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	440b      	add	r3, r1
 800f278:	3314      	adds	r3, #20
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	2b04      	cmp	r3, #4
 800f27e:	d10a      	bne.n	800f296 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f280:	491a      	ldr	r1, [pc, #104]	; (800f2ec <etharp_tmr+0x14c>)
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	4613      	mov	r3, r2
 800f286:	005b      	lsls	r3, r3, #1
 800f288:	4413      	add	r3, r2
 800f28a:	00db      	lsls	r3, r3, #3
 800f28c:	440b      	add	r3, r1
 800f28e:	3314      	adds	r3, #20
 800f290:	2202      	movs	r2, #2
 800f292:	701a      	strb	r2, [r3, #0]
 800f294:	e01e      	b.n	800f2d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f296:	4915      	ldr	r1, [pc, #84]	; (800f2ec <etharp_tmr+0x14c>)
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	4613      	mov	r3, r2
 800f29c:	005b      	lsls	r3, r3, #1
 800f29e:	4413      	add	r3, r2
 800f2a0:	00db      	lsls	r3, r3, #3
 800f2a2:	440b      	add	r3, r1
 800f2a4:	3314      	adds	r3, #20
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d113      	bne.n	800f2d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f2ac:	490f      	ldr	r1, [pc, #60]	; (800f2ec <etharp_tmr+0x14c>)
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	005b      	lsls	r3, r3, #1
 800f2b4:	4413      	add	r3, r2
 800f2b6:	00db      	lsls	r3, r3, #3
 800f2b8:	440b      	add	r3, r1
 800f2ba:	3308      	adds	r3, #8
 800f2bc:	6818      	ldr	r0, [r3, #0]
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	4613      	mov	r3, r2
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	4413      	add	r3, r2
 800f2c6:	00db      	lsls	r3, r3, #3
 800f2c8:	4a08      	ldr	r2, [pc, #32]	; (800f2ec <etharp_tmr+0x14c>)
 800f2ca:	4413      	add	r3, r2
 800f2cc:	3304      	adds	r3, #4
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	f000 fe6e 	bl	800ffb0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	607b      	str	r3, [r7, #4]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b09      	cmp	r3, #9
 800f2de:	f77f af65 	ble.w	800f1ac <etharp_tmr+0xc>
      }
    }
  }
}
 800f2e2:	bf00      	nop
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	240019bc 	.word	0x240019bc

0800f2f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08a      	sub	sp, #40	; 0x28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	607a      	str	r2, [r7, #4]
 800f2fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f2fe:	230a      	movs	r3, #10
 800f300:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f302:	230a      	movs	r3, #10
 800f304:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f306:	230a      	movs	r3, #10
 800f308:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f30a:	2300      	movs	r3, #0
 800f30c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f30e:	230a      	movs	r3, #10
 800f310:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f312:	2300      	movs	r3, #0
 800f314:	83bb      	strh	r3, [r7, #28]
 800f316:	2300      	movs	r3, #0
 800f318:	837b      	strh	r3, [r7, #26]
 800f31a:	2300      	movs	r3, #0
 800f31c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f31e:	2300      	movs	r3, #0
 800f320:	843b      	strh	r3, [r7, #32]
 800f322:	e0ae      	b.n	800f482 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f328:	49a6      	ldr	r1, [pc, #664]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f32a:	4613      	mov	r3, r2
 800f32c:	005b      	lsls	r3, r3, #1
 800f32e:	4413      	add	r3, r2
 800f330:	00db      	lsls	r3, r3, #3
 800f332:	440b      	add	r3, r1
 800f334:	3314      	adds	r3, #20
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f33a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f33e:	2b0a      	cmp	r3, #10
 800f340:	d105      	bne.n	800f34e <etharp_find_entry+0x5e>
 800f342:	7dfb      	ldrb	r3, [r7, #23]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d102      	bne.n	800f34e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f348:	8c3b      	ldrh	r3, [r7, #32]
 800f34a:	847b      	strh	r3, [r7, #34]	; 0x22
 800f34c:	e095      	b.n	800f47a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f34e:	7dfb      	ldrb	r3, [r7, #23]
 800f350:	2b00      	cmp	r3, #0
 800f352:	f000 8092 	beq.w	800f47a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f356:	7dfb      	ldrb	r3, [r7, #23]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d009      	beq.n	800f370 <etharp_find_entry+0x80>
 800f35c:	7dfb      	ldrb	r3, [r7, #23]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d806      	bhi.n	800f370 <etharp_find_entry+0x80>
 800f362:	4b99      	ldr	r3, [pc, #612]	; (800f5c8 <etharp_find_entry+0x2d8>)
 800f364:	f44f 7292 	mov.w	r2, #292	; 0x124
 800f368:	4998      	ldr	r1, [pc, #608]	; (800f5cc <etharp_find_entry+0x2dc>)
 800f36a:	4899      	ldr	r0, [pc, #612]	; (800f5d0 <etharp_find_entry+0x2e0>)
 800f36c:	f002 fa0c 	bl	8011788 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d020      	beq.n	800f3b8 <etharp_find_entry+0xc8>
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	6819      	ldr	r1, [r3, #0]
 800f37a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f37e:	4891      	ldr	r0, [pc, #580]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f380:	4613      	mov	r3, r2
 800f382:	005b      	lsls	r3, r3, #1
 800f384:	4413      	add	r3, r2
 800f386:	00db      	lsls	r3, r3, #3
 800f388:	4403      	add	r3, r0
 800f38a:	3304      	adds	r3, #4
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4299      	cmp	r1, r3
 800f390:	d112      	bne.n	800f3b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00c      	beq.n	800f3b2 <etharp_find_entry+0xc2>
 800f398:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f39c:	4989      	ldr	r1, [pc, #548]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f39e:	4613      	mov	r3, r2
 800f3a0:	005b      	lsls	r3, r3, #1
 800f3a2:	4413      	add	r3, r2
 800f3a4:	00db      	lsls	r3, r3, #3
 800f3a6:	440b      	add	r3, r1
 800f3a8:	3308      	adds	r3, #8
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d102      	bne.n	800f3b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f3b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f3b6:	e100      	b.n	800f5ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d140      	bne.n	800f440 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f3be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3c2:	4980      	ldr	r1, [pc, #512]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	005b      	lsls	r3, r3, #1
 800f3c8:	4413      	add	r3, r2
 800f3ca:	00db      	lsls	r3, r3, #3
 800f3cc:	440b      	add	r3, r1
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d01a      	beq.n	800f40a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f3d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3d8:	497a      	ldr	r1, [pc, #488]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f3da:	4613      	mov	r3, r2
 800f3dc:	005b      	lsls	r3, r3, #1
 800f3de:	4413      	add	r3, r2
 800f3e0:	00db      	lsls	r3, r3, #3
 800f3e2:	440b      	add	r3, r1
 800f3e4:	3312      	adds	r3, #18
 800f3e6:	881b      	ldrh	r3, [r3, #0]
 800f3e8:	8bba      	ldrh	r2, [r7, #28]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d845      	bhi.n	800f47a <etharp_find_entry+0x18a>
            old_queue = i;
 800f3ee:	8c3b      	ldrh	r3, [r7, #32]
 800f3f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f3f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3f6:	4973      	ldr	r1, [pc, #460]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	005b      	lsls	r3, r3, #1
 800f3fc:	4413      	add	r3, r2
 800f3fe:	00db      	lsls	r3, r3, #3
 800f400:	440b      	add	r3, r1
 800f402:	3312      	adds	r3, #18
 800f404:	881b      	ldrh	r3, [r3, #0]
 800f406:	83bb      	strh	r3, [r7, #28]
 800f408:	e037      	b.n	800f47a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f40a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f40e:	496d      	ldr	r1, [pc, #436]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f410:	4613      	mov	r3, r2
 800f412:	005b      	lsls	r3, r3, #1
 800f414:	4413      	add	r3, r2
 800f416:	00db      	lsls	r3, r3, #3
 800f418:	440b      	add	r3, r1
 800f41a:	3312      	adds	r3, #18
 800f41c:	881b      	ldrh	r3, [r3, #0]
 800f41e:	8b7a      	ldrh	r2, [r7, #26]
 800f420:	429a      	cmp	r2, r3
 800f422:	d82a      	bhi.n	800f47a <etharp_find_entry+0x18a>
            old_pending = i;
 800f424:	8c3b      	ldrh	r3, [r7, #32]
 800f426:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f428:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f42c:	4965      	ldr	r1, [pc, #404]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f42e:	4613      	mov	r3, r2
 800f430:	005b      	lsls	r3, r3, #1
 800f432:	4413      	add	r3, r2
 800f434:	00db      	lsls	r3, r3, #3
 800f436:	440b      	add	r3, r1
 800f438:	3312      	adds	r3, #18
 800f43a:	881b      	ldrh	r3, [r3, #0]
 800f43c:	837b      	strh	r3, [r7, #26]
 800f43e:	e01c      	b.n	800f47a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f440:	7dfb      	ldrb	r3, [r7, #23]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d919      	bls.n	800f47a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f44a:	495e      	ldr	r1, [pc, #376]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f44c:	4613      	mov	r3, r2
 800f44e:	005b      	lsls	r3, r3, #1
 800f450:	4413      	add	r3, r2
 800f452:	00db      	lsls	r3, r3, #3
 800f454:	440b      	add	r3, r1
 800f456:	3312      	adds	r3, #18
 800f458:	881b      	ldrh	r3, [r3, #0]
 800f45a:	8b3a      	ldrh	r2, [r7, #24]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d80c      	bhi.n	800f47a <etharp_find_entry+0x18a>
            old_stable = i;
 800f460:	8c3b      	ldrh	r3, [r7, #32]
 800f462:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f464:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f468:	4956      	ldr	r1, [pc, #344]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f46a:	4613      	mov	r3, r2
 800f46c:	005b      	lsls	r3, r3, #1
 800f46e:	4413      	add	r3, r2
 800f470:	00db      	lsls	r3, r3, #3
 800f472:	440b      	add	r3, r1
 800f474:	3312      	adds	r3, #18
 800f476:	881b      	ldrh	r3, [r3, #0]
 800f478:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f47a:	8c3b      	ldrh	r3, [r7, #32]
 800f47c:	3301      	adds	r3, #1
 800f47e:	b29b      	uxth	r3, r3
 800f480:	843b      	strh	r3, [r7, #32]
 800f482:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f486:	2b09      	cmp	r3, #9
 800f488:	f77f af4c 	ble.w	800f324 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f48c:	7afb      	ldrb	r3, [r7, #11]
 800f48e:	f003 0302 	and.w	r3, r3, #2
 800f492:	2b00      	cmp	r3, #0
 800f494:	d108      	bne.n	800f4a8 <etharp_find_entry+0x1b8>
 800f496:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f49a:	2b0a      	cmp	r3, #10
 800f49c:	d107      	bne.n	800f4ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f49e:	7afb      	ldrb	r3, [r7, #11]
 800f4a0:	f003 0301 	and.w	r3, r3, #1
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d102      	bne.n	800f4ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ac:	e085      	b.n	800f5ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f4ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f4b2:	2b09      	cmp	r3, #9
 800f4b4:	dc02      	bgt.n	800f4bc <etharp_find_entry+0x1cc>
    i = empty;
 800f4b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4b8:	843b      	strh	r3, [r7, #32]
 800f4ba:	e039      	b.n	800f530 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f4bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f4c0:	2b09      	cmp	r3, #9
 800f4c2:	dc14      	bgt.n	800f4ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f4c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f4c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f4cc:	493d      	ldr	r1, [pc, #244]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	005b      	lsls	r3, r3, #1
 800f4d2:	4413      	add	r3, r2
 800f4d4:	00db      	lsls	r3, r3, #3
 800f4d6:	440b      	add	r3, r1
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d018      	beq.n	800f510 <etharp_find_entry+0x220>
 800f4de:	4b3a      	ldr	r3, [pc, #232]	; (800f5c8 <etharp_find_entry+0x2d8>)
 800f4e0:	f240 126d 	movw	r2, #365	; 0x16d
 800f4e4:	493b      	ldr	r1, [pc, #236]	; (800f5d4 <etharp_find_entry+0x2e4>)
 800f4e6:	483a      	ldr	r0, [pc, #232]	; (800f5d0 <etharp_find_entry+0x2e0>)
 800f4e8:	f002 f94e 	bl	8011788 <iprintf>
 800f4ec:	e010      	b.n	800f510 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f4ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f4f2:	2b09      	cmp	r3, #9
 800f4f4:	dc02      	bgt.n	800f4fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f4f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f4f8:	843b      	strh	r3, [r7, #32]
 800f4fa:	e009      	b.n	800f510 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f4fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f500:	2b09      	cmp	r3, #9
 800f502:	dc02      	bgt.n	800f50a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f504:	8bfb      	ldrh	r3, [r7, #30]
 800f506:	843b      	strh	r3, [r7, #32]
 800f508:	e002      	b.n	800f510 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f50a:	f04f 33ff 	mov.w	r3, #4294967295
 800f50e:	e054      	b.n	800f5ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f510:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f514:	2b09      	cmp	r3, #9
 800f516:	dd06      	ble.n	800f526 <etharp_find_entry+0x236>
 800f518:	4b2b      	ldr	r3, [pc, #172]	; (800f5c8 <etharp_find_entry+0x2d8>)
 800f51a:	f240 127f 	movw	r2, #383	; 0x17f
 800f51e:	492e      	ldr	r1, [pc, #184]	; (800f5d8 <etharp_find_entry+0x2e8>)
 800f520:	482b      	ldr	r0, [pc, #172]	; (800f5d0 <etharp_find_entry+0x2e0>)
 800f522:	f002 f931 	bl	8011788 <iprintf>
    etharp_free_entry(i);
 800f526:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7ff fe06 	bl	800f13c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f530:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f534:	2b09      	cmp	r3, #9
 800f536:	dd06      	ble.n	800f546 <etharp_find_entry+0x256>
 800f538:	4b23      	ldr	r3, [pc, #140]	; (800f5c8 <etharp_find_entry+0x2d8>)
 800f53a:	f240 1283 	movw	r2, #387	; 0x183
 800f53e:	4926      	ldr	r1, [pc, #152]	; (800f5d8 <etharp_find_entry+0x2e8>)
 800f540:	4823      	ldr	r0, [pc, #140]	; (800f5d0 <etharp_find_entry+0x2e0>)
 800f542:	f002 f921 	bl	8011788 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f54a:	491e      	ldr	r1, [pc, #120]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f54c:	4613      	mov	r3, r2
 800f54e:	005b      	lsls	r3, r3, #1
 800f550:	4413      	add	r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	440b      	add	r3, r1
 800f556:	3314      	adds	r3, #20
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d006      	beq.n	800f56c <etharp_find_entry+0x27c>
 800f55e:	4b1a      	ldr	r3, [pc, #104]	; (800f5c8 <etharp_find_entry+0x2d8>)
 800f560:	f240 1285 	movw	r2, #389	; 0x185
 800f564:	491d      	ldr	r1, [pc, #116]	; (800f5dc <etharp_find_entry+0x2ec>)
 800f566:	481a      	ldr	r0, [pc, #104]	; (800f5d0 <etharp_find_entry+0x2e0>)
 800f568:	f002 f90e 	bl	8011788 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00b      	beq.n	800f58a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f572:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6819      	ldr	r1, [r3, #0]
 800f57a:	4812      	ldr	r0, [pc, #72]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f57c:	4613      	mov	r3, r2
 800f57e:	005b      	lsls	r3, r3, #1
 800f580:	4413      	add	r3, r2
 800f582:	00db      	lsls	r3, r3, #3
 800f584:	4403      	add	r3, r0
 800f586:	3304      	adds	r3, #4
 800f588:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f58a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f58e:	490d      	ldr	r1, [pc, #52]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f590:	4613      	mov	r3, r2
 800f592:	005b      	lsls	r3, r3, #1
 800f594:	4413      	add	r3, r2
 800f596:	00db      	lsls	r3, r3, #3
 800f598:	440b      	add	r3, r1
 800f59a:	3312      	adds	r3, #18
 800f59c:	2200      	movs	r2, #0
 800f59e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f5a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5a4:	4907      	ldr	r1, [pc, #28]	; (800f5c4 <etharp_find_entry+0x2d4>)
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	005b      	lsls	r3, r3, #1
 800f5aa:	4413      	add	r3, r2
 800f5ac:	00db      	lsls	r3, r3, #3
 800f5ae:	440b      	add	r3, r1
 800f5b0:	3308      	adds	r3, #8
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f5b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3728      	adds	r7, #40	; 0x28
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	240019bc 	.word	0x240019bc
 800f5c8:	0801490c 	.word	0x0801490c
 800f5cc:	08014944 	.word	0x08014944
 800f5d0:	08014984 	.word	0x08014984
 800f5d4:	080149ac 	.word	0x080149ac
 800f5d8:	080149c4 	.word	0x080149c4
 800f5dc:	080149d8 	.word	0x080149d8

0800f5e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b088      	sub	sp, #32
 800f5e4:	af02      	add	r7, sp, #8
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5f4:	2b06      	cmp	r3, #6
 800f5f6:	d006      	beq.n	800f606 <etharp_update_arp_entry+0x26>
 800f5f8:	4b48      	ldr	r3, [pc, #288]	; (800f71c <etharp_update_arp_entry+0x13c>)
 800f5fa:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f5fe:	4948      	ldr	r1, [pc, #288]	; (800f720 <etharp_update_arp_entry+0x140>)
 800f600:	4848      	ldr	r0, [pc, #288]	; (800f724 <etharp_update_arp_entry+0x144>)
 800f602:	f002 f8c1 	bl	8011788 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d012      	beq.n	800f632 <etharp_update_arp_entry+0x52>
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00e      	beq.n	800f632 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68f9      	ldr	r1, [r7, #12]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f001 f922 	bl	8010864 <ip4_addr_isbroadcast_u32>
 800f620:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f622:	2b00      	cmp	r3, #0
 800f624:	d105      	bne.n	800f632 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f62e:	2be0      	cmp	r3, #224	; 0xe0
 800f630:	d102      	bne.n	800f638 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f632:	f06f 030f 	mvn.w	r3, #15
 800f636:	e06c      	b.n	800f712 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f638:	78fb      	ldrb	r3, [r7, #3]
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	4619      	mov	r1, r3
 800f63e:	68b8      	ldr	r0, [r7, #8]
 800f640:	f7ff fe56 	bl	800f2f0 <etharp_find_entry>
 800f644:	4603      	mov	r3, r0
 800f646:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f648:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	da02      	bge.n	800f656 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f650:	8afb      	ldrh	r3, [r7, #22]
 800f652:	b25b      	sxtb	r3, r3
 800f654:	e05d      	b.n	800f712 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f656:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f65a:	4933      	ldr	r1, [pc, #204]	; (800f728 <etharp_update_arp_entry+0x148>)
 800f65c:	4613      	mov	r3, r2
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	4413      	add	r3, r2
 800f662:	00db      	lsls	r3, r3, #3
 800f664:	440b      	add	r3, r1
 800f666:	3314      	adds	r3, #20
 800f668:	2202      	movs	r2, #2
 800f66a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f66c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f670:	492d      	ldr	r1, [pc, #180]	; (800f728 <etharp_update_arp_entry+0x148>)
 800f672:	4613      	mov	r3, r2
 800f674:	005b      	lsls	r3, r3, #1
 800f676:	4413      	add	r3, r2
 800f678:	00db      	lsls	r3, r3, #3
 800f67a:	440b      	add	r3, r1
 800f67c:	3308      	adds	r3, #8
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f686:	4613      	mov	r3, r2
 800f688:	005b      	lsls	r3, r3, #1
 800f68a:	4413      	add	r3, r2
 800f68c:	00db      	lsls	r3, r3, #3
 800f68e:	3308      	adds	r3, #8
 800f690:	4a25      	ldr	r2, [pc, #148]	; (800f728 <etharp_update_arp_entry+0x148>)
 800f692:	4413      	add	r3, r2
 800f694:	3304      	adds	r3, #4
 800f696:	2206      	movs	r2, #6
 800f698:	6879      	ldr	r1, [r7, #4]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f002 f861 	bl	8011762 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f6a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f6a4:	4920      	ldr	r1, [pc, #128]	; (800f728 <etharp_update_arp_entry+0x148>)
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	005b      	lsls	r3, r3, #1
 800f6aa:	4413      	add	r3, r2
 800f6ac:	00db      	lsls	r3, r3, #3
 800f6ae:	440b      	add	r3, r1
 800f6b0:	3312      	adds	r3, #18
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f6b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f6ba:	491b      	ldr	r1, [pc, #108]	; (800f728 <etharp_update_arp_entry+0x148>)
 800f6bc:	4613      	mov	r3, r2
 800f6be:	005b      	lsls	r3, r3, #1
 800f6c0:	4413      	add	r3, r2
 800f6c2:	00db      	lsls	r3, r3, #3
 800f6c4:	440b      	add	r3, r1
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d021      	beq.n	800f710 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f6cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f6d0:	4915      	ldr	r1, [pc, #84]	; (800f728 <etharp_update_arp_entry+0x148>)
 800f6d2:	4613      	mov	r3, r2
 800f6d4:	005b      	lsls	r3, r3, #1
 800f6d6:	4413      	add	r3, r2
 800f6d8:	00db      	lsls	r3, r3, #3
 800f6da:	440b      	add	r3, r1
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f6e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f6e4:	4910      	ldr	r1, [pc, #64]	; (800f728 <etharp_update_arp_entry+0x148>)
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	4413      	add	r3, r2
 800f6ec:	00db      	lsls	r3, r3, #3
 800f6ee:	440b      	add	r3, r1
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800f6fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6939      	ldr	r1, [r7, #16]
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f001 ffb1 	bl	801166c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f70a:	6938      	ldr	r0, [r7, #16]
 800f70c:	f7f9 fe2a 	bl	8009364 <pbuf_free>
  }
  return ERR_OK;
 800f710:	2300      	movs	r3, #0
}
 800f712:	4618      	mov	r0, r3
 800f714:	3718      	adds	r7, #24
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	0801490c 	.word	0x0801490c
 800f720:	08014a04 	.word	0x08014a04
 800f724:	08014984 	.word	0x08014984
 800f728:	240019bc 	.word	0x240019bc

0800f72c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f734:	2300      	movs	r3, #0
 800f736:	60fb      	str	r3, [r7, #12]
 800f738:	e01e      	b.n	800f778 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f73a:	4913      	ldr	r1, [pc, #76]	; (800f788 <etharp_cleanup_netif+0x5c>)
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	4613      	mov	r3, r2
 800f740:	005b      	lsls	r3, r3, #1
 800f742:	4413      	add	r3, r2
 800f744:	00db      	lsls	r3, r3, #3
 800f746:	440b      	add	r3, r1
 800f748:	3314      	adds	r3, #20
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f74e:	7afb      	ldrb	r3, [r7, #11]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d00e      	beq.n	800f772 <etharp_cleanup_netif+0x46>
 800f754:	490c      	ldr	r1, [pc, #48]	; (800f788 <etharp_cleanup_netif+0x5c>)
 800f756:	68fa      	ldr	r2, [r7, #12]
 800f758:	4613      	mov	r3, r2
 800f75a:	005b      	lsls	r3, r3, #1
 800f75c:	4413      	add	r3, r2
 800f75e:	00db      	lsls	r3, r3, #3
 800f760:	440b      	add	r3, r1
 800f762:	3308      	adds	r3, #8
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d102      	bne.n	800f772 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f7ff fce5 	bl	800f13c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3301      	adds	r3, #1
 800f776:	60fb      	str	r3, [r7, #12]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2b09      	cmp	r3, #9
 800f77c:	dddd      	ble.n	800f73a <etharp_cleanup_netif+0xe>
    }
  }
}
 800f77e:	bf00      	nop
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	240019bc 	.word	0x240019bc

0800f78c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f78c:	b5b0      	push	{r4, r5, r7, lr}
 800f78e:	b08a      	sub	sp, #40	; 0x28
 800f790:	af04      	add	r7, sp, #16
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d107      	bne.n	800f7ac <etharp_input+0x20>
 800f79c:	4b3d      	ldr	r3, [pc, #244]	; (800f894 <etharp_input+0x108>)
 800f79e:	f240 228a 	movw	r2, #650	; 0x28a
 800f7a2:	493d      	ldr	r1, [pc, #244]	; (800f898 <etharp_input+0x10c>)
 800f7a4:	483d      	ldr	r0, [pc, #244]	; (800f89c <etharp_input+0x110>)
 800f7a6:	f001 ffef 	bl	8011788 <iprintf>
 800f7aa:	e06f      	b.n	800f88c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	881b      	ldrh	r3, [r3, #0]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7bc:	d10c      	bne.n	800f7d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f7c2:	2b06      	cmp	r3, #6
 800f7c4:	d108      	bne.n	800f7d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f7ca:	2b04      	cmp	r3, #4
 800f7cc:	d104      	bne.n	800f7d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	885b      	ldrh	r3, [r3, #2]
 800f7d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f7d4:	2b08      	cmp	r3, #8
 800f7d6:	d003      	beq.n	800f7e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7f9 fdc3 	bl	8009364 <pbuf_free>
    return;
 800f7de:	e055      	b.n	800f88c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	330e      	adds	r3, #14
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	3318      	adds	r3, #24
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d102      	bne.n	800f800 <etharp_input+0x74>
    for_us = 0;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	75fb      	strb	r3, [r7, #23]
 800f7fe:	e009      	b.n	800f814 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f800:	68ba      	ldr	r2, [r7, #8]
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	3304      	adds	r3, #4
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	429a      	cmp	r2, r3
 800f80a:	bf0c      	ite	eq
 800f80c:	2301      	moveq	r3, #1
 800f80e:	2300      	movne	r3, #0
 800f810:	b2db      	uxtb	r3, r3
 800f812:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	f103 0208 	add.w	r2, r3, #8
 800f81a:	7dfb      	ldrb	r3, [r7, #23]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d001      	beq.n	800f824 <etharp_input+0x98>
 800f820:	2301      	movs	r3, #1
 800f822:	e000      	b.n	800f826 <etharp_input+0x9a>
 800f824:	2302      	movs	r3, #2
 800f826:	f107 010c 	add.w	r1, r7, #12
 800f82a:	6838      	ldr	r0, [r7, #0]
 800f82c:	f7ff fed8 	bl	800f5e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	88db      	ldrh	r3, [r3, #6]
 800f834:	b29b      	uxth	r3, r3
 800f836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f83a:	d003      	beq.n	800f844 <etharp_input+0xb8>
 800f83c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f840:	d01e      	beq.n	800f880 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f842:	e020      	b.n	800f886 <etharp_input+0xfa>
      if (for_us) {
 800f844:	7dfb      	ldrb	r3, [r7, #23]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d01c      	beq.n	800f884 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	f103 0522 	add.w	r5, r3, #34	; 0x22
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f864:	2102      	movs	r1, #2
 800f866:	9103      	str	r1, [sp, #12]
 800f868:	f107 010c 	add.w	r1, r7, #12
 800f86c:	9102      	str	r1, [sp, #8]
 800f86e:	9201      	str	r2, [sp, #4]
 800f870:	9300      	str	r3, [sp, #0]
 800f872:	462b      	mov	r3, r5
 800f874:	4622      	mov	r2, r4
 800f876:	4601      	mov	r1, r0
 800f878:	6838      	ldr	r0, [r7, #0]
 800f87a:	f000 faeb 	bl	800fe54 <etharp_raw>
      break;
 800f87e:	e001      	b.n	800f884 <etharp_input+0xf8>
      break;
 800f880:	bf00      	nop
 800f882:	e000      	b.n	800f886 <etharp_input+0xfa>
      break;
 800f884:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7f9 fd6c 	bl	8009364 <pbuf_free>
}
 800f88c:	3718      	adds	r7, #24
 800f88e:	46bd      	mov	sp, r7
 800f890:	bdb0      	pop	{r4, r5, r7, pc}
 800f892:	bf00      	nop
 800f894:	0801490c 	.word	0x0801490c
 800f898:	08014a5c 	.word	0x08014a5c
 800f89c:	08014984 	.word	0x08014984

0800f8a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b086      	sub	sp, #24
 800f8a4:	af02      	add	r7, sp, #8
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	60b9      	str	r1, [r7, #8]
 800f8aa:	4613      	mov	r3, r2
 800f8ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f8ae:	79fa      	ldrb	r2, [r7, #7]
 800f8b0:	4944      	ldr	r1, [pc, #272]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f8b2:	4613      	mov	r3, r2
 800f8b4:	005b      	lsls	r3, r3, #1
 800f8b6:	4413      	add	r3, r2
 800f8b8:	00db      	lsls	r3, r3, #3
 800f8ba:	440b      	add	r3, r1
 800f8bc:	3314      	adds	r3, #20
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d806      	bhi.n	800f8d2 <etharp_output_to_arp_index+0x32>
 800f8c4:	4b40      	ldr	r3, [pc, #256]	; (800f9c8 <etharp_output_to_arp_index+0x128>)
 800f8c6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800f8ca:	4940      	ldr	r1, [pc, #256]	; (800f9cc <etharp_output_to_arp_index+0x12c>)
 800f8cc:	4840      	ldr	r0, [pc, #256]	; (800f9d0 <etharp_output_to_arp_index+0x130>)
 800f8ce:	f001 ff5b 	bl	8011788 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f8d2:	79fa      	ldrb	r2, [r7, #7]
 800f8d4:	493b      	ldr	r1, [pc, #236]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	005b      	lsls	r3, r3, #1
 800f8da:	4413      	add	r3, r2
 800f8dc:	00db      	lsls	r3, r3, #3
 800f8de:	440b      	add	r3, r1
 800f8e0:	3314      	adds	r3, #20
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	2b02      	cmp	r3, #2
 800f8e6:	d153      	bne.n	800f990 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f8e8:	79fa      	ldrb	r2, [r7, #7]
 800f8ea:	4936      	ldr	r1, [pc, #216]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	005b      	lsls	r3, r3, #1
 800f8f0:	4413      	add	r3, r2
 800f8f2:	00db      	lsls	r3, r3, #3
 800f8f4:	440b      	add	r3, r1
 800f8f6:	3312      	adds	r3, #18
 800f8f8:	881b      	ldrh	r3, [r3, #0]
 800f8fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f8fe:	d919      	bls.n	800f934 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f900:	79fa      	ldrb	r2, [r7, #7]
 800f902:	4613      	mov	r3, r2
 800f904:	005b      	lsls	r3, r3, #1
 800f906:	4413      	add	r3, r2
 800f908:	00db      	lsls	r3, r3, #3
 800f90a:	4a2e      	ldr	r2, [pc, #184]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f90c:	4413      	add	r3, r2
 800f90e:	3304      	adds	r3, #4
 800f910:	4619      	mov	r1, r3
 800f912:	68f8      	ldr	r0, [r7, #12]
 800f914:	f000 fb4c 	bl	800ffb0 <etharp_request>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d138      	bne.n	800f990 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f91e:	79fa      	ldrb	r2, [r7, #7]
 800f920:	4928      	ldr	r1, [pc, #160]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f922:	4613      	mov	r3, r2
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	4413      	add	r3, r2
 800f928:	00db      	lsls	r3, r3, #3
 800f92a:	440b      	add	r3, r1
 800f92c:	3314      	adds	r3, #20
 800f92e:	2203      	movs	r2, #3
 800f930:	701a      	strb	r2, [r3, #0]
 800f932:	e02d      	b.n	800f990 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f934:	79fa      	ldrb	r2, [r7, #7]
 800f936:	4923      	ldr	r1, [pc, #140]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f938:	4613      	mov	r3, r2
 800f93a:	005b      	lsls	r3, r3, #1
 800f93c:	4413      	add	r3, r2
 800f93e:	00db      	lsls	r3, r3, #3
 800f940:	440b      	add	r3, r1
 800f942:	3312      	adds	r3, #18
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f94a:	d321      	bcc.n	800f990 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f94c:	79fa      	ldrb	r2, [r7, #7]
 800f94e:	4613      	mov	r3, r2
 800f950:	005b      	lsls	r3, r3, #1
 800f952:	4413      	add	r3, r2
 800f954:	00db      	lsls	r3, r3, #3
 800f956:	4a1b      	ldr	r2, [pc, #108]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f958:	4413      	add	r3, r2
 800f95a:	1d19      	adds	r1, r3, #4
 800f95c:	79fa      	ldrb	r2, [r7, #7]
 800f95e:	4613      	mov	r3, r2
 800f960:	005b      	lsls	r3, r3, #1
 800f962:	4413      	add	r3, r2
 800f964:	00db      	lsls	r3, r3, #3
 800f966:	3308      	adds	r3, #8
 800f968:	4a16      	ldr	r2, [pc, #88]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f96a:	4413      	add	r3, r2
 800f96c:	3304      	adds	r3, #4
 800f96e:	461a      	mov	r2, r3
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f000 fafb 	bl	800ff6c <etharp_request_dst>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d109      	bne.n	800f990 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f97c:	79fa      	ldrb	r2, [r7, #7]
 800f97e:	4911      	ldr	r1, [pc, #68]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f980:	4613      	mov	r3, r2
 800f982:	005b      	lsls	r3, r3, #1
 800f984:	4413      	add	r3, r2
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	440b      	add	r3, r1
 800f98a:	3314      	adds	r3, #20
 800f98c:	2203      	movs	r2, #3
 800f98e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f103 0122 	add.w	r1, r3, #34	; 0x22
 800f996:	79fa      	ldrb	r2, [r7, #7]
 800f998:	4613      	mov	r3, r2
 800f99a:	005b      	lsls	r3, r3, #1
 800f99c:	4413      	add	r3, r2
 800f99e:	00db      	lsls	r3, r3, #3
 800f9a0:	3308      	adds	r3, #8
 800f9a2:	4a08      	ldr	r2, [pc, #32]	; (800f9c4 <etharp_output_to_arp_index+0x124>)
 800f9a4:	4413      	add	r3, r2
 800f9a6:	1d1a      	adds	r2, r3, #4
 800f9a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9ac:	9300      	str	r3, [sp, #0]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	460a      	mov	r2, r1
 800f9b2:	68b9      	ldr	r1, [r7, #8]
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f001 fe59 	bl	801166c <ethernet_output>
 800f9ba:	4603      	mov	r3, r0
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	240019bc 	.word	0x240019bc
 800f9c8:	0801490c 	.word	0x0801490c
 800f9cc:	08014a7c 	.word	0x08014a7c
 800f9d0:	08014984 	.word	0x08014984

0800f9d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b08a      	sub	sp, #40	; 0x28
 800f9d8:	af02      	add	r7, sp, #8
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d106      	bne.n	800f9f8 <etharp_output+0x24>
 800f9ea:	4b73      	ldr	r3, [pc, #460]	; (800fbb8 <etharp_output+0x1e4>)
 800f9ec:	f240 321e 	movw	r2, #798	; 0x31e
 800f9f0:	4972      	ldr	r1, [pc, #456]	; (800fbbc <etharp_output+0x1e8>)
 800f9f2:	4873      	ldr	r0, [pc, #460]	; (800fbc0 <etharp_output+0x1ec>)
 800f9f4:	f001 fec8 	bl	8011788 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d106      	bne.n	800fa0c <etharp_output+0x38>
 800f9fe:	4b6e      	ldr	r3, [pc, #440]	; (800fbb8 <etharp_output+0x1e4>)
 800fa00:	f240 321f 	movw	r2, #799	; 0x31f
 800fa04:	496f      	ldr	r1, [pc, #444]	; (800fbc4 <etharp_output+0x1f0>)
 800fa06:	486e      	ldr	r0, [pc, #440]	; (800fbc0 <etharp_output+0x1ec>)
 800fa08:	f001 febe 	bl	8011788 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d106      	bne.n	800fa20 <etharp_output+0x4c>
 800fa12:	4b69      	ldr	r3, [pc, #420]	; (800fbb8 <etharp_output+0x1e4>)
 800fa14:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fa18:	496b      	ldr	r1, [pc, #428]	; (800fbc8 <etharp_output+0x1f4>)
 800fa1a:	4869      	ldr	r0, [pc, #420]	; (800fbc0 <etharp_output+0x1ec>)
 800fa1c:	f001 feb4 	bl	8011788 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	68f9      	ldr	r1, [r7, #12]
 800fa26:	4618      	mov	r0, r3
 800fa28:	f000 ff1c 	bl	8010864 <ip4_addr_isbroadcast_u32>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d002      	beq.n	800fa38 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fa32:	4b66      	ldr	r3, [pc, #408]	; (800fbcc <etharp_output+0x1f8>)
 800fa34:	61fb      	str	r3, [r7, #28]
 800fa36:	e0af      	b.n	800fb98 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa40:	2be0      	cmp	r3, #224	; 0xe0
 800fa42:	d118      	bne.n	800fa76 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fa44:	2301      	movs	r3, #1
 800fa46:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fa4c:	235e      	movs	r3, #94	; 0x5e
 800fa4e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	3301      	adds	r3, #1
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	3302      	adds	r3, #2
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3303      	adds	r3, #3
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fa6e:	f107 0310 	add.w	r3, r7, #16
 800fa72:	61fb      	str	r3, [r7, #28]
 800fa74:	e090      	b.n	800fb98 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	3304      	adds	r3, #4
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	405a      	eors	r2, r3
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	3308      	adds	r3, #8
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4013      	ands	r3, r2
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d012      	beq.n	800fab4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fa94:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d00b      	beq.n	800fab4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	330c      	adds	r3, #12
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d003      	beq.n	800faae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	330c      	adds	r3, #12
 800faaa:	61bb      	str	r3, [r7, #24]
 800faac:	e002      	b.n	800fab4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800faae:	f06f 0303 	mvn.w	r3, #3
 800fab2:	e07d      	b.n	800fbb0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fab4:	4b46      	ldr	r3, [pc, #280]	; (800fbd0 <etharp_output+0x1fc>)
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	4619      	mov	r1, r3
 800faba:	4a46      	ldr	r2, [pc, #280]	; (800fbd4 <etharp_output+0x200>)
 800fabc:	460b      	mov	r3, r1
 800fabe:	005b      	lsls	r3, r3, #1
 800fac0:	440b      	add	r3, r1
 800fac2:	00db      	lsls	r3, r3, #3
 800fac4:	4413      	add	r3, r2
 800fac6:	3314      	adds	r3, #20
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	2b01      	cmp	r3, #1
 800facc:	d925      	bls.n	800fb1a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800face:	4b40      	ldr	r3, [pc, #256]	; (800fbd0 <etharp_output+0x1fc>)
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	4619      	mov	r1, r3
 800fad4:	4a3f      	ldr	r2, [pc, #252]	; (800fbd4 <etharp_output+0x200>)
 800fad6:	460b      	mov	r3, r1
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	440b      	add	r3, r1
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	4413      	add	r3, r2
 800fae0:	3308      	adds	r3, #8
 800fae2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d117      	bne.n	800fb1a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	4b38      	ldr	r3, [pc, #224]	; (800fbd0 <etharp_output+0x1fc>)
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	4618      	mov	r0, r3
 800faf4:	4937      	ldr	r1, [pc, #220]	; (800fbd4 <etharp_output+0x200>)
 800faf6:	4603      	mov	r3, r0
 800faf8:	005b      	lsls	r3, r3, #1
 800fafa:	4403      	add	r3, r0
 800fafc:	00db      	lsls	r3, r3, #3
 800fafe:	440b      	add	r3, r1
 800fb00:	3304      	adds	r3, #4
 800fb02:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d108      	bne.n	800fb1a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fb08:	4b31      	ldr	r3, [pc, #196]	; (800fbd0 <etharp_output+0x1fc>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	68b9      	ldr	r1, [r7, #8]
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f7ff fec5 	bl	800f8a0 <etharp_output_to_arp_index>
 800fb16:	4603      	mov	r3, r0
 800fb18:	e04a      	b.n	800fbb0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	75fb      	strb	r3, [r7, #23]
 800fb1e:	e031      	b.n	800fb84 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fb20:	7dfa      	ldrb	r2, [r7, #23]
 800fb22:	492c      	ldr	r1, [pc, #176]	; (800fbd4 <etharp_output+0x200>)
 800fb24:	4613      	mov	r3, r2
 800fb26:	005b      	lsls	r3, r3, #1
 800fb28:	4413      	add	r3, r2
 800fb2a:	00db      	lsls	r3, r3, #3
 800fb2c:	440b      	add	r3, r1
 800fb2e:	3314      	adds	r3, #20
 800fb30:	781b      	ldrb	r3, [r3, #0]
 800fb32:	2b01      	cmp	r3, #1
 800fb34:	d923      	bls.n	800fb7e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fb36:	7dfa      	ldrb	r2, [r7, #23]
 800fb38:	4926      	ldr	r1, [pc, #152]	; (800fbd4 <etharp_output+0x200>)
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	005b      	lsls	r3, r3, #1
 800fb3e:	4413      	add	r3, r2
 800fb40:	00db      	lsls	r3, r3, #3
 800fb42:	440b      	add	r3, r1
 800fb44:	3308      	adds	r3, #8
 800fb46:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fb48:	68fa      	ldr	r2, [r7, #12]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d117      	bne.n	800fb7e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	6819      	ldr	r1, [r3, #0]
 800fb52:	7dfa      	ldrb	r2, [r7, #23]
 800fb54:	481f      	ldr	r0, [pc, #124]	; (800fbd4 <etharp_output+0x200>)
 800fb56:	4613      	mov	r3, r2
 800fb58:	005b      	lsls	r3, r3, #1
 800fb5a:	4413      	add	r3, r2
 800fb5c:	00db      	lsls	r3, r3, #3
 800fb5e:	4403      	add	r3, r0
 800fb60:	3304      	adds	r3, #4
 800fb62:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fb64:	4299      	cmp	r1, r3
 800fb66:	d10a      	bne.n	800fb7e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fb68:	4a19      	ldr	r2, [pc, #100]	; (800fbd0 <etharp_output+0x1fc>)
 800fb6a:	7dfb      	ldrb	r3, [r7, #23]
 800fb6c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fb6e:	7dfb      	ldrb	r3, [r7, #23]
 800fb70:	461a      	mov	r2, r3
 800fb72:	68b9      	ldr	r1, [r7, #8]
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7ff fe93 	bl	800f8a0 <etharp_output_to_arp_index>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	e018      	b.n	800fbb0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fb7e:	7dfb      	ldrb	r3, [r7, #23]
 800fb80:	3301      	adds	r3, #1
 800fb82:	75fb      	strb	r3, [r7, #23]
 800fb84:	7dfb      	ldrb	r3, [r7, #23]
 800fb86:	2b09      	cmp	r3, #9
 800fb88:	d9ca      	bls.n	800fb20 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fb8a:	68ba      	ldr	r2, [r7, #8]
 800fb8c:	69b9      	ldr	r1, [r7, #24]
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f000 f822 	bl	800fbd8 <etharp_query>
 800fb94:	4603      	mov	r3, r0
 800fb96:	e00b      	b.n	800fbb0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800fb9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	68b9      	ldr	r1, [r7, #8]
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f001 fd5f 	bl	801166c <ethernet_output>
 800fbae:	4603      	mov	r3, r0
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3720      	adds	r7, #32
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	0801490c 	.word	0x0801490c
 800fbbc:	08014a5c 	.word	0x08014a5c
 800fbc0:	08014984 	.word	0x08014984
 800fbc4:	08014aac 	.word	0x08014aac
 800fbc8:	08014a4c 	.word	0x08014a4c
 800fbcc:	080150d8 	.word	0x080150d8
 800fbd0:	24001aac 	.word	0x24001aac
 800fbd4:	240019bc 	.word	0x240019bc

0800fbd8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b08c      	sub	sp, #48	; 0x30
 800fbdc:	af02      	add	r7, sp, #8
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	3322      	adds	r3, #34	; 0x22
 800fbe8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fbea:	23ff      	movs	r3, #255	; 0xff
 800fbec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	68f9      	ldr	r1, [r7, #12]
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f000 fe32 	bl	8010864 <ip4_addr_isbroadcast_u32>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d10c      	bne.n	800fc20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fc0e:	2be0      	cmp	r3, #224	; 0xe0
 800fc10:	d006      	beq.n	800fc20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d003      	beq.n	800fc20 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d102      	bne.n	800fc26 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fc20:	f06f 030f 	mvn.w	r3, #15
 800fc24:	e102      	b.n	800fe2c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fc26:	68fa      	ldr	r2, [r7, #12]
 800fc28:	2101      	movs	r1, #1
 800fc2a:	68b8      	ldr	r0, [r7, #8]
 800fc2c:	f7ff fb60 	bl	800f2f0 <etharp_find_entry>
 800fc30:	4603      	mov	r3, r0
 800fc32:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fc34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	da02      	bge.n	800fc42 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fc3c:	8a7b      	ldrh	r3, [r7, #18]
 800fc3e:	b25b      	sxtb	r3, r3
 800fc40:	e0f4      	b.n	800fe2c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fc42:	8a7b      	ldrh	r3, [r7, #18]
 800fc44:	2b7e      	cmp	r3, #126	; 0x7e
 800fc46:	d906      	bls.n	800fc56 <etharp_query+0x7e>
 800fc48:	4b7a      	ldr	r3, [pc, #488]	; (800fe34 <etharp_query+0x25c>)
 800fc4a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fc4e:	497a      	ldr	r1, [pc, #488]	; (800fe38 <etharp_query+0x260>)
 800fc50:	487a      	ldr	r0, [pc, #488]	; (800fe3c <etharp_query+0x264>)
 800fc52:	f001 fd99 	bl	8011788 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fc56:	8a7b      	ldrh	r3, [r7, #18]
 800fc58:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fc5a:	7c7a      	ldrb	r2, [r7, #17]
 800fc5c:	4978      	ldr	r1, [pc, #480]	; (800fe40 <etharp_query+0x268>)
 800fc5e:	4613      	mov	r3, r2
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	4413      	add	r3, r2
 800fc64:	00db      	lsls	r3, r3, #3
 800fc66:	440b      	add	r3, r1
 800fc68:	3314      	adds	r3, #20
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d115      	bne.n	800fc9c <etharp_query+0xc4>
    is_new_entry = 1;
 800fc70:	2301      	movs	r3, #1
 800fc72:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fc74:	7c7a      	ldrb	r2, [r7, #17]
 800fc76:	4972      	ldr	r1, [pc, #456]	; (800fe40 <etharp_query+0x268>)
 800fc78:	4613      	mov	r3, r2
 800fc7a:	005b      	lsls	r3, r3, #1
 800fc7c:	4413      	add	r3, r2
 800fc7e:	00db      	lsls	r3, r3, #3
 800fc80:	440b      	add	r3, r1
 800fc82:	3314      	adds	r3, #20
 800fc84:	2201      	movs	r2, #1
 800fc86:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fc88:	7c7a      	ldrb	r2, [r7, #17]
 800fc8a:	496d      	ldr	r1, [pc, #436]	; (800fe40 <etharp_query+0x268>)
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	4413      	add	r3, r2
 800fc92:	00db      	lsls	r3, r3, #3
 800fc94:	440b      	add	r3, r1
 800fc96:	3308      	adds	r3, #8
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fc9c:	7c7a      	ldrb	r2, [r7, #17]
 800fc9e:	4968      	ldr	r1, [pc, #416]	; (800fe40 <etharp_query+0x268>)
 800fca0:	4613      	mov	r3, r2
 800fca2:	005b      	lsls	r3, r3, #1
 800fca4:	4413      	add	r3, r2
 800fca6:	00db      	lsls	r3, r3, #3
 800fca8:	440b      	add	r3, r1
 800fcaa:	3314      	adds	r3, #20
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d011      	beq.n	800fcd6 <etharp_query+0xfe>
 800fcb2:	7c7a      	ldrb	r2, [r7, #17]
 800fcb4:	4962      	ldr	r1, [pc, #392]	; (800fe40 <etharp_query+0x268>)
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	005b      	lsls	r3, r3, #1
 800fcba:	4413      	add	r3, r2
 800fcbc:	00db      	lsls	r3, r3, #3
 800fcbe:	440b      	add	r3, r1
 800fcc0:	3314      	adds	r3, #20
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d806      	bhi.n	800fcd6 <etharp_query+0xfe>
 800fcc8:	4b5a      	ldr	r3, [pc, #360]	; (800fe34 <etharp_query+0x25c>)
 800fcca:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fcce:	495d      	ldr	r1, [pc, #372]	; (800fe44 <etharp_query+0x26c>)
 800fcd0:	485a      	ldr	r0, [pc, #360]	; (800fe3c <etharp_query+0x264>)
 800fcd2:	f001 fd59 	bl	8011788 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fcd6:	6a3b      	ldr	r3, [r7, #32]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d102      	bne.n	800fce2 <etharp_query+0x10a>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d10c      	bne.n	800fcfc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fce2:	68b9      	ldr	r1, [r7, #8]
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f000 f963 	bl	800ffb0 <etharp_request>
 800fcea:	4603      	mov	r3, r0
 800fcec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d102      	bne.n	800fcfc <etharp_query+0x124>
      return result;
 800fcf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fcfa:	e097      	b.n	800fe2c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d106      	bne.n	800fd10 <etharp_query+0x138>
 800fd02:	4b4c      	ldr	r3, [pc, #304]	; (800fe34 <etharp_query+0x25c>)
 800fd04:	f240 32e1 	movw	r2, #993	; 0x3e1
 800fd08:	494f      	ldr	r1, [pc, #316]	; (800fe48 <etharp_query+0x270>)
 800fd0a:	484c      	ldr	r0, [pc, #304]	; (800fe3c <etharp_query+0x264>)
 800fd0c:	f001 fd3c 	bl	8011788 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fd10:	7c7a      	ldrb	r2, [r7, #17]
 800fd12:	494b      	ldr	r1, [pc, #300]	; (800fe40 <etharp_query+0x268>)
 800fd14:	4613      	mov	r3, r2
 800fd16:	005b      	lsls	r3, r3, #1
 800fd18:	4413      	add	r3, r2
 800fd1a:	00db      	lsls	r3, r3, #3
 800fd1c:	440b      	add	r3, r1
 800fd1e:	3314      	adds	r3, #20
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d918      	bls.n	800fd58 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800fd26:	4a49      	ldr	r2, [pc, #292]	; (800fe4c <etharp_query+0x274>)
 800fd28:	7c7b      	ldrb	r3, [r7, #17]
 800fd2a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fd2c:	7c7a      	ldrb	r2, [r7, #17]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	005b      	lsls	r3, r3, #1
 800fd32:	4413      	add	r3, r2
 800fd34:	00db      	lsls	r3, r3, #3
 800fd36:	3308      	adds	r3, #8
 800fd38:	4a41      	ldr	r2, [pc, #260]	; (800fe40 <etharp_query+0x268>)
 800fd3a:	4413      	add	r3, r2
 800fd3c:	1d1a      	adds	r2, r3, #4
 800fd3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	4613      	mov	r3, r2
 800fd46:	697a      	ldr	r2, [r7, #20]
 800fd48:	6879      	ldr	r1, [r7, #4]
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f001 fc8e 	bl	801166c <ethernet_output>
 800fd50:	4603      	mov	r3, r0
 800fd52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd56:	e067      	b.n	800fe28 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fd58:	7c7a      	ldrb	r2, [r7, #17]
 800fd5a:	4939      	ldr	r1, [pc, #228]	; (800fe40 <etharp_query+0x268>)
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	005b      	lsls	r3, r3, #1
 800fd60:	4413      	add	r3, r2
 800fd62:	00db      	lsls	r3, r3, #3
 800fd64:	440b      	add	r3, r1
 800fd66:	3314      	adds	r3, #20
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d15c      	bne.n	800fe28 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fd76:	e01c      	b.n	800fdb2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	895a      	ldrh	r2, [r3, #10]
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	891b      	ldrh	r3, [r3, #8]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d10a      	bne.n	800fd9a <etharp_query+0x1c2>
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d006      	beq.n	800fd9a <etharp_query+0x1c2>
 800fd8c:	4b29      	ldr	r3, [pc, #164]	; (800fe34 <etharp_query+0x25c>)
 800fd8e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fd92:	492f      	ldr	r1, [pc, #188]	; (800fe50 <etharp_query+0x278>)
 800fd94:	4829      	ldr	r0, [pc, #164]	; (800fe3c <etharp_query+0x264>)
 800fd96:	f001 fcf7 	bl	8011788 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	7b1b      	ldrb	r3, [r3, #12]
 800fd9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d002      	beq.n	800fdac <etharp_query+0x1d4>
        copy_needed = 1;
 800fda6:	2301      	movs	r3, #1
 800fda8:	61bb      	str	r3, [r7, #24]
        break;
 800fdaa:	e005      	b.n	800fdb8 <etharp_query+0x1e0>
      }
      p = p->next;
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d1df      	bne.n	800fd78 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800fdb8:	69bb      	ldr	r3, [r7, #24]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d007      	beq.n	800fdce <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fdc4:	200e      	movs	r0, #14
 800fdc6:	f7f9 fd29 	bl	800981c <pbuf_clone>
 800fdca:	61f8      	str	r0, [r7, #28]
 800fdcc:	e004      	b.n	800fdd8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fdd2:	69f8      	ldr	r0, [r7, #28]
 800fdd4:	f7f9 fb66 	bl	80094a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d021      	beq.n	800fe22 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fdde:	7c7a      	ldrb	r2, [r7, #17]
 800fde0:	4917      	ldr	r1, [pc, #92]	; (800fe40 <etharp_query+0x268>)
 800fde2:	4613      	mov	r3, r2
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	4413      	add	r3, r2
 800fde8:	00db      	lsls	r3, r3, #3
 800fdea:	440b      	add	r3, r1
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00a      	beq.n	800fe08 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fdf2:	7c7a      	ldrb	r2, [r7, #17]
 800fdf4:	4912      	ldr	r1, [pc, #72]	; (800fe40 <etharp_query+0x268>)
 800fdf6:	4613      	mov	r3, r2
 800fdf8:	005b      	lsls	r3, r3, #1
 800fdfa:	4413      	add	r3, r2
 800fdfc:	00db      	lsls	r3, r3, #3
 800fdfe:	440b      	add	r3, r1
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7f9 faae 	bl	8009364 <pbuf_free>
      }
      arp_table[i].q = p;
 800fe08:	7c7a      	ldrb	r2, [r7, #17]
 800fe0a:	490d      	ldr	r1, [pc, #52]	; (800fe40 <etharp_query+0x268>)
 800fe0c:	4613      	mov	r3, r2
 800fe0e:	005b      	lsls	r3, r3, #1
 800fe10:	4413      	add	r3, r2
 800fe12:	00db      	lsls	r3, r3, #3
 800fe14:	440b      	add	r3, r1
 800fe16:	69fa      	ldr	r2, [r7, #28]
 800fe18:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe20:	e002      	b.n	800fe28 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fe22:	23ff      	movs	r3, #255	; 0xff
 800fe24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fe28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3728      	adds	r7, #40	; 0x28
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	0801490c 	.word	0x0801490c
 800fe38:	08014ab8 	.word	0x08014ab8
 800fe3c:	08014984 	.word	0x08014984
 800fe40:	240019bc 	.word	0x240019bc
 800fe44:	08014ac8 	.word	0x08014ac8
 800fe48:	08014aac 	.word	0x08014aac
 800fe4c:	24001aac 	.word	0x24001aac
 800fe50:	08014af0 	.word	0x08014af0

0800fe54 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b08a      	sub	sp, #40	; 0x28
 800fe58:	af02      	add	r7, sp, #8
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
 800fe60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fe62:	2300      	movs	r3, #0
 800fe64:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d106      	bne.n	800fe7a <etharp_raw+0x26>
 800fe6c:	4b3a      	ldr	r3, [pc, #232]	; (800ff58 <etharp_raw+0x104>)
 800fe6e:	f240 4257 	movw	r2, #1111	; 0x457
 800fe72:	493a      	ldr	r1, [pc, #232]	; (800ff5c <etharp_raw+0x108>)
 800fe74:	483a      	ldr	r0, [pc, #232]	; (800ff60 <etharp_raw+0x10c>)
 800fe76:	f001 fc87 	bl	8011788 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fe7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe7e:	211c      	movs	r1, #28
 800fe80:	200e      	movs	r0, #14
 800fe82:	f7f8 ff8f 	bl	8008da4 <pbuf_alloc>
 800fe86:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d102      	bne.n	800fe94 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fe8e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe92:	e05d      	b.n	800ff50 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	895b      	ldrh	r3, [r3, #10]
 800fe98:	2b1b      	cmp	r3, #27
 800fe9a:	d806      	bhi.n	800feaa <etharp_raw+0x56>
 800fe9c:	4b2e      	ldr	r3, [pc, #184]	; (800ff58 <etharp_raw+0x104>)
 800fe9e:	f240 4263 	movw	r2, #1123	; 0x463
 800fea2:	4930      	ldr	r1, [pc, #192]	; (800ff64 <etharp_raw+0x110>)
 800fea4:	482e      	ldr	r0, [pc, #184]	; (800ff60 <etharp_raw+0x10c>)
 800fea6:	f001 fc6f 	bl	8011788 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800feb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7f7 fe68 	bl	8007b88 <lwip_htons>
 800feb8:	4603      	mov	r3, r0
 800feba:	461a      	mov	r2, r3
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fec6:	2b06      	cmp	r3, #6
 800fec8:	d006      	beq.n	800fed8 <etharp_raw+0x84>
 800feca:	4b23      	ldr	r3, [pc, #140]	; (800ff58 <etharp_raw+0x104>)
 800fecc:	f240 426a 	movw	r2, #1130	; 0x46a
 800fed0:	4925      	ldr	r1, [pc, #148]	; (800ff68 <etharp_raw+0x114>)
 800fed2:	4823      	ldr	r0, [pc, #140]	; (800ff60 <etharp_raw+0x10c>)
 800fed4:	f001 fc58 	bl	8011788 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	3308      	adds	r3, #8
 800fedc:	2206      	movs	r2, #6
 800fede:	6839      	ldr	r1, [r7, #0]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f001 fc3e 	bl	8011762 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	3312      	adds	r3, #18
 800feea:	2206      	movs	r2, #6
 800feec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800feee:	4618      	mov	r0, r3
 800fef0:	f001 fc37 	bl	8011762 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	330e      	adds	r3, #14
 800fef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fefa:	6812      	ldr	r2, [r2, #0]
 800fefc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	3318      	adds	r3, #24
 800ff02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff04:	6812      	ldr	r2, [r2, #0]
 800ff06:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	701a      	strb	r2, [r3, #0]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f042 0201 	orr.w	r2, r2, #1
 800ff14:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f042 0208 	orr.w	r2, r2, #8
 800ff1e:	709a      	strb	r2, [r3, #2]
 800ff20:	2200      	movs	r2, #0
 800ff22:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	2206      	movs	r2, #6
 800ff28:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	2204      	movs	r2, #4
 800ff2e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ff30:	f640 0306 	movw	r3, #2054	; 0x806
 800ff34:	9300      	str	r3, [sp, #0]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	68ba      	ldr	r2, [r7, #8]
 800ff3a:	69b9      	ldr	r1, [r7, #24]
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f001 fb95 	bl	801166c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ff42:	69b8      	ldr	r0, [r7, #24]
 800ff44:	f7f9 fa0e 	bl	8009364 <pbuf_free>
  p = NULL;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ff4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3720      	adds	r7, #32
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	0801490c 	.word	0x0801490c
 800ff5c:	08014a5c 	.word	0x08014a5c
 800ff60:	08014984 	.word	0x08014984
 800ff64:	08014b0c 	.word	0x08014b0c
 800ff68:	08014b40 	.word	0x08014b40

0800ff6c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b088      	sub	sp, #32
 800ff70:	af04      	add	r7, sp, #16
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ff88:	2201      	movs	r2, #1
 800ff8a:	9203      	str	r2, [sp, #12]
 800ff8c:	68ba      	ldr	r2, [r7, #8]
 800ff8e:	9202      	str	r2, [sp, #8]
 800ff90:	4a06      	ldr	r2, [pc, #24]	; (800ffac <etharp_request_dst+0x40>)
 800ff92:	9201      	str	r2, [sp, #4]
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	4603      	mov	r3, r0
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	68f8      	ldr	r0, [r7, #12]
 800ff9c:	f7ff ff5a 	bl	800fe54 <etharp_raw>
 800ffa0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	080150e0 	.word	0x080150e0

0800ffb0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ffba:	4a05      	ldr	r2, [pc, #20]	; (800ffd0 <etharp_request+0x20>)
 800ffbc:	6839      	ldr	r1, [r7, #0]
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f7ff ffd4 	bl	800ff6c <etharp_request_dst>
 800ffc4:	4603      	mov	r3, r0
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3708      	adds	r7, #8
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	080150d8 	.word	0x080150d8

0800ffd4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b08e      	sub	sp, #56	; 0x38
 800ffd8:	af04      	add	r7, sp, #16
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ffde:	4b87      	ldr	r3, [pc, #540]	; (80101fc <icmp_input+0x228>)
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ffe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	f003 030f 	and.w	r3, r3, #15
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fff6:	2b13      	cmp	r3, #19
 800fff8:	f240 80e8 	bls.w	80101cc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	895b      	ldrh	r3, [r3, #10]
 8010000:	2b03      	cmp	r3, #3
 8010002:	f240 80e5 	bls.w	80101d0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010010:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 80d2 	beq.w	80101be <icmp_input+0x1ea>
 801001a:	2b08      	cmp	r3, #8
 801001c:	f040 80d2 	bne.w	80101c4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010020:	4b77      	ldr	r3, [pc, #476]	; (8010200 <icmp_input+0x22c>)
 8010022:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010024:	4b75      	ldr	r3, [pc, #468]	; (80101fc <icmp_input+0x228>)
 8010026:	695b      	ldr	r3, [r3, #20]
 8010028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801002c:	2be0      	cmp	r3, #224	; 0xe0
 801002e:	f000 80d6 	beq.w	80101de <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010032:	4b72      	ldr	r3, [pc, #456]	; (80101fc <icmp_input+0x228>)
 8010034:	695a      	ldr	r2, [r3, #20]
 8010036:	4b71      	ldr	r3, [pc, #452]	; (80101fc <icmp_input+0x228>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4619      	mov	r1, r3
 801003c:	4610      	mov	r0, r2
 801003e:	f000 fc11 	bl	8010864 <ip4_addr_isbroadcast_u32>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	f040 80cc 	bne.w	80101e2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	891b      	ldrh	r3, [r3, #8]
 801004e:	2b07      	cmp	r3, #7
 8010050:	f240 80c0 	bls.w	80101d4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7f7 fe34 	bl	8007cc2 <inet_chksum_pbuf>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d003      	beq.n	8010068 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7f9 f97f 	bl	8009364 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8010066:	e0c5      	b.n	80101f4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801006a:	330e      	adds	r3, #14
 801006c:	4619      	mov	r1, r3
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f7f9 f8e2 	bl	8009238 <pbuf_add_header>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d04b      	beq.n	8010112 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	891a      	ldrh	r2, [r3, #8]
 801007e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010080:	4413      	add	r3, r2
 8010082:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	891b      	ldrh	r3, [r3, #8]
 8010088:	8b7a      	ldrh	r2, [r7, #26]
 801008a:	429a      	cmp	r2, r3
 801008c:	f0c0 80ab 	bcc.w	80101e6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010090:	8b7b      	ldrh	r3, [r7, #26]
 8010092:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010096:	4619      	mov	r1, r3
 8010098:	200e      	movs	r0, #14
 801009a:	f7f8 fe83 	bl	8008da4 <pbuf_alloc>
 801009e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	f000 80a1 	beq.w	80101ea <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	895b      	ldrh	r3, [r3, #10]
 80100ac:	461a      	mov	r2, r3
 80100ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80100b0:	3308      	adds	r3, #8
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d203      	bcs.n	80100be <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80100b6:	6978      	ldr	r0, [r7, #20]
 80100b8:	f7f9 f954 	bl	8009364 <pbuf_free>
          goto icmperr;
 80100bc:	e096      	b.n	80101ec <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80100c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100c6:	4618      	mov	r0, r3
 80100c8:	f001 fb4b 	bl	8011762 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80100cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80100ce:	4619      	mov	r1, r3
 80100d0:	6978      	ldr	r0, [r7, #20]
 80100d2:	f7f9 f8c1 	bl	8009258 <pbuf_remove_header>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d009      	beq.n	80100f0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80100dc:	4b49      	ldr	r3, [pc, #292]	; (8010204 <icmp_input+0x230>)
 80100de:	22b6      	movs	r2, #182	; 0xb6
 80100e0:	4949      	ldr	r1, [pc, #292]	; (8010208 <icmp_input+0x234>)
 80100e2:	484a      	ldr	r0, [pc, #296]	; (801020c <icmp_input+0x238>)
 80100e4:	f001 fb50 	bl	8011788 <iprintf>
          pbuf_free(r);
 80100e8:	6978      	ldr	r0, [r7, #20]
 80100ea:	f7f9 f93b 	bl	8009364 <pbuf_free>
          goto icmperr;
 80100ee:	e07d      	b.n	80101ec <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80100f0:	6879      	ldr	r1, [r7, #4]
 80100f2:	6978      	ldr	r0, [r7, #20]
 80100f4:	f7f9 fa4e 	bl	8009594 <pbuf_copy>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d003      	beq.n	8010106 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80100fe:	6978      	ldr	r0, [r7, #20]
 8010100:	f7f9 f930 	bl	8009364 <pbuf_free>
          goto icmperr;
 8010104:	e072      	b.n	80101ec <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7f9 f92c 	bl	8009364 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	607b      	str	r3, [r7, #4]
 8010110:	e00f      	b.n	8010132 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010112:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010114:	330e      	adds	r3, #14
 8010116:	4619      	mov	r1, r3
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f7f9 f89d 	bl	8009258 <pbuf_remove_header>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d006      	beq.n	8010132 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010124:	4b37      	ldr	r3, [pc, #220]	; (8010204 <icmp_input+0x230>)
 8010126:	22c7      	movs	r2, #199	; 0xc7
 8010128:	4939      	ldr	r1, [pc, #228]	; (8010210 <icmp_input+0x23c>)
 801012a:	4838      	ldr	r0, [pc, #224]	; (801020c <icmp_input+0x238>)
 801012c:	f001 fb2c 	bl	8011788 <iprintf>
          goto icmperr;
 8010130:	e05c      	b.n	80101ec <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801013a:	4619      	mov	r1, r3
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7f9 f87b 	bl	8009238 <pbuf_add_header>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	d13c      	bne.n	80101c2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010156:	4b29      	ldr	r3, [pc, #164]	; (80101fc <icmp_input+0x228>)
 8010158:	691a      	ldr	r2, [r3, #16]
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	2200      	movs	r2, #0
 8010162:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	885b      	ldrh	r3, [r3, #2]
 8010168:	b29b      	uxth	r3, r3
 801016a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801016e:	4293      	cmp	r3, r2
 8010170:	d907      	bls.n	8010182 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	885b      	ldrh	r3, [r3, #2]
 8010176:	b29b      	uxth	r3, r3
 8010178:	3309      	adds	r3, #9
 801017a:	b29a      	uxth	r2, r3
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	805a      	strh	r2, [r3, #2]
 8010180:	e006      	b.n	8010190 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	885b      	ldrh	r3, [r3, #2]
 8010186:	b29b      	uxth	r3, r3
 8010188:	3308      	adds	r3, #8
 801018a:	b29a      	uxth	r2, r3
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	22ff      	movs	r2, #255	; 0xff
 8010194:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2200      	movs	r2, #0
 801019a:	729a      	strb	r2, [r3, #10]
 801019c:	2200      	movs	r2, #0
 801019e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	9302      	str	r3, [sp, #8]
 80101a4:	2301      	movs	r3, #1
 80101a6:	9301      	str	r3, [sp, #4]
 80101a8:	2300      	movs	r3, #0
 80101aa:	9300      	str	r3, [sp, #0]
 80101ac:	23ff      	movs	r3, #255	; 0xff
 80101ae:	2200      	movs	r2, #0
 80101b0:	69f9      	ldr	r1, [r7, #28]
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 fa7e 	bl	80106b4 <ip4_output_if>
 80101b8:	4603      	mov	r3, r0
 80101ba:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80101bc:	e001      	b.n	80101c2 <icmp_input+0x1ee>
      break;
 80101be:	bf00      	nop
 80101c0:	e000      	b.n	80101c4 <icmp_input+0x1f0>
      break;
 80101c2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7f9 f8cd 	bl	8009364 <pbuf_free>
  return;
 80101ca:	e013      	b.n	80101f4 <icmp_input+0x220>
    goto lenerr;
 80101cc:	bf00      	nop
 80101ce:	e002      	b.n	80101d6 <icmp_input+0x202>
    goto lenerr;
 80101d0:	bf00      	nop
 80101d2:	e000      	b.n	80101d6 <icmp_input+0x202>
        goto lenerr;
 80101d4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7f9 f8c4 	bl	8009364 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80101dc:	e00a      	b.n	80101f4 <icmp_input+0x220>
        goto icmperr;
 80101de:	bf00      	nop
 80101e0:	e004      	b.n	80101ec <icmp_input+0x218>
        goto icmperr;
 80101e2:	bf00      	nop
 80101e4:	e002      	b.n	80101ec <icmp_input+0x218>
          goto icmperr;
 80101e6:	bf00      	nop
 80101e8:	e000      	b.n	80101ec <icmp_input+0x218>
          goto icmperr;
 80101ea:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7f9 f8b9 	bl	8009364 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80101f2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80101f4:	3728      	adds	r7, #40	; 0x28
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	24001d74 	.word	0x24001d74
 8010200:	24001d88 	.word	0x24001d88
 8010204:	08014b84 	.word	0x08014b84
 8010208:	08014bbc 	.word	0x08014bbc
 801020c:	08014bf4 	.word	0x08014bf4
 8010210:	08014c1c 	.word	0x08014c1c

08010214 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	460b      	mov	r3, r1
 801021e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010220:	78fb      	ldrb	r3, [r7, #3]
 8010222:	461a      	mov	r2, r3
 8010224:	2103      	movs	r1, #3
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 f814 	bl	8010254 <icmp_send_response>
}
 801022c:	bf00      	nop
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	460b      	mov	r3, r1
 801023e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010240:	78fb      	ldrb	r3, [r7, #3]
 8010242:	461a      	mov	r2, r3
 8010244:	210b      	movs	r1, #11
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 f804 	bl	8010254 <icmp_send_response>
}
 801024c:	bf00      	nop
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b08c      	sub	sp, #48	; 0x30
 8010258:	af04      	add	r7, sp, #16
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	460b      	mov	r3, r1
 801025e:	70fb      	strb	r3, [r7, #3]
 8010260:	4613      	mov	r3, r2
 8010262:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010264:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010268:	2124      	movs	r1, #36	; 0x24
 801026a:	2022      	movs	r0, #34	; 0x22
 801026c:	f7f8 fd9a 	bl	8008da4 <pbuf_alloc>
 8010270:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d056      	beq.n	8010326 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	895b      	ldrh	r3, [r3, #10]
 801027c:	2b23      	cmp	r3, #35	; 0x23
 801027e:	d806      	bhi.n	801028e <icmp_send_response+0x3a>
 8010280:	4b2b      	ldr	r3, [pc, #172]	; (8010330 <icmp_send_response+0xdc>)
 8010282:	f240 1269 	movw	r2, #361	; 0x169
 8010286:	492b      	ldr	r1, [pc, #172]	; (8010334 <icmp_send_response+0xe0>)
 8010288:	482b      	ldr	r0, [pc, #172]	; (8010338 <icmp_send_response+0xe4>)
 801028a:	f001 fa7d 	bl	8011788 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	78fa      	ldrb	r2, [r7, #3]
 801029e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	78ba      	ldrb	r2, [r7, #2]
 80102a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	2200      	movs	r2, #0
 80102aa:	711a      	strb	r2, [r3, #4]
 80102ac:	2200      	movs	r2, #0
 80102ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	2200      	movs	r2, #0
 80102b4:	719a      	strb	r2, [r3, #6]
 80102b6:	2200      	movs	r2, #0
 80102b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	f103 0008 	add.w	r0, r3, #8
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	221c      	movs	r2, #28
 80102c8:	4619      	mov	r1, r3
 80102ca:	f001 fa4a 	bl	8011762 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	68db      	ldr	r3, [r3, #12]
 80102d2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80102d4:	f107 030c 	add.w	r3, r7, #12
 80102d8:	4618      	mov	r0, r3
 80102da:	f000 f82f 	bl	801033c <ip4_route>
 80102de:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d01b      	beq.n	801031e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	2200      	movs	r2, #0
 80102ea:	709a      	strb	r2, [r3, #2]
 80102ec:	2200      	movs	r2, #0
 80102ee:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	895b      	ldrh	r3, [r3, #10]
 80102f4:	4619      	mov	r1, r3
 80102f6:	6978      	ldr	r0, [r7, #20]
 80102f8:	f7f7 fcd1 	bl	8007c9e <inet_chksum>
 80102fc:	4603      	mov	r3, r0
 80102fe:	461a      	mov	r2, r3
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010304:	f107 020c 	add.w	r2, r7, #12
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	9302      	str	r3, [sp, #8]
 801030c:	2301      	movs	r3, #1
 801030e:	9301      	str	r3, [sp, #4]
 8010310:	2300      	movs	r3, #0
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	23ff      	movs	r3, #255	; 0xff
 8010316:	2100      	movs	r1, #0
 8010318:	69f8      	ldr	r0, [r7, #28]
 801031a:	f000 f9cb 	bl	80106b4 <ip4_output_if>
  }
  pbuf_free(q);
 801031e:	69f8      	ldr	r0, [r7, #28]
 8010320:	f7f9 f820 	bl	8009364 <pbuf_free>
 8010324:	e000      	b.n	8010328 <icmp_send_response+0xd4>
    return;
 8010326:	bf00      	nop
}
 8010328:	3720      	adds	r7, #32
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	08014b84 	.word	0x08014b84
 8010334:	08014c50 	.word	0x08014c50
 8010338:	08014bf4 	.word	0x08014bf4

0801033c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801033c:	b480      	push	{r7}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010344:	4b33      	ldr	r3, [pc, #204]	; (8010414 <ip4_route+0xd8>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	60fb      	str	r3, [r7, #12]
 801034a:	e036      	b.n	80103ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010352:	f003 0301 	and.w	r3, r3, #1
 8010356:	b2db      	uxtb	r3, r3
 8010358:	2b00      	cmp	r3, #0
 801035a:	d02b      	beq.n	80103b4 <ip4_route+0x78>
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010362:	089b      	lsrs	r3, r3, #2
 8010364:	f003 0301 	and.w	r3, r3, #1
 8010368:	b2db      	uxtb	r3, r3
 801036a:	2b00      	cmp	r3, #0
 801036c:	d022      	beq.n	80103b4 <ip4_route+0x78>
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	3304      	adds	r3, #4
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d01d      	beq.n	80103b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	3304      	adds	r3, #4
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	405a      	eors	r2, r3
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	3308      	adds	r3, #8
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	4013      	ands	r3, r2
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	e038      	b.n	8010406 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801039a:	f003 0302 	and.w	r3, r3, #2
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d108      	bne.n	80103b4 <ip4_route+0x78>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	330c      	adds	r3, #12
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d101      	bne.n	80103b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	e028      	b.n	8010406 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	60fb      	str	r3, [r7, #12]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d1c5      	bne.n	801034c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80103c0:	4b15      	ldr	r3, [pc, #84]	; (8010418 <ip4_route+0xdc>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d01a      	beq.n	80103fe <ip4_route+0xc2>
 80103c8:	4b13      	ldr	r3, [pc, #76]	; (8010418 <ip4_route+0xdc>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80103d0:	f003 0301 	and.w	r3, r3, #1
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d012      	beq.n	80103fe <ip4_route+0xc2>
 80103d8:	4b0f      	ldr	r3, [pc, #60]	; (8010418 <ip4_route+0xdc>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80103e0:	f003 0304 	and.w	r3, r3, #4
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00a      	beq.n	80103fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80103e8:	4b0b      	ldr	r3, [pc, #44]	; (8010418 <ip4_route+0xdc>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	3304      	adds	r3, #4
 80103ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d004      	beq.n	80103fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	2b7f      	cmp	r3, #127	; 0x7f
 80103fc:	d101      	bne.n	8010402 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80103fe:	2300      	movs	r3, #0
 8010400:	e001      	b.n	8010406 <ip4_route+0xca>
  }

  return netif_default;
 8010402:	4b05      	ldr	r3, [pc, #20]	; (8010418 <ip4_route+0xdc>)
 8010404:	681b      	ldr	r3, [r3, #0]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3714      	adds	r7, #20
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	24004c54 	.word	0x24004c54
 8010418:	24004c58 	.word	0x24004c58

0801041c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801042a:	f003 0301 	and.w	r3, r3, #1
 801042e:	b2db      	uxtb	r3, r3
 8010430:	2b00      	cmp	r3, #0
 8010432:	d016      	beq.n	8010462 <ip4_input_accept+0x46>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	3304      	adds	r3, #4
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d011      	beq.n	8010462 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801043e:	4b0b      	ldr	r3, [pc, #44]	; (801046c <ip4_input_accept+0x50>)
 8010440:	695a      	ldr	r2, [r3, #20]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	3304      	adds	r3, #4
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	429a      	cmp	r2, r3
 801044a:	d008      	beq.n	801045e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801044c:	4b07      	ldr	r3, [pc, #28]	; (801046c <ip4_input_accept+0x50>)
 801044e:	695b      	ldr	r3, [r3, #20]
 8010450:	6879      	ldr	r1, [r7, #4]
 8010452:	4618      	mov	r0, r3
 8010454:	f000 fa06 	bl	8010864 <ip4_addr_isbroadcast_u32>
 8010458:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801045e:	2301      	movs	r3, #1
 8010460:	e000      	b.n	8010464 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010462:	2300      	movs	r3, #0
}
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	24001d74 	.word	0x24001d74

08010470 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b086      	sub	sp, #24
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	091b      	lsrs	r3, r3, #4
 8010486:	b2db      	uxtb	r3, r3
 8010488:	2b04      	cmp	r3, #4
 801048a:	d004      	beq.n	8010496 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f7f8 ff69 	bl	8009364 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010492:	2300      	movs	r3, #0
 8010494:	e105      	b.n	80106a2 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	f003 030f 	and.w	r3, r3, #15
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	885b      	ldrh	r3, [r3, #2]
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7f7 fb6b 	bl	8007b88 <lwip_htons>
 80104b2:	4603      	mov	r3, r0
 80104b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	891b      	ldrh	r3, [r3, #8]
 80104ba:	89ba      	ldrh	r2, [r7, #12]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d204      	bcs.n	80104ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80104c0:	89bb      	ldrh	r3, [r7, #12]
 80104c2:	4619      	mov	r1, r3
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7f8 fdc7 	bl	8009058 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	895b      	ldrh	r3, [r3, #10]
 80104ce:	89fa      	ldrh	r2, [r7, #14]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d807      	bhi.n	80104e4 <ip4_input+0x74>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	891b      	ldrh	r3, [r3, #8]
 80104d8:	89ba      	ldrh	r2, [r7, #12]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d802      	bhi.n	80104e4 <ip4_input+0x74>
 80104de:	89fb      	ldrh	r3, [r7, #14]
 80104e0:	2b13      	cmp	r3, #19
 80104e2:	d804      	bhi.n	80104ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f7f8 ff3d 	bl	8009364 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80104ea:	2300      	movs	r3, #0
 80104ec:	e0d9      	b.n	80106a2 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	691b      	ldr	r3, [r3, #16]
 80104f2:	4a6e      	ldr	r2, [pc, #440]	; (80106ac <ip4_input+0x23c>)
 80104f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	4a6c      	ldr	r2, [pc, #432]	; (80106ac <ip4_input+0x23c>)
 80104fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80104fe:	4b6b      	ldr	r3, [pc, #428]	; (80106ac <ip4_input+0x23c>)
 8010500:	695b      	ldr	r3, [r3, #20]
 8010502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010506:	2be0      	cmp	r3, #224	; 0xe0
 8010508:	d112      	bne.n	8010530 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010510:	f003 0301 	and.w	r3, r3, #1
 8010514:	b2db      	uxtb	r3, r3
 8010516:	2b00      	cmp	r3, #0
 8010518:	d007      	beq.n	801052a <ip4_input+0xba>
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	3304      	adds	r3, #4
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d002      	beq.n	801052a <ip4_input+0xba>
      netif = inp;
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	613b      	str	r3, [r7, #16]
 8010528:	e02a      	b.n	8010580 <ip4_input+0x110>
    } else {
      netif = NULL;
 801052a:	2300      	movs	r3, #0
 801052c:	613b      	str	r3, [r7, #16]
 801052e:	e027      	b.n	8010580 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010530:	6838      	ldr	r0, [r7, #0]
 8010532:	f7ff ff73 	bl	801041c <ip4_input_accept>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d002      	beq.n	8010542 <ip4_input+0xd2>
      netif = inp;
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	613b      	str	r3, [r7, #16]
 8010540:	e01e      	b.n	8010580 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010542:	2300      	movs	r3, #0
 8010544:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010546:	4b59      	ldr	r3, [pc, #356]	; (80106ac <ip4_input+0x23c>)
 8010548:	695b      	ldr	r3, [r3, #20]
 801054a:	b2db      	uxtb	r3, r3
 801054c:	2b7f      	cmp	r3, #127	; 0x7f
 801054e:	d017      	beq.n	8010580 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010550:	4b57      	ldr	r3, [pc, #348]	; (80106b0 <ip4_input+0x240>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	613b      	str	r3, [r7, #16]
 8010556:	e00e      	b.n	8010576 <ip4_input+0x106>
          if (netif == inp) {
 8010558:	693a      	ldr	r2, [r7, #16]
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	429a      	cmp	r2, r3
 801055e:	d006      	beq.n	801056e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010560:	6938      	ldr	r0, [r7, #16]
 8010562:	f7ff ff5b 	bl	801041c <ip4_input_accept>
 8010566:	4603      	mov	r3, r0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d108      	bne.n	801057e <ip4_input+0x10e>
 801056c:	e000      	b.n	8010570 <ip4_input+0x100>
            continue;
 801056e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	613b      	str	r3, [r7, #16]
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1ed      	bne.n	8010558 <ip4_input+0xe8>
 801057c:	e000      	b.n	8010580 <ip4_input+0x110>
            break;
 801057e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010580:	4b4a      	ldr	r3, [pc, #296]	; (80106ac <ip4_input+0x23c>)
 8010582:	691b      	ldr	r3, [r3, #16]
 8010584:	6839      	ldr	r1, [r7, #0]
 8010586:	4618      	mov	r0, r3
 8010588:	f000 f96c 	bl	8010864 <ip4_addr_isbroadcast_u32>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d105      	bne.n	801059e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010592:	4b46      	ldr	r3, [pc, #280]	; (80106ac <ip4_input+0x23c>)
 8010594:	691b      	ldr	r3, [r3, #16]
 8010596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801059a:	2be0      	cmp	r3, #224	; 0xe0
 801059c:	d104      	bne.n	80105a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7f8 fee0 	bl	8009364 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80105a4:	2300      	movs	r3, #0
 80105a6:	e07c      	b.n	80106a2 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d104      	bne.n	80105b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f7f8 fed8 	bl	8009364 <pbuf_free>
    return ERR_OK;
 80105b4:	2300      	movs	r3, #0
 80105b6:	e074      	b.n	80106a2 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	88db      	ldrh	r3, [r3, #6]
 80105bc:	b29b      	uxth	r3, r3
 80105be:	461a      	mov	r2, r3
 80105c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80105c4:	4013      	ands	r3, r2
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d00b      	beq.n	80105e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 fc90 	bl	8010ef0 <ip4_reass>
 80105d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d101      	bne.n	80105dc <ip4_input+0x16c>
      return ERR_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	e062      	b.n	80106a2 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80105e2:	4a32      	ldr	r2, [pc, #200]	; (80106ac <ip4_input+0x23c>)
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80105e8:	4a30      	ldr	r2, [pc, #192]	; (80106ac <ip4_input+0x23c>)
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80105ee:	4a2f      	ldr	r2, [pc, #188]	; (80106ac <ip4_input+0x23c>)
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	f003 030f 	and.w	r3, r3, #15
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	b2db      	uxtb	r3, r3
 8010602:	b29a      	uxth	r2, r3
 8010604:	4b29      	ldr	r3, [pc, #164]	; (80106ac <ip4_input+0x23c>)
 8010606:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010608:	89fb      	ldrh	r3, [r7, #14]
 801060a:	4619      	mov	r1, r3
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7f8 fe23 	bl	8009258 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	7a5b      	ldrb	r3, [r3, #9]
 8010616:	2b06      	cmp	r3, #6
 8010618:	d009      	beq.n	801062e <ip4_input+0x1be>
 801061a:	2b11      	cmp	r3, #17
 801061c:	d002      	beq.n	8010624 <ip4_input+0x1b4>
 801061e:	2b01      	cmp	r3, #1
 8010620:	d00a      	beq.n	8010638 <ip4_input+0x1c8>
 8010622:	e00e      	b.n	8010642 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010624:	6839      	ldr	r1, [r7, #0]
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7fe fc44 	bl	800eeb4 <udp_input>
        break;
 801062c:	e026      	b.n	801067c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801062e:	6839      	ldr	r1, [r7, #0]
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7fa fcb3 	bl	800af9c <tcp_input>
        break;
 8010636:	e021      	b.n	801067c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010638:	6839      	ldr	r1, [r7, #0]
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f7ff fcca 	bl	800ffd4 <icmp_input>
        break;
 8010640:	e01c      	b.n	801067c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010642:	4b1a      	ldr	r3, [pc, #104]	; (80106ac <ip4_input+0x23c>)
 8010644:	695b      	ldr	r3, [r3, #20]
 8010646:	6939      	ldr	r1, [r7, #16]
 8010648:	4618      	mov	r0, r3
 801064a:	f000 f90b 	bl	8010864 <ip4_addr_isbroadcast_u32>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10f      	bne.n	8010674 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010654:	4b15      	ldr	r3, [pc, #84]	; (80106ac <ip4_input+0x23c>)
 8010656:	695b      	ldr	r3, [r3, #20]
 8010658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801065c:	2be0      	cmp	r3, #224	; 0xe0
 801065e:	d009      	beq.n	8010674 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010664:	4619      	mov	r1, r3
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7f8 fe69 	bl	800933e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801066c:	2102      	movs	r1, #2
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f7ff fdd0 	bl	8010214 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f7f8 fe75 	bl	8009364 <pbuf_free>
        break;
 801067a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801067c:	4b0b      	ldr	r3, [pc, #44]	; (80106ac <ip4_input+0x23c>)
 801067e:	2200      	movs	r2, #0
 8010680:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010682:	4b0a      	ldr	r3, [pc, #40]	; (80106ac <ip4_input+0x23c>)
 8010684:	2200      	movs	r2, #0
 8010686:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010688:	4b08      	ldr	r3, [pc, #32]	; (80106ac <ip4_input+0x23c>)
 801068a:	2200      	movs	r2, #0
 801068c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801068e:	4b07      	ldr	r3, [pc, #28]	; (80106ac <ip4_input+0x23c>)
 8010690:	2200      	movs	r2, #0
 8010692:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010694:	4b05      	ldr	r3, [pc, #20]	; (80106ac <ip4_input+0x23c>)
 8010696:	2200      	movs	r2, #0
 8010698:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801069a:	4b04      	ldr	r3, [pc, #16]	; (80106ac <ip4_input+0x23c>)
 801069c:	2200      	movs	r2, #0
 801069e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80106a0:	2300      	movs	r3, #0
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3718      	adds	r7, #24
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	24001d74 	.word	0x24001d74
 80106b0:	24004c54 	.word	0x24004c54

080106b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b08a      	sub	sp, #40	; 0x28
 80106b8:	af04      	add	r7, sp, #16
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]
 80106c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d009      	beq.n	80106e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d003      	beq.n	80106da <ip4_output_if+0x26>
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d102      	bne.n	80106e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80106da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106dc:	3304      	adds	r3, #4
 80106de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80106e0:	78fa      	ldrb	r2, [r7, #3]
 80106e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e4:	9302      	str	r3, [sp, #8]
 80106e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80106ea:	9301      	str	r3, [sp, #4]
 80106ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	4613      	mov	r3, r2
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	6979      	ldr	r1, [r7, #20]
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 f805 	bl	8010708 <ip4_output_if_src>
 80106fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010700:	4618      	mov	r0, r3
 8010702:	3718      	adds	r7, #24
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b088      	sub	sp, #32
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	7b9b      	ldrb	r3, [r3, #14]
 801071a:	2b01      	cmp	r3, #1
 801071c:	d006      	beq.n	801072c <ip4_output_if_src+0x24>
 801071e:	4b4b      	ldr	r3, [pc, #300]	; (801084c <ip4_output_if_src+0x144>)
 8010720:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010724:	494a      	ldr	r1, [pc, #296]	; (8010850 <ip4_output_if_src+0x148>)
 8010726:	484b      	ldr	r0, [pc, #300]	; (8010854 <ip4_output_if_src+0x14c>)
 8010728:	f001 f82e 	bl	8011788 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d060      	beq.n	80107f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010732:	2314      	movs	r3, #20
 8010734:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010736:	2114      	movs	r1, #20
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f7f8 fd7d 	bl	8009238 <pbuf_add_header>
 801073e:	4603      	mov	r3, r0
 8010740:	2b00      	cmp	r3, #0
 8010742:	d002      	beq.n	801074a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010744:	f06f 0301 	mvn.w	r3, #1
 8010748:	e07c      	b.n	8010844 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	895b      	ldrh	r3, [r3, #10]
 8010754:	2b13      	cmp	r3, #19
 8010756:	d806      	bhi.n	8010766 <ip4_output_if_src+0x5e>
 8010758:	4b3c      	ldr	r3, [pc, #240]	; (801084c <ip4_output_if_src+0x144>)
 801075a:	f240 3289 	movw	r2, #905	; 0x389
 801075e:	493e      	ldr	r1, [pc, #248]	; (8010858 <ip4_output_if_src+0x150>)
 8010760:	483c      	ldr	r0, [pc, #240]	; (8010854 <ip4_output_if_src+0x14c>)
 8010762:	f001 f811 	bl	8011788 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010766:	69fb      	ldr	r3, [r7, #28]
 8010768:	78fa      	ldrb	r2, [r7, #3]
 801076a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801076c:	69fb      	ldr	r3, [r7, #28]
 801076e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010772:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801077c:	8b7b      	ldrh	r3, [r7, #26]
 801077e:	089b      	lsrs	r3, r3, #2
 8010780:	b29b      	uxth	r3, r3
 8010782:	b2db      	uxtb	r3, r3
 8010784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010788:	b2da      	uxtb	r2, r3
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010794:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	891b      	ldrh	r3, [r3, #8]
 801079a:	4618      	mov	r0, r3
 801079c:	f7f7 f9f4 	bl	8007b88 <lwip_htons>
 80107a0:	4603      	mov	r3, r0
 80107a2:	461a      	mov	r2, r3
 80107a4:	69fb      	ldr	r3, [r7, #28]
 80107a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80107a8:	69fb      	ldr	r3, [r7, #28]
 80107aa:	2200      	movs	r2, #0
 80107ac:	719a      	strb	r2, [r3, #6]
 80107ae:	2200      	movs	r2, #0
 80107b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80107b2:	4b2a      	ldr	r3, [pc, #168]	; (801085c <ip4_output_if_src+0x154>)
 80107b4:	881b      	ldrh	r3, [r3, #0]
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7f7 f9e6 	bl	8007b88 <lwip_htons>
 80107bc:	4603      	mov	r3, r0
 80107be:	461a      	mov	r2, r3
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80107c4:	4b25      	ldr	r3, [pc, #148]	; (801085c <ip4_output_if_src+0x154>)
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	3301      	adds	r3, #1
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	4b23      	ldr	r3, [pc, #140]	; (801085c <ip4_output_if_src+0x154>)
 80107ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d104      	bne.n	80107e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80107d6:	4b22      	ldr	r3, [pc, #136]	; (8010860 <ip4_output_if_src+0x158>)
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	60da      	str	r2, [r3, #12]
 80107de:	e003      	b.n	80107e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	681a      	ldr	r2, [r3, #0]
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	2200      	movs	r2, #0
 80107ec:	729a      	strb	r2, [r3, #10]
 80107ee:	2200      	movs	r2, #0
 80107f0:	72da      	strb	r2, [r3, #11]
 80107f2:	e00f      	b.n	8010814 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	895b      	ldrh	r3, [r3, #10]
 80107f8:	2b13      	cmp	r3, #19
 80107fa:	d802      	bhi.n	8010802 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80107fc:	f06f 0301 	mvn.w	r3, #1
 8010800:	e020      	b.n	8010844 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010808:	69fb      	ldr	r3, [r7, #28]
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801080e:	f107 0314 	add.w	r3, r7, #20
 8010812:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010816:	8c1b      	ldrh	r3, [r3, #32]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00c      	beq.n	8010836 <ip4_output_if_src+0x12e>
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	891a      	ldrh	r2, [r3, #8]
 8010820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010822:	8c1b      	ldrh	r3, [r3, #32]
 8010824:	429a      	cmp	r2, r3
 8010826:	d906      	bls.n	8010836 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f000 fd4b 	bl	80112c8 <ip4_frag>
 8010832:	4603      	mov	r3, r0
 8010834:	e006      	b.n	8010844 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010838:	695b      	ldr	r3, [r3, #20]
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	68f9      	ldr	r1, [r7, #12]
 801083e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010840:	4798      	blx	r3
 8010842:	4603      	mov	r3, r0
}
 8010844:	4618      	mov	r0, r3
 8010846:	3720      	adds	r7, #32
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	08014c7c 	.word	0x08014c7c
 8010850:	08014cb0 	.word	0x08014cb0
 8010854:	08014cbc 	.word	0x08014cbc
 8010858:	08014ce4 	.word	0x08014ce4
 801085c:	24001aae 	.word	0x24001aae
 8010860:	080150d4 	.word	0x080150d4

08010864 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010864:	b480      	push	{r7}
 8010866:	b085      	sub	sp, #20
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010878:	d002      	beq.n	8010880 <ip4_addr_isbroadcast_u32+0x1c>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d101      	bne.n	8010884 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010880:	2301      	movs	r3, #1
 8010882:	e02a      	b.n	80108da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801088a:	f003 0302 	and.w	r3, r3, #2
 801088e:	2b00      	cmp	r3, #0
 8010890:	d101      	bne.n	8010896 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010892:	2300      	movs	r3, #0
 8010894:	e021      	b.n	80108da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	3304      	adds	r3, #4
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d101      	bne.n	80108a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80108a2:	2300      	movs	r3, #0
 80108a4:	e019      	b.n	80108da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	3304      	adds	r3, #4
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	405a      	eors	r2, r3
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	3308      	adds	r3, #8
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4013      	ands	r3, r2
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d10d      	bne.n	80108d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	3308      	adds	r3, #8
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	43da      	mvns	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	3308      	adds	r3, #8
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d101      	bne.n	80108d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80108d4:	2301      	movs	r3, #1
 80108d6:	e000      	b.n	80108da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80108d8:	2300      	movs	r3, #0
  }
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3714      	adds	r7, #20
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr
	...

080108e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80108ee:	2300      	movs	r3, #0
 80108f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80108f2:	4b12      	ldr	r3, [pc, #72]	; (801093c <ip_reass_tmr+0x54>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80108f8:	e018      	b.n	801092c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	7fdb      	ldrb	r3, [r3, #31]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00b      	beq.n	801091a <ip_reass_tmr+0x32>
      r->timer--;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	7fdb      	ldrb	r3, [r3, #31]
 8010906:	3b01      	subs	r3, #1
 8010908:	b2da      	uxtb	r2, r3
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	60fb      	str	r3, [r7, #12]
 8010918:	e008      	b.n	801092c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010924:	68b9      	ldr	r1, [r7, #8]
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 f80a 	bl	8010940 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d1e3      	bne.n	80108fa <ip_reass_tmr+0x12>
    }
  }
}
 8010932:	bf00      	nop
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	24001ab0 	.word	0x24001ab0

08010940 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b088      	sub	sp, #32
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801094a:	2300      	movs	r3, #0
 801094c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801094e:	683a      	ldr	r2, [r7, #0]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	429a      	cmp	r2, r3
 8010954:	d105      	bne.n	8010962 <ip_reass_free_complete_datagram+0x22>
 8010956:	4b45      	ldr	r3, [pc, #276]	; (8010a6c <ip_reass_free_complete_datagram+0x12c>)
 8010958:	22ab      	movs	r2, #171	; 0xab
 801095a:	4945      	ldr	r1, [pc, #276]	; (8010a70 <ip_reass_free_complete_datagram+0x130>)
 801095c:	4845      	ldr	r0, [pc, #276]	; (8010a74 <ip_reass_free_complete_datagram+0x134>)
 801095e:	f000 ff13 	bl	8011788 <iprintf>
  if (prev != NULL) {
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00a      	beq.n	801097e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	429a      	cmp	r2, r3
 8010970:	d005      	beq.n	801097e <ip_reass_free_complete_datagram+0x3e>
 8010972:	4b3e      	ldr	r3, [pc, #248]	; (8010a6c <ip_reass_free_complete_datagram+0x12c>)
 8010974:	22ad      	movs	r2, #173	; 0xad
 8010976:	4940      	ldr	r1, [pc, #256]	; (8010a78 <ip_reass_free_complete_datagram+0x138>)
 8010978:	483e      	ldr	r0, [pc, #248]	; (8010a74 <ip_reass_free_complete_datagram+0x134>)
 801097a:	f000 ff05 	bl	8011788 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	889b      	ldrh	r3, [r3, #4]
 801098a:	b29b      	uxth	r3, r3
 801098c:	2b00      	cmp	r3, #0
 801098e:	d12a      	bne.n	80109e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801099e:	69bb      	ldr	r3, [r7, #24]
 80109a0:	6858      	ldr	r0, [r3, #4]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	3308      	adds	r3, #8
 80109a6:	2214      	movs	r2, #20
 80109a8:	4619      	mov	r1, r3
 80109aa:	f000 feda 	bl	8011762 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80109ae:	2101      	movs	r1, #1
 80109b0:	69b8      	ldr	r0, [r7, #24]
 80109b2:	f7ff fc3f 	bl	8010234 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80109b6:	69b8      	ldr	r0, [r7, #24]
 80109b8:	f7f8 fd5c 	bl	8009474 <pbuf_clen>
 80109bc:	4603      	mov	r3, r0
 80109be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80109c0:	8bfa      	ldrh	r2, [r7, #30]
 80109c2:	8a7b      	ldrh	r3, [r7, #18]
 80109c4:	4413      	add	r3, r2
 80109c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109ca:	db05      	blt.n	80109d8 <ip_reass_free_complete_datagram+0x98>
 80109cc:	4b27      	ldr	r3, [pc, #156]	; (8010a6c <ip_reass_free_complete_datagram+0x12c>)
 80109ce:	22bc      	movs	r2, #188	; 0xbc
 80109d0:	492a      	ldr	r1, [pc, #168]	; (8010a7c <ip_reass_free_complete_datagram+0x13c>)
 80109d2:	4828      	ldr	r0, [pc, #160]	; (8010a74 <ip_reass_free_complete_datagram+0x134>)
 80109d4:	f000 fed8 	bl	8011788 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80109d8:	8bfa      	ldrh	r2, [r7, #30]
 80109da:	8a7b      	ldrh	r3, [r7, #18]
 80109dc:	4413      	add	r3, r2
 80109de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80109e0:	69b8      	ldr	r0, [r7, #24]
 80109e2:	f7f8 fcbf 	bl	8009364 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80109ec:	e01f      	b.n	8010a2e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80109ee:	69bb      	ldr	r3, [r7, #24]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80109f4:	69bb      	ldr	r3, [r7, #24]
 80109f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f7f8 fd38 	bl	8009474 <pbuf_clen>
 8010a04:	4603      	mov	r3, r0
 8010a06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010a08:	8bfa      	ldrh	r2, [r7, #30]
 8010a0a:	8a7b      	ldrh	r3, [r7, #18]
 8010a0c:	4413      	add	r3, r2
 8010a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a12:	db05      	blt.n	8010a20 <ip_reass_free_complete_datagram+0xe0>
 8010a14:	4b15      	ldr	r3, [pc, #84]	; (8010a6c <ip_reass_free_complete_datagram+0x12c>)
 8010a16:	22cc      	movs	r2, #204	; 0xcc
 8010a18:	4918      	ldr	r1, [pc, #96]	; (8010a7c <ip_reass_free_complete_datagram+0x13c>)
 8010a1a:	4816      	ldr	r0, [pc, #88]	; (8010a74 <ip_reass_free_complete_datagram+0x134>)
 8010a1c:	f000 feb4 	bl	8011788 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010a20:	8bfa      	ldrh	r2, [r7, #30]
 8010a22:	8a7b      	ldrh	r3, [r7, #18]
 8010a24:	4413      	add	r3, r2
 8010a26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	f7f8 fc9b 	bl	8009364 <pbuf_free>
  while (p != NULL) {
 8010a2e:	69bb      	ldr	r3, [r7, #24]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d1dc      	bne.n	80109ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010a34:	6839      	ldr	r1, [r7, #0]
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f000 f8c2 	bl	8010bc0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010a3c:	4b10      	ldr	r3, [pc, #64]	; (8010a80 <ip_reass_free_complete_datagram+0x140>)
 8010a3e:	881b      	ldrh	r3, [r3, #0]
 8010a40:	8bfa      	ldrh	r2, [r7, #30]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d905      	bls.n	8010a52 <ip_reass_free_complete_datagram+0x112>
 8010a46:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <ip_reass_free_complete_datagram+0x12c>)
 8010a48:	22d2      	movs	r2, #210	; 0xd2
 8010a4a:	490e      	ldr	r1, [pc, #56]	; (8010a84 <ip_reass_free_complete_datagram+0x144>)
 8010a4c:	4809      	ldr	r0, [pc, #36]	; (8010a74 <ip_reass_free_complete_datagram+0x134>)
 8010a4e:	f000 fe9b 	bl	8011788 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010a52:	4b0b      	ldr	r3, [pc, #44]	; (8010a80 <ip_reass_free_complete_datagram+0x140>)
 8010a54:	881a      	ldrh	r2, [r3, #0]
 8010a56:	8bfb      	ldrh	r3, [r7, #30]
 8010a58:	1ad3      	subs	r3, r2, r3
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	4b08      	ldr	r3, [pc, #32]	; (8010a80 <ip_reass_free_complete_datagram+0x140>)
 8010a5e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010a60:	8bfb      	ldrh	r3, [r7, #30]
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3720      	adds	r7, #32
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	08014d14 	.word	0x08014d14
 8010a70:	08014d50 	.word	0x08014d50
 8010a74:	08014d5c 	.word	0x08014d5c
 8010a78:	08014d84 	.word	0x08014d84
 8010a7c:	08014d98 	.word	0x08014d98
 8010a80:	24001ab4 	.word	0x24001ab4
 8010a84:	08014db8 	.word	0x08014db8

08010a88 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b08a      	sub	sp, #40	; 0x28
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010a92:	2300      	movs	r3, #0
 8010a94:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010a96:	2300      	movs	r3, #0
 8010a98:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010aa6:	4b28      	ldr	r3, [pc, #160]	; (8010b48 <ip_reass_remove_oldest_datagram+0xc0>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010aac:	e030      	b.n	8010b10 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab0:	695a      	ldr	r2, [r3, #20]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	68db      	ldr	r3, [r3, #12]
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d10c      	bne.n	8010ad4 <ip_reass_remove_oldest_datagram+0x4c>
 8010aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abc:	699a      	ldr	r2, [r3, #24]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	691b      	ldr	r3, [r3, #16]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d106      	bne.n	8010ad4 <ip_reass_remove_oldest_datagram+0x4c>
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	899a      	ldrh	r2, [r3, #12]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	889b      	ldrh	r3, [r3, #4]
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d014      	beq.n	8010afe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010ada:	6a3b      	ldr	r3, [r7, #32]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d104      	bne.n	8010aea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	61bb      	str	r3, [r7, #24]
 8010ae8:	e009      	b.n	8010afe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aec:	7fda      	ldrb	r2, [r3, #31]
 8010aee:	6a3b      	ldr	r3, [r7, #32]
 8010af0:	7fdb      	ldrb	r3, [r3, #31]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d803      	bhi.n	8010afe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d001      	beq.n	8010b0a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b08:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1cb      	bne.n	8010aae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010b16:	6a3b      	ldr	r3, [r7, #32]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d008      	beq.n	8010b2e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010b1c:	69b9      	ldr	r1, [r7, #24]
 8010b1e:	6a38      	ldr	r0, [r7, #32]
 8010b20:	f7ff ff0e 	bl	8010940 <ip_reass_free_complete_datagram>
 8010b24:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010b26:	697a      	ldr	r2, [r7, #20]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010b2e:	697a      	ldr	r2, [r7, #20]
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	da02      	bge.n	8010b3c <ip_reass_remove_oldest_datagram+0xb4>
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	dcac      	bgt.n	8010a96 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010b3c:	697b      	ldr	r3, [r7, #20]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3728      	adds	r7, #40	; 0x28
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	24001ab0 	.word	0x24001ab0

08010b4c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010b56:	2004      	movs	r0, #4
 8010b58:	f7f7 fd46 	bl	80085e8 <memp_malloc>
 8010b5c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d110      	bne.n	8010b86 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010b64:	6839      	ldr	r1, [r7, #0]
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7ff ff8e 	bl	8010a88 <ip_reass_remove_oldest_datagram>
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	4293      	cmp	r3, r2
 8010b72:	dc03      	bgt.n	8010b7c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010b74:	2004      	movs	r0, #4
 8010b76:	f7f7 fd37 	bl	80085e8 <memp_malloc>
 8010b7a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d101      	bne.n	8010b86 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010b82:	2300      	movs	r3, #0
 8010b84:	e016      	b.n	8010bb4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010b86:	2220      	movs	r2, #32
 8010b88:	2100      	movs	r1, #0
 8010b8a:	68f8      	ldr	r0, [r7, #12]
 8010b8c:	f000 fdf4 	bl	8011778 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	220f      	movs	r2, #15
 8010b94:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010b96:	4b09      	ldr	r3, [pc, #36]	; (8010bbc <ip_reass_enqueue_new_datagram+0x70>)
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010b9e:	4a07      	ldr	r2, [pc, #28]	; (8010bbc <ip_reass_enqueue_new_datagram+0x70>)
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	2214      	movs	r2, #20
 8010baa:	6879      	ldr	r1, [r7, #4]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 fdd8 	bl	8011762 <memcpy>
  return ipr;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3710      	adds	r7, #16
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	24001ab0 	.word	0x24001ab0

08010bc0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010bca:	4b10      	ldr	r3, [pc, #64]	; (8010c0c <ip_reass_dequeue_datagram+0x4c>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d104      	bne.n	8010bde <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4a0c      	ldr	r2, [pc, #48]	; (8010c0c <ip_reass_dequeue_datagram+0x4c>)
 8010bda:	6013      	str	r3, [r2, #0]
 8010bdc:	e00d      	b.n	8010bfa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d106      	bne.n	8010bf2 <ip_reass_dequeue_datagram+0x32>
 8010be4:	4b0a      	ldr	r3, [pc, #40]	; (8010c10 <ip_reass_dequeue_datagram+0x50>)
 8010be6:	f240 1245 	movw	r2, #325	; 0x145
 8010bea:	490a      	ldr	r1, [pc, #40]	; (8010c14 <ip_reass_dequeue_datagram+0x54>)
 8010bec:	480a      	ldr	r0, [pc, #40]	; (8010c18 <ip_reass_dequeue_datagram+0x58>)
 8010bee:	f000 fdcb 	bl	8011788 <iprintf>
    prev->next = ipr->next;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010bfa:	6879      	ldr	r1, [r7, #4]
 8010bfc:	2004      	movs	r0, #4
 8010bfe:	f7f7 fd63 	bl	80086c8 <memp_free>
}
 8010c02:	bf00      	nop
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	24001ab0 	.word	0x24001ab0
 8010c10:	08014d14 	.word	0x08014d14
 8010c14:	08014ddc 	.word	0x08014ddc
 8010c18:	08014d5c 	.word	0x08014d5c

08010c1c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b08c      	sub	sp, #48	; 0x30
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	885b      	ldrh	r3, [r3, #2]
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7f6 ffa3 	bl	8007b88 <lwip_htons>
 8010c42:	4603      	mov	r3, r0
 8010c44:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	f003 030f 	and.w	r3, r3, #15
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	009b      	lsls	r3, r3, #2
 8010c52:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010c54:	7e7b      	ldrb	r3, [r7, #25]
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	8b7a      	ldrh	r2, [r7, #26]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d202      	bcs.n	8010c64 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c62:	e135      	b.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010c64:	7e7b      	ldrb	r3, [r7, #25]
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	8b7a      	ldrh	r2, [r7, #26]
 8010c6a:	1ad3      	subs	r3, r2, r3
 8010c6c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	88db      	ldrh	r3, [r3, #6]
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7f6 ff87 	bl	8007b88 <lwip_htons>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c8e:	2200      	movs	r2, #0
 8010c90:	701a      	strb	r2, [r3, #0]
 8010c92:	2200      	movs	r2, #0
 8010c94:	705a      	strb	r2, [r3, #1]
 8010c96:	2200      	movs	r2, #0
 8010c98:	709a      	strb	r2, [r3, #2]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca0:	8afa      	ldrh	r2, [r7, #22]
 8010ca2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010ca4:	8afa      	ldrh	r2, [r7, #22]
 8010ca6:	8b7b      	ldrh	r3, [r7, #26]
 8010ca8:	4413      	add	r3, r2
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb2:	88db      	ldrh	r3, [r3, #6]
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	8afa      	ldrh	r2, [r7, #22]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d902      	bls.n	8010cc2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010cc0:	e106      	b.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8010cc8:	e068      	b.n	8010d9c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd2:	889b      	ldrh	r3, [r3, #4]
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	889b      	ldrh	r3, [r3, #4]
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d235      	bcs.n	8010d4c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ce4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d020      	beq.n	8010d2e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cee:	889b      	ldrh	r3, [r3, #4]
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf4:	88db      	ldrh	r3, [r3, #6]
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d307      	bcc.n	8010d0c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfe:	88db      	ldrh	r3, [r3, #6]
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	889b      	ldrh	r3, [r3, #4]
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d902      	bls.n	8010d12 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d10:	e0de      	b.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d14:	68ba      	ldr	r2, [r7, #8]
 8010d16:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1a:	88db      	ldrh	r3, [r3, #6]
 8010d1c:	b29a      	uxth	r2, r3
 8010d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d20:	889b      	ldrh	r3, [r3, #4]
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d03d      	beq.n	8010da4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010d2c:	e03a      	b.n	8010da4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d30:	88db      	ldrh	r3, [r3, #6]
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	889b      	ldrh	r3, [r3, #4]
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d902      	bls.n	8010d44 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d42:	e0c5      	b.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	68ba      	ldr	r2, [r7, #8]
 8010d48:	605a      	str	r2, [r3, #4]
      break;
 8010d4a:	e02b      	b.n	8010da4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4e:	889b      	ldrh	r3, [r3, #4]
 8010d50:	b29a      	uxth	r2, r3
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	889b      	ldrh	r3, [r3, #4]
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d102      	bne.n	8010d62 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d60:	e0b6      	b.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d64:	889b      	ldrh	r3, [r3, #4]
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	88db      	ldrh	r3, [r3, #6]
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d202      	bcs.n	8010d78 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010d72:	f04f 33ff 	mov.w	r3, #4294967295
 8010d76:	e0ab      	b.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d009      	beq.n	8010d92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d80:	88db      	ldrh	r3, [r3, #6]
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	889b      	ldrh	r3, [r3, #4]
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d001      	beq.n	8010d92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d193      	bne.n	8010cca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010da2:	e000      	b.n	8010da6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010da4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d12d      	bne.n	8010e08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d01c      	beq.n	8010dec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db4:	88db      	ldrh	r3, [r3, #6]
 8010db6:	b29a      	uxth	r2, r3
 8010db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dba:	889b      	ldrh	r3, [r3, #4]
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d906      	bls.n	8010dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010dc2:	4b45      	ldr	r3, [pc, #276]	; (8010ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010dc4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010dc8:	4944      	ldr	r1, [pc, #272]	; (8010edc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010dca:	4845      	ldr	r0, [pc, #276]	; (8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010dcc:	f000 fcdc 	bl	8011788 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd2:	68ba      	ldr	r2, [r7, #8]
 8010dd4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd8:	88db      	ldrh	r3, [r3, #6]
 8010dda:	b29a      	uxth	r2, r3
 8010ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dde:	889b      	ldrh	r3, [r3, #4]
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d010      	beq.n	8010e08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	623b      	str	r3, [r7, #32]
 8010dea:	e00d      	b.n	8010e08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d006      	beq.n	8010e02 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010df4:	4b38      	ldr	r3, [pc, #224]	; (8010ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010df6:	f240 12bf 	movw	r2, #447	; 0x1bf
 8010dfa:	493a      	ldr	r1, [pc, #232]	; (8010ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010dfc:	4838      	ldr	r0, [pc, #224]	; (8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010dfe:	f000 fcc3 	bl	8011788 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d105      	bne.n	8010e1a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	7f9b      	ldrb	r3, [r3, #30]
 8010e12:	f003 0301 	and.w	r3, r3, #1
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d059      	beq.n	8010ece <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010e1a:	6a3b      	ldr	r3, [r7, #32]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d04f      	beq.n	8010ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d006      	beq.n	8010e36 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	889b      	ldrh	r3, [r3, #4]
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010e36:	2300      	movs	r3, #0
 8010e38:	623b      	str	r3, [r7, #32]
 8010e3a:	e041      	b.n	8010ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010e46:	e012      	b.n	8010e6e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e50:	88db      	ldrh	r3, [r3, #6]
 8010e52:	b29a      	uxth	r2, r3
 8010e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e56:	889b      	ldrh	r3, [r3, #4]
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d002      	beq.n	8010e64 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	623b      	str	r3, [r7, #32]
            break;
 8010e62:	e007      	b.n	8010e74 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e66:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d1e9      	bne.n	8010e48 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010e74:	6a3b      	ldr	r3, [r7, #32]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d022      	beq.n	8010ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d106      	bne.n	8010e90 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010e82:	4b15      	ldr	r3, [pc, #84]	; (8010ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010e84:	f240 12df 	movw	r2, #479	; 0x1df
 8010e88:	4917      	ldr	r1, [pc, #92]	; (8010ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010e8a:	4815      	ldr	r0, [pc, #84]	; (8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010e8c:	f000 fc7c 	bl	8011788 <iprintf>
          LWIP_ASSERT("sanity check",
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d106      	bne.n	8010eaa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010e9c:	4b0e      	ldr	r3, [pc, #56]	; (8010ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010e9e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010ea2:	4911      	ldr	r1, [pc, #68]	; (8010ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010ea4:	480e      	ldr	r0, [pc, #56]	; (8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010ea6:	f000 fc6f 	bl	8011788 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d006      	beq.n	8010ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010eb2:	4b09      	ldr	r3, [pc, #36]	; (8010ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010eb4:	f240 12e3 	movw	r2, #483	; 0x1e3
 8010eb8:	490c      	ldr	r1, [pc, #48]	; (8010eec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010eba:	4809      	ldr	r0, [pc, #36]	; (8010ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010ebc:	f000 fc64 	bl	8011788 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	bf14      	ite	ne
 8010ec6:	2301      	movne	r3, #1
 8010ec8:	2300      	moveq	r3, #0
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	e000      	b.n	8010ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010ece:	2300      	movs	r3, #0
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3730      	adds	r7, #48	; 0x30
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}
 8010ed8:	08014d14 	.word	0x08014d14
 8010edc:	08014df8 	.word	0x08014df8
 8010ee0:	08014d5c 	.word	0x08014d5c
 8010ee4:	08014e18 	.word	0x08014e18
 8010ee8:	08014e50 	.word	0x08014e50
 8010eec:	08014e60 	.word	0x08014e60

08010ef0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b08e      	sub	sp, #56	; 0x38
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	f003 030f 	and.w	r3, r3, #15
 8010f06:	b2db      	uxtb	r3, r3
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	2b14      	cmp	r3, #20
 8010f0e:	f040 8167 	bne.w	80111e0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f14:	88db      	ldrh	r3, [r3, #6]
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7f6 fe35 	bl	8007b88 <lwip_htons>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	00db      	lsls	r3, r3, #3
 8010f28:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2c:	885b      	ldrh	r3, [r3, #2]
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7f6 fe29 	bl	8007b88 <lwip_htons>
 8010f36:	4603      	mov	r3, r0
 8010f38:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	f003 030f 	and.w	r3, r3, #15
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	009b      	lsls	r3, r3, #2
 8010f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f52:	429a      	cmp	r2, r3
 8010f54:	f0c0 8146 	bcc.w	80111e4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f60:	1ad3      	subs	r3, r2, r3
 8010f62:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7f8 fa85 	bl	8009474 <pbuf_clen>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010f6e:	4ba3      	ldr	r3, [pc, #652]	; (80111fc <ip4_reass+0x30c>)
 8010f70:	881b      	ldrh	r3, [r3, #0]
 8010f72:	461a      	mov	r2, r3
 8010f74:	8c3b      	ldrh	r3, [r7, #32]
 8010f76:	4413      	add	r3, r2
 8010f78:	2b0a      	cmp	r3, #10
 8010f7a:	dd10      	ble.n	8010f9e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010f7c:	8c3b      	ldrh	r3, [r7, #32]
 8010f7e:	4619      	mov	r1, r3
 8010f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f82:	f7ff fd81 	bl	8010a88 <ip_reass_remove_oldest_datagram>
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f000 812d 	beq.w	80111e8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010f8e:	4b9b      	ldr	r3, [pc, #620]	; (80111fc <ip4_reass+0x30c>)
 8010f90:	881b      	ldrh	r3, [r3, #0]
 8010f92:	461a      	mov	r2, r3
 8010f94:	8c3b      	ldrh	r3, [r7, #32]
 8010f96:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010f98:	2b0a      	cmp	r3, #10
 8010f9a:	f300 8125 	bgt.w	80111e8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010f9e:	4b98      	ldr	r3, [pc, #608]	; (8011200 <ip4_reass+0x310>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8010fa4:	e015      	b.n	8010fd2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa8:	695a      	ldr	r2, [r3, #20]
 8010faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fac:	68db      	ldr	r3, [r3, #12]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d10c      	bne.n	8010fcc <ip4_reass+0xdc>
 8010fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb4:	699a      	ldr	r2, [r3, #24]
 8010fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb8:	691b      	ldr	r3, [r3, #16]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d106      	bne.n	8010fcc <ip4_reass+0xdc>
 8010fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc0:	899a      	ldrh	r2, [r3, #12]
 8010fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc4:	889b      	ldrh	r3, [r3, #4]
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d006      	beq.n	8010fda <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8010fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d1e6      	bne.n	8010fa6 <ip4_reass+0xb6>
 8010fd8:	e000      	b.n	8010fdc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010fda:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d109      	bne.n	8010ff6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010fe2:	8c3b      	ldrh	r3, [r7, #32]
 8010fe4:	4619      	mov	r1, r3
 8010fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fe8:	f7ff fdb0 	bl	8010b4c <ip_reass_enqueue_new_datagram>
 8010fec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d11c      	bne.n	801102e <ip4_reass+0x13e>
      goto nullreturn;
 8010ff4:	e0f9      	b.n	80111ea <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff8:	88db      	ldrh	r3, [r3, #6]
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7f6 fdc3 	bl	8007b88 <lwip_htons>
 8011002:	4603      	mov	r3, r0
 8011004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011008:	2b00      	cmp	r3, #0
 801100a:	d110      	bne.n	801102e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801100c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100e:	89db      	ldrh	r3, [r3, #14]
 8011010:	4618      	mov	r0, r3
 8011012:	f7f6 fdb9 	bl	8007b88 <lwip_htons>
 8011016:	4603      	mov	r3, r0
 8011018:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801101c:	2b00      	cmp	r3, #0
 801101e:	d006      	beq.n	801102e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011022:	3308      	adds	r3, #8
 8011024:	2214      	movs	r2, #20
 8011026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011028:	4618      	mov	r0, r3
 801102a:	f000 fb9a 	bl	8011762 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011030:	88db      	ldrh	r3, [r3, #6]
 8011032:	b29b      	uxth	r3, r3
 8011034:	f003 0320 	and.w	r3, r3, #32
 8011038:	2b00      	cmp	r3, #0
 801103a:	bf0c      	ite	eq
 801103c:	2301      	moveq	r3, #1
 801103e:	2300      	movne	r3, #0
 8011040:	b2db      	uxtb	r3, r3
 8011042:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d00e      	beq.n	8011068 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801104a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801104c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801104e:	4413      	add	r3, r2
 8011050:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011052:	8b7a      	ldrh	r2, [r7, #26]
 8011054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011056:	429a      	cmp	r2, r3
 8011058:	f0c0 80a0 	bcc.w	801119c <ip4_reass+0x2ac>
 801105c:	8b7b      	ldrh	r3, [r7, #26]
 801105e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011062:	4293      	cmp	r3, r2
 8011064:	f200 809a 	bhi.w	801119c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011068:	69fa      	ldr	r2, [r7, #28]
 801106a:	6879      	ldr	r1, [r7, #4]
 801106c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801106e:	f7ff fdd5 	bl	8010c1c <ip_reass_chain_frag_into_datagram_and_validate>
 8011072:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801107a:	f000 8091 	beq.w	80111a0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801107e:	4b5f      	ldr	r3, [pc, #380]	; (80111fc <ip4_reass+0x30c>)
 8011080:	881a      	ldrh	r2, [r3, #0]
 8011082:	8c3b      	ldrh	r3, [r7, #32]
 8011084:	4413      	add	r3, r2
 8011086:	b29a      	uxth	r2, r3
 8011088:	4b5c      	ldr	r3, [pc, #368]	; (80111fc <ip4_reass+0x30c>)
 801108a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00d      	beq.n	80110ae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011092:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011096:	4413      	add	r3, r2
 8011098:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	8a7a      	ldrh	r2, [r7, #18]
 801109e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80110a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a2:	7f9b      	ldrb	r3, [r3, #30]
 80110a4:	f043 0301 	orr.w	r3, r3, #1
 80110a8:	b2da      	uxtb	r2, r3
 80110aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d171      	bne.n	8011198 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80110b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b6:	8b9b      	ldrh	r3, [r3, #28]
 80110b8:	3314      	adds	r3, #20
 80110ba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80110bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80110c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80110ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d0:	3308      	adds	r3, #8
 80110d2:	2214      	movs	r2, #20
 80110d4:	4619      	mov	r1, r3
 80110d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110d8:	f000 fb43 	bl	8011762 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80110dc:	8a3b      	ldrh	r3, [r7, #16]
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f6 fd52 	bl	8007b88 <lwip_htons>
 80110e4:	4603      	mov	r3, r0
 80110e6:	461a      	mov	r2, r3
 80110e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80110ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ee:	2200      	movs	r2, #0
 80110f0:	719a      	strb	r2, [r3, #6]
 80110f2:	2200      	movs	r2, #0
 80110f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80110f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f8:	2200      	movs	r2, #0
 80110fa:	729a      	strb	r2, [r3, #10]
 80110fc:	2200      	movs	r2, #0
 80110fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011106:	e00d      	b.n	8011124 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801110e:	2114      	movs	r1, #20
 8011110:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011112:	f7f8 f8a1 	bl	8009258 <pbuf_remove_header>
      pbuf_cat(p, r);
 8011116:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f7f8 f9e5 	bl	80094e8 <pbuf_cat>
      r = iprh->next_pbuf;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1ee      	bne.n	8011108 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801112a:	4b35      	ldr	r3, [pc, #212]	; (8011200 <ip4_reass+0x310>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011130:	429a      	cmp	r2, r3
 8011132:	d102      	bne.n	801113a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011134:	2300      	movs	r3, #0
 8011136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011138:	e010      	b.n	801115c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801113a:	4b31      	ldr	r3, [pc, #196]	; (8011200 <ip4_reass+0x310>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011140:	e007      	b.n	8011152 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011148:	429a      	cmp	r2, r3
 801114a:	d006      	beq.n	801115a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011154:	2b00      	cmp	r3, #0
 8011156:	d1f4      	bne.n	8011142 <ip4_reass+0x252>
 8011158:	e000      	b.n	801115c <ip4_reass+0x26c>
          break;
 801115a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801115c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801115e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011160:	f7ff fd2e 	bl	8010bc0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7f8 f985 	bl	8009474 <pbuf_clen>
 801116a:	4603      	mov	r3, r0
 801116c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801116e:	4b23      	ldr	r3, [pc, #140]	; (80111fc <ip4_reass+0x30c>)
 8011170:	881b      	ldrh	r3, [r3, #0]
 8011172:	8c3a      	ldrh	r2, [r7, #32]
 8011174:	429a      	cmp	r2, r3
 8011176:	d906      	bls.n	8011186 <ip4_reass+0x296>
 8011178:	4b22      	ldr	r3, [pc, #136]	; (8011204 <ip4_reass+0x314>)
 801117a:	f240 229b 	movw	r2, #667	; 0x29b
 801117e:	4922      	ldr	r1, [pc, #136]	; (8011208 <ip4_reass+0x318>)
 8011180:	4822      	ldr	r0, [pc, #136]	; (801120c <ip4_reass+0x31c>)
 8011182:	f000 fb01 	bl	8011788 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011186:	4b1d      	ldr	r3, [pc, #116]	; (80111fc <ip4_reass+0x30c>)
 8011188:	881a      	ldrh	r2, [r3, #0]
 801118a:	8c3b      	ldrh	r3, [r7, #32]
 801118c:	1ad3      	subs	r3, r2, r3
 801118e:	b29a      	uxth	r2, r3
 8011190:	4b1a      	ldr	r3, [pc, #104]	; (80111fc <ip4_reass+0x30c>)
 8011192:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	e02c      	b.n	80111f2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011198:	2300      	movs	r3, #0
 801119a:	e02a      	b.n	80111f2 <ip4_reass+0x302>

nullreturn_ipr:
 801119c:	bf00      	nop
 801119e:	e000      	b.n	80111a2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80111a0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80111a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d106      	bne.n	80111b6 <ip4_reass+0x2c6>
 80111a8:	4b16      	ldr	r3, [pc, #88]	; (8011204 <ip4_reass+0x314>)
 80111aa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80111ae:	4918      	ldr	r1, [pc, #96]	; (8011210 <ip4_reass+0x320>)
 80111b0:	4816      	ldr	r0, [pc, #88]	; (801120c <ip4_reass+0x31c>)
 80111b2:	f000 fae9 	bl	8011788 <iprintf>
  if (ipr->p == NULL) {
 80111b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d114      	bne.n	80111e8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80111be:	4b10      	ldr	r3, [pc, #64]	; (8011200 <ip4_reass+0x310>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d006      	beq.n	80111d6 <ip4_reass+0x2e6>
 80111c8:	4b0e      	ldr	r3, [pc, #56]	; (8011204 <ip4_reass+0x314>)
 80111ca:	f240 22ab 	movw	r2, #683	; 0x2ab
 80111ce:	4911      	ldr	r1, [pc, #68]	; (8011214 <ip4_reass+0x324>)
 80111d0:	480e      	ldr	r0, [pc, #56]	; (801120c <ip4_reass+0x31c>)
 80111d2:	f000 fad9 	bl	8011788 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80111d6:	2100      	movs	r1, #0
 80111d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111da:	f7ff fcf1 	bl	8010bc0 <ip_reass_dequeue_datagram>
 80111de:	e004      	b.n	80111ea <ip4_reass+0x2fa>
    goto nullreturn;
 80111e0:	bf00      	nop
 80111e2:	e002      	b.n	80111ea <ip4_reass+0x2fa>
    goto nullreturn;
 80111e4:	bf00      	nop
 80111e6:	e000      	b.n	80111ea <ip4_reass+0x2fa>
  }

nullreturn:
 80111e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f7f8 f8ba 	bl	8009364 <pbuf_free>
  return NULL;
 80111f0:	2300      	movs	r3, #0
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3738      	adds	r7, #56	; 0x38
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	24001ab4 	.word	0x24001ab4
 8011200:	24001ab0 	.word	0x24001ab0
 8011204:	08014d14 	.word	0x08014d14
 8011208:	08014e84 	.word	0x08014e84
 801120c:	08014d5c 	.word	0x08014d5c
 8011210:	08014ea0 	.word	0x08014ea0
 8011214:	08014eac 	.word	0x08014eac

08011218 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801121c:	2005      	movs	r0, #5
 801121e:	f7f7 f9e3 	bl	80085e8 <memp_malloc>
 8011222:	4603      	mov	r3, r0
}
 8011224:	4618      	mov	r0, r3
 8011226:	bd80      	pop	{r7, pc}

08011228 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d106      	bne.n	8011244 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011236:	4b07      	ldr	r3, [pc, #28]	; (8011254 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011238:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801123c:	4906      	ldr	r1, [pc, #24]	; (8011258 <ip_frag_free_pbuf_custom_ref+0x30>)
 801123e:	4807      	ldr	r0, [pc, #28]	; (801125c <ip_frag_free_pbuf_custom_ref+0x34>)
 8011240:	f000 faa2 	bl	8011788 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011244:	6879      	ldr	r1, [r7, #4]
 8011246:	2005      	movs	r0, #5
 8011248:	f7f7 fa3e 	bl	80086c8 <memp_free>
}
 801124c:	bf00      	nop
 801124e:	3708      	adds	r7, #8
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	08014d14 	.word	0x08014d14
 8011258:	08014ecc 	.word	0x08014ecc
 801125c:	08014d5c 	.word	0x08014d5c

08011260 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d106      	bne.n	8011280 <ipfrag_free_pbuf_custom+0x20>
 8011272:	4b11      	ldr	r3, [pc, #68]	; (80112b8 <ipfrag_free_pbuf_custom+0x58>)
 8011274:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011278:	4910      	ldr	r1, [pc, #64]	; (80112bc <ipfrag_free_pbuf_custom+0x5c>)
 801127a:	4811      	ldr	r0, [pc, #68]	; (80112c0 <ipfrag_free_pbuf_custom+0x60>)
 801127c:	f000 fa84 	bl	8011788 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	429a      	cmp	r2, r3
 8011286:	d006      	beq.n	8011296 <ipfrag_free_pbuf_custom+0x36>
 8011288:	4b0b      	ldr	r3, [pc, #44]	; (80112b8 <ipfrag_free_pbuf_custom+0x58>)
 801128a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801128e:	490d      	ldr	r1, [pc, #52]	; (80112c4 <ipfrag_free_pbuf_custom+0x64>)
 8011290:	480b      	ldr	r0, [pc, #44]	; (80112c0 <ipfrag_free_pbuf_custom+0x60>)
 8011292:	f000 fa79 	bl	8011788 <iprintf>
  if (pcr->original != NULL) {
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	695b      	ldr	r3, [r3, #20]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d004      	beq.n	80112a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	695b      	ldr	r3, [r3, #20]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7f8 f85e 	bl	8009364 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80112a8:	68f8      	ldr	r0, [r7, #12]
 80112aa:	f7ff ffbd 	bl	8011228 <ip_frag_free_pbuf_custom_ref>
}
 80112ae:	bf00      	nop
 80112b0:	3710      	adds	r7, #16
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	08014d14 	.word	0x08014d14
 80112bc:	08014ed8 	.word	0x08014ed8
 80112c0:	08014d5c 	.word	0x08014d5c
 80112c4:	08014ee4 	.word	0x08014ee4

080112c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b094      	sub	sp, #80	; 0x50
 80112cc:	af02      	add	r7, sp, #8
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80112d4:	2300      	movs	r3, #0
 80112d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	8c1b      	ldrh	r3, [r3, #32]
 80112de:	3b14      	subs	r3, #20
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	da00      	bge.n	80112e6 <ip4_frag+0x1e>
 80112e4:	3307      	adds	r3, #7
 80112e6:	10db      	asrs	r3, r3, #3
 80112e8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80112ea:	2314      	movs	r3, #20
 80112ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80112f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80112f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	f003 030f 	and.w	r3, r3, #15
 8011300:	b2db      	uxtb	r3, r3
 8011302:	009b      	lsls	r3, r3, #2
 8011304:	b2db      	uxtb	r3, r3
 8011306:	2b14      	cmp	r3, #20
 8011308:	d002      	beq.n	8011310 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801130a:	f06f 0305 	mvn.w	r3, #5
 801130e:	e10f      	b.n	8011530 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	895b      	ldrh	r3, [r3, #10]
 8011314:	2b13      	cmp	r3, #19
 8011316:	d809      	bhi.n	801132c <ip4_frag+0x64>
 8011318:	4b87      	ldr	r3, [pc, #540]	; (8011538 <ip4_frag+0x270>)
 801131a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801131e:	4987      	ldr	r1, [pc, #540]	; (801153c <ip4_frag+0x274>)
 8011320:	4887      	ldr	r0, [pc, #540]	; (8011540 <ip4_frag+0x278>)
 8011322:	f000 fa31 	bl	8011788 <iprintf>
 8011326:	f06f 0305 	mvn.w	r3, #5
 801132a:	e101      	b.n	8011530 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132e:	88db      	ldrh	r3, [r3, #6]
 8011330:	b29b      	uxth	r3, r3
 8011332:	4618      	mov	r0, r3
 8011334:	f7f6 fc28 	bl	8007b88 <lwip_htons>
 8011338:	4603      	mov	r3, r0
 801133a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801133c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801133e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011342:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011346:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801134c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	891b      	ldrh	r3, [r3, #8]
 8011352:	3b14      	subs	r3, #20
 8011354:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011358:	e0e0      	b.n	801151c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801135a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801135c:	00db      	lsls	r3, r3, #3
 801135e:	b29b      	uxth	r3, r3
 8011360:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011364:	4293      	cmp	r3, r2
 8011366:	bf28      	it	cs
 8011368:	4613      	movcs	r3, r2
 801136a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801136c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011370:	2114      	movs	r1, #20
 8011372:	200e      	movs	r0, #14
 8011374:	f7f7 fd16 	bl	8008da4 <pbuf_alloc>
 8011378:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	2b00      	cmp	r3, #0
 801137e:	f000 80d4 	beq.w	801152a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011384:	895b      	ldrh	r3, [r3, #10]
 8011386:	2b13      	cmp	r3, #19
 8011388:	d806      	bhi.n	8011398 <ip4_frag+0xd0>
 801138a:	4b6b      	ldr	r3, [pc, #428]	; (8011538 <ip4_frag+0x270>)
 801138c:	f240 3225 	movw	r2, #805	; 0x325
 8011390:	496c      	ldr	r1, [pc, #432]	; (8011544 <ip4_frag+0x27c>)
 8011392:	486b      	ldr	r0, [pc, #428]	; (8011540 <ip4_frag+0x278>)
 8011394:	f000 f9f8 	bl	8011788 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	2214      	movs	r2, #20
 801139e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80113a0:	4618      	mov	r0, r3
 80113a2:	f000 f9de 	bl	8011762 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80113a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80113ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80113ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80113b2:	e064      	b.n	801147e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	895a      	ldrh	r2, [r3, #10]
 80113b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80113ba:	1ad3      	subs	r3, r2, r3
 80113bc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	895b      	ldrh	r3, [r3, #10]
 80113c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d906      	bls.n	80113d6 <ip4_frag+0x10e>
 80113c8:	4b5b      	ldr	r3, [pc, #364]	; (8011538 <ip4_frag+0x270>)
 80113ca:	f240 322d 	movw	r2, #813	; 0x32d
 80113ce:	495e      	ldr	r1, [pc, #376]	; (8011548 <ip4_frag+0x280>)
 80113d0:	485b      	ldr	r0, [pc, #364]	; (8011540 <ip4_frag+0x278>)
 80113d2:	f000 f9d9 	bl	8011788 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80113d6:	8bfa      	ldrh	r2, [r7, #30]
 80113d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80113dc:	4293      	cmp	r3, r2
 80113de:	bf28      	it	cs
 80113e0:	4613      	movcs	r3, r2
 80113e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80113e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d105      	bne.n	80113fa <ip4_frag+0x132>
        poff = 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	60fb      	str	r3, [r7, #12]
        continue;
 80113f8:	e041      	b.n	801147e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80113fa:	f7ff ff0d 	bl	8011218 <ip_frag_alloc_pbuf_custom_ref>
 80113fe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011400:	69bb      	ldr	r3, [r7, #24]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d103      	bne.n	801140e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011408:	f7f7 ffac 	bl	8009364 <pbuf_free>
        goto memerr;
 801140c:	e08e      	b.n	801152c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801140e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011414:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011416:	4413      	add	r3, r2
 8011418:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801141c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011420:	9201      	str	r2, [sp, #4]
 8011422:	9300      	str	r3, [sp, #0]
 8011424:	4603      	mov	r3, r0
 8011426:	2241      	movs	r2, #65	; 0x41
 8011428:	2000      	movs	r0, #0
 801142a:	f7f7 fde1 	bl	8008ff0 <pbuf_alloced_custom>
 801142e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011436:	69b8      	ldr	r0, [r7, #24]
 8011438:	f7ff fef6 	bl	8011228 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801143c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801143e:	f7f7 ff91 	bl	8009364 <pbuf_free>
        goto memerr;
 8011442:	e073      	b.n	801152c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8011444:	68f8      	ldr	r0, [r7, #12]
 8011446:	f7f8 f82d 	bl	80094a4 <pbuf_ref>
      pcr->original = p;
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	68fa      	ldr	r2, [r7, #12]
 801144e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	4a3e      	ldr	r2, [pc, #248]	; (801154c <ip4_frag+0x284>)
 8011454:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011456:	6979      	ldr	r1, [r7, #20]
 8011458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801145a:	f7f8 f845 	bl	80094e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801145e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011462:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011466:	1ad3      	subs	r3, r2, r3
 8011468:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801146c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011470:	2b00      	cmp	r3, #0
 8011472:	d004      	beq.n	801147e <ip4_frag+0x1b6>
        poff = 0;
 8011474:	2300      	movs	r3, #0
 8011476:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801147e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011482:	2b00      	cmp	r3, #0
 8011484:	d196      	bne.n	80113b4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011486:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011488:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801148c:	4413      	add	r3, r2
 801148e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011490:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	8c1b      	ldrh	r3, [r3, #32]
 8011498:	3b14      	subs	r3, #20
 801149a:	429a      	cmp	r2, r3
 801149c:	bfd4      	ite	le
 801149e:	2301      	movle	r3, #1
 80114a0:	2300      	movgt	r3, #0
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80114a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80114aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80114b0:	6a3b      	ldr	r3, [r7, #32]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d002      	beq.n	80114bc <ip4_frag+0x1f4>
 80114b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d003      	beq.n	80114c4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80114bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80114be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80114c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80114c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7f6 fb5e 	bl	8007b88 <lwip_htons>
 80114cc:	4603      	mov	r3, r0
 80114ce:	461a      	mov	r2, r3
 80114d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80114d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80114d6:	3314      	adds	r3, #20
 80114d8:	b29b      	uxth	r3, r3
 80114da:	4618      	mov	r0, r3
 80114dc:	f7f6 fb54 	bl	8007b88 <lwip_htons>
 80114e0:	4603      	mov	r3, r0
 80114e2:	461a      	mov	r2, r3
 80114e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80114e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ea:	2200      	movs	r2, #0
 80114ec:	729a      	strb	r2, [r3, #10]
 80114ee:	2200      	movs	r2, #0
 80114f0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	695b      	ldr	r3, [r3, #20]
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114fa:	68b8      	ldr	r0, [r7, #8]
 80114fc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80114fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011500:	f7f7 ff30 	bl	8009364 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011508:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801150a:	1ad3      	subs	r3, r2, r3
 801150c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011510:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011514:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011516:	4413      	add	r3, r2
 8011518:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801151c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011520:	2b00      	cmp	r3, #0
 8011522:	f47f af1a 	bne.w	801135a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011526:	2300      	movs	r3, #0
 8011528:	e002      	b.n	8011530 <ip4_frag+0x268>
      goto memerr;
 801152a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801152c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011530:	4618      	mov	r0, r3
 8011532:	3748      	adds	r7, #72	; 0x48
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}
 8011538:	08014d14 	.word	0x08014d14
 801153c:	08014ef0 	.word	0x08014ef0
 8011540:	08014d5c 	.word	0x08014d5c
 8011544:	08014f0c 	.word	0x08014f0c
 8011548:	08014f2c 	.word	0x08014f2c
 801154c:	08011261 	.word	0x08011261

08011550 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b086      	sub	sp, #24
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801155a:	230e      	movs	r3, #14
 801155c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	895b      	ldrh	r3, [r3, #10]
 8011562:	2b0e      	cmp	r3, #14
 8011564:	d96e      	bls.n	8011644 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	7bdb      	ldrb	r3, [r3, #15]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d106      	bne.n	801157c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011574:	3301      	adds	r3, #1
 8011576:	b2da      	uxtb	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	7b1a      	ldrb	r2, [r3, #12]
 8011586:	7b5b      	ldrb	r3, [r3, #13]
 8011588:	021b      	lsls	r3, r3, #8
 801158a:	4313      	orrs	r3, r2
 801158c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	f003 0301 	and.w	r3, r3, #1
 8011596:	2b00      	cmp	r3, #0
 8011598:	d023      	beq.n	80115e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	2b01      	cmp	r3, #1
 80115a0:	d10f      	bne.n	80115c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	785b      	ldrb	r3, [r3, #1]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d11b      	bne.n	80115e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80115ae:	2b5e      	cmp	r3, #94	; 0x5e
 80115b0:	d117      	bne.n	80115e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	7b5b      	ldrb	r3, [r3, #13]
 80115b6:	f043 0310 	orr.w	r3, r3, #16
 80115ba:	b2da      	uxtb	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	735a      	strb	r2, [r3, #13]
 80115c0:	e00f      	b.n	80115e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	2206      	movs	r2, #6
 80115c6:	4928      	ldr	r1, [pc, #160]	; (8011668 <ethernet_input+0x118>)
 80115c8:	4618      	mov	r0, r3
 80115ca:	f000 f8bb 	bl	8011744 <memcmp>
 80115ce:	4603      	mov	r3, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d106      	bne.n	80115e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	7b5b      	ldrb	r3, [r3, #13]
 80115d8:	f043 0308 	orr.w	r3, r3, #8
 80115dc:	b2da      	uxtb	r2, r3
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80115e2:	89fb      	ldrh	r3, [r7, #14]
 80115e4:	2b08      	cmp	r3, #8
 80115e6:	d003      	beq.n	80115f0 <ethernet_input+0xa0>
 80115e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80115ec:	d014      	beq.n	8011618 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80115ee:	e032      	b.n	8011656 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80115f6:	f003 0308 	and.w	r3, r3, #8
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d024      	beq.n	8011648 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80115fe:	8afb      	ldrh	r3, [r7, #22]
 8011600:	4619      	mov	r1, r3
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f7f7 fe28 	bl	8009258 <pbuf_remove_header>
 8011608:	4603      	mov	r3, r0
 801160a:	2b00      	cmp	r3, #0
 801160c:	d11e      	bne.n	801164c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801160e:	6839      	ldr	r1, [r7, #0]
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f7fe ff2d 	bl	8010470 <ip4_input>
      break;
 8011616:	e013      	b.n	8011640 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801161e:	f003 0308 	and.w	r3, r3, #8
 8011622:	2b00      	cmp	r3, #0
 8011624:	d014      	beq.n	8011650 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011626:	8afb      	ldrh	r3, [r7, #22]
 8011628:	4619      	mov	r1, r3
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f7f7 fe14 	bl	8009258 <pbuf_remove_header>
 8011630:	4603      	mov	r3, r0
 8011632:	2b00      	cmp	r3, #0
 8011634:	d10e      	bne.n	8011654 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011636:	6839      	ldr	r1, [r7, #0]
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f7fe f8a7 	bl	800f78c <etharp_input>
      break;
 801163e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011640:	2300      	movs	r3, #0
 8011642:	e00c      	b.n	801165e <ethernet_input+0x10e>
    goto free_and_return;
 8011644:	bf00      	nop
 8011646:	e006      	b.n	8011656 <ethernet_input+0x106>
        goto free_and_return;
 8011648:	bf00      	nop
 801164a:	e004      	b.n	8011656 <ethernet_input+0x106>
        goto free_and_return;
 801164c:	bf00      	nop
 801164e:	e002      	b.n	8011656 <ethernet_input+0x106>
        goto free_and_return;
 8011650:	bf00      	nop
 8011652:	e000      	b.n	8011656 <ethernet_input+0x106>
        goto free_and_return;
 8011654:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f7f7 fe84 	bl	8009364 <pbuf_free>
  return ERR_OK;
 801165c:	2300      	movs	r3, #0
}
 801165e:	4618      	mov	r0, r3
 8011660:	3718      	adds	r7, #24
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop
 8011668:	080150d8 	.word	0x080150d8

0801166c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801166c:	b580      	push	{r7, lr}
 801166e:	b086      	sub	sp, #24
 8011670:	af00      	add	r7, sp, #0
 8011672:	60f8      	str	r0, [r7, #12]
 8011674:	60b9      	str	r1, [r7, #8]
 8011676:	607a      	str	r2, [r7, #4]
 8011678:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801167a:	8c3b      	ldrh	r3, [r7, #32]
 801167c:	4618      	mov	r0, r3
 801167e:	f7f6 fa83 	bl	8007b88 <lwip_htons>
 8011682:	4603      	mov	r3, r0
 8011684:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011686:	210e      	movs	r1, #14
 8011688:	68b8      	ldr	r0, [r7, #8]
 801168a:	f7f7 fdd5 	bl	8009238 <pbuf_add_header>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	d125      	bne.n	80116e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	8afa      	ldrh	r2, [r7, #22]
 801169e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	2206      	movs	r2, #6
 80116a4:	6839      	ldr	r1, [r7, #0]
 80116a6:	4618      	mov	r0, r3
 80116a8:	f000 f85b 	bl	8011762 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	3306      	adds	r3, #6
 80116b0:	2206      	movs	r2, #6
 80116b2:	6879      	ldr	r1, [r7, #4]
 80116b4:	4618      	mov	r0, r3
 80116b6:	f000 f854 	bl	8011762 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116c0:	2b06      	cmp	r3, #6
 80116c2:	d006      	beq.n	80116d2 <ethernet_output+0x66>
 80116c4:	4b0a      	ldr	r3, [pc, #40]	; (80116f0 <ethernet_output+0x84>)
 80116c6:	f240 1233 	movw	r2, #307	; 0x133
 80116ca:	490a      	ldr	r1, [pc, #40]	; (80116f4 <ethernet_output+0x88>)
 80116cc:	480a      	ldr	r0, [pc, #40]	; (80116f8 <ethernet_output+0x8c>)
 80116ce:	f000 f85b 	bl	8011788 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	699b      	ldr	r3, [r3, #24]
 80116d6:	68b9      	ldr	r1, [r7, #8]
 80116d8:	68f8      	ldr	r0, [r7, #12]
 80116da:	4798      	blx	r3
 80116dc:	4603      	mov	r3, r0
 80116de:	e002      	b.n	80116e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80116e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80116e2:	f06f 0301 	mvn.w	r3, #1
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3718      	adds	r7, #24
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	08014f3c 	.word	0x08014f3c
 80116f4:	08014f74 	.word	0x08014f74
 80116f8:	08014fa8 	.word	0x08014fa8

080116fc <__libc_init_array>:
 80116fc:	b570      	push	{r4, r5, r6, lr}
 80116fe:	4e0d      	ldr	r6, [pc, #52]	; (8011734 <__libc_init_array+0x38>)
 8011700:	4c0d      	ldr	r4, [pc, #52]	; (8011738 <__libc_init_array+0x3c>)
 8011702:	1ba4      	subs	r4, r4, r6
 8011704:	10a4      	asrs	r4, r4, #2
 8011706:	2500      	movs	r5, #0
 8011708:	42a5      	cmp	r5, r4
 801170a:	d109      	bne.n	8011720 <__libc_init_array+0x24>
 801170c:	4e0b      	ldr	r6, [pc, #44]	; (801173c <__libc_init_array+0x40>)
 801170e:	4c0c      	ldr	r4, [pc, #48]	; (8011740 <__libc_init_array+0x44>)
 8011710:	f000 ff5a 	bl	80125c8 <_init>
 8011714:	1ba4      	subs	r4, r4, r6
 8011716:	10a4      	asrs	r4, r4, #2
 8011718:	2500      	movs	r5, #0
 801171a:	42a5      	cmp	r5, r4
 801171c:	d105      	bne.n	801172a <__libc_init_array+0x2e>
 801171e:	bd70      	pop	{r4, r5, r6, pc}
 8011720:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011724:	4798      	blx	r3
 8011726:	3501      	adds	r5, #1
 8011728:	e7ee      	b.n	8011708 <__libc_init_array+0xc>
 801172a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801172e:	4798      	blx	r3
 8011730:	3501      	adds	r5, #1
 8011732:	e7f2      	b.n	801171a <__libc_init_array+0x1e>
 8011734:	08015188 	.word	0x08015188
 8011738:	08015188 	.word	0x08015188
 801173c:	08015188 	.word	0x08015188
 8011740:	0801518c 	.word	0x0801518c

08011744 <memcmp>:
 8011744:	b530      	push	{r4, r5, lr}
 8011746:	2400      	movs	r4, #0
 8011748:	42a2      	cmp	r2, r4
 801174a:	d101      	bne.n	8011750 <memcmp+0xc>
 801174c:	2000      	movs	r0, #0
 801174e:	e007      	b.n	8011760 <memcmp+0x1c>
 8011750:	5d03      	ldrb	r3, [r0, r4]
 8011752:	3401      	adds	r4, #1
 8011754:	190d      	adds	r5, r1, r4
 8011756:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801175a:	42ab      	cmp	r3, r5
 801175c:	d0f4      	beq.n	8011748 <memcmp+0x4>
 801175e:	1b58      	subs	r0, r3, r5
 8011760:	bd30      	pop	{r4, r5, pc}

08011762 <memcpy>:
 8011762:	b510      	push	{r4, lr}
 8011764:	1e43      	subs	r3, r0, #1
 8011766:	440a      	add	r2, r1
 8011768:	4291      	cmp	r1, r2
 801176a:	d100      	bne.n	801176e <memcpy+0xc>
 801176c:	bd10      	pop	{r4, pc}
 801176e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011776:	e7f7      	b.n	8011768 <memcpy+0x6>

08011778 <memset>:
 8011778:	4402      	add	r2, r0
 801177a:	4603      	mov	r3, r0
 801177c:	4293      	cmp	r3, r2
 801177e:	d100      	bne.n	8011782 <memset+0xa>
 8011780:	4770      	bx	lr
 8011782:	f803 1b01 	strb.w	r1, [r3], #1
 8011786:	e7f9      	b.n	801177c <memset+0x4>

08011788 <iprintf>:
 8011788:	b40f      	push	{r0, r1, r2, r3}
 801178a:	4b0a      	ldr	r3, [pc, #40]	; (80117b4 <iprintf+0x2c>)
 801178c:	b513      	push	{r0, r1, r4, lr}
 801178e:	681c      	ldr	r4, [r3, #0]
 8011790:	b124      	cbz	r4, 801179c <iprintf+0x14>
 8011792:	69a3      	ldr	r3, [r4, #24]
 8011794:	b913      	cbnz	r3, 801179c <iprintf+0x14>
 8011796:	4620      	mov	r0, r4
 8011798:	f000 f882 	bl	80118a0 <__sinit>
 801179c:	ab05      	add	r3, sp, #20
 801179e:	9a04      	ldr	r2, [sp, #16]
 80117a0:	68a1      	ldr	r1, [r4, #8]
 80117a2:	9301      	str	r3, [sp, #4]
 80117a4:	4620      	mov	r0, r4
 80117a6:	f000 f9df 	bl	8011b68 <_vfiprintf_r>
 80117aa:	b002      	add	sp, #8
 80117ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b0:	b004      	add	sp, #16
 80117b2:	4770      	bx	lr
 80117b4:	24000030 	.word	0x24000030

080117b8 <rand>:
 80117b8:	b538      	push	{r3, r4, r5, lr}
 80117ba:	4b13      	ldr	r3, [pc, #76]	; (8011808 <rand+0x50>)
 80117bc:	681c      	ldr	r4, [r3, #0]
 80117be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80117c0:	b97b      	cbnz	r3, 80117e2 <rand+0x2a>
 80117c2:	2018      	movs	r0, #24
 80117c4:	f000 f8f6 	bl	80119b4 <malloc>
 80117c8:	4a10      	ldr	r2, [pc, #64]	; (801180c <rand+0x54>)
 80117ca:	4b11      	ldr	r3, [pc, #68]	; (8011810 <rand+0x58>)
 80117cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80117ce:	e9c0 2300 	strd	r2, r3, [r0]
 80117d2:	4b10      	ldr	r3, [pc, #64]	; (8011814 <rand+0x5c>)
 80117d4:	6083      	str	r3, [r0, #8]
 80117d6:	230b      	movs	r3, #11
 80117d8:	8183      	strh	r3, [r0, #12]
 80117da:	2201      	movs	r2, #1
 80117dc:	2300      	movs	r3, #0
 80117de:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80117e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80117e4:	480c      	ldr	r0, [pc, #48]	; (8011818 <rand+0x60>)
 80117e6:	690a      	ldr	r2, [r1, #16]
 80117e8:	694b      	ldr	r3, [r1, #20]
 80117ea:	4c0c      	ldr	r4, [pc, #48]	; (801181c <rand+0x64>)
 80117ec:	4350      	muls	r0, r2
 80117ee:	fb04 0003 	mla	r0, r4, r3, r0
 80117f2:	fba2 2304 	umull	r2, r3, r2, r4
 80117f6:	4403      	add	r3, r0
 80117f8:	1c54      	adds	r4, r2, #1
 80117fa:	f143 0500 	adc.w	r5, r3, #0
 80117fe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8011802:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8011806:	bd38      	pop	{r3, r4, r5, pc}
 8011808:	24000030 	.word	0x24000030
 801180c:	abcd330e 	.word	0xabcd330e
 8011810:	e66d1234 	.word	0xe66d1234
 8011814:	0005deec 	.word	0x0005deec
 8011818:	5851f42d 	.word	0x5851f42d
 801181c:	4c957f2d 	.word	0x4c957f2d

08011820 <std>:
 8011820:	2300      	movs	r3, #0
 8011822:	b510      	push	{r4, lr}
 8011824:	4604      	mov	r4, r0
 8011826:	e9c0 3300 	strd	r3, r3, [r0]
 801182a:	6083      	str	r3, [r0, #8]
 801182c:	8181      	strh	r1, [r0, #12]
 801182e:	6643      	str	r3, [r0, #100]	; 0x64
 8011830:	81c2      	strh	r2, [r0, #14]
 8011832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011836:	6183      	str	r3, [r0, #24]
 8011838:	4619      	mov	r1, r3
 801183a:	2208      	movs	r2, #8
 801183c:	305c      	adds	r0, #92	; 0x5c
 801183e:	f7ff ff9b 	bl	8011778 <memset>
 8011842:	4b05      	ldr	r3, [pc, #20]	; (8011858 <std+0x38>)
 8011844:	6263      	str	r3, [r4, #36]	; 0x24
 8011846:	4b05      	ldr	r3, [pc, #20]	; (801185c <std+0x3c>)
 8011848:	62a3      	str	r3, [r4, #40]	; 0x28
 801184a:	4b05      	ldr	r3, [pc, #20]	; (8011860 <std+0x40>)
 801184c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801184e:	4b05      	ldr	r3, [pc, #20]	; (8011864 <std+0x44>)
 8011850:	6224      	str	r4, [r4, #32]
 8011852:	6323      	str	r3, [r4, #48]	; 0x30
 8011854:	bd10      	pop	{r4, pc}
 8011856:	bf00      	nop
 8011858:	080120c5 	.word	0x080120c5
 801185c:	080120e7 	.word	0x080120e7
 8011860:	0801211f 	.word	0x0801211f
 8011864:	08012143 	.word	0x08012143

08011868 <_cleanup_r>:
 8011868:	4901      	ldr	r1, [pc, #4]	; (8011870 <_cleanup_r+0x8>)
 801186a:	f000 b885 	b.w	8011978 <_fwalk_reent>
 801186e:	bf00      	nop
 8011870:	0801241d 	.word	0x0801241d

08011874 <__sfmoreglue>:
 8011874:	b570      	push	{r4, r5, r6, lr}
 8011876:	1e4a      	subs	r2, r1, #1
 8011878:	2568      	movs	r5, #104	; 0x68
 801187a:	4355      	muls	r5, r2
 801187c:	460e      	mov	r6, r1
 801187e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011882:	f000 f8ed 	bl	8011a60 <_malloc_r>
 8011886:	4604      	mov	r4, r0
 8011888:	b140      	cbz	r0, 801189c <__sfmoreglue+0x28>
 801188a:	2100      	movs	r1, #0
 801188c:	e9c0 1600 	strd	r1, r6, [r0]
 8011890:	300c      	adds	r0, #12
 8011892:	60a0      	str	r0, [r4, #8]
 8011894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011898:	f7ff ff6e 	bl	8011778 <memset>
 801189c:	4620      	mov	r0, r4
 801189e:	bd70      	pop	{r4, r5, r6, pc}

080118a0 <__sinit>:
 80118a0:	6983      	ldr	r3, [r0, #24]
 80118a2:	b510      	push	{r4, lr}
 80118a4:	4604      	mov	r4, r0
 80118a6:	bb33      	cbnz	r3, 80118f6 <__sinit+0x56>
 80118a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80118ac:	6503      	str	r3, [r0, #80]	; 0x50
 80118ae:	4b12      	ldr	r3, [pc, #72]	; (80118f8 <__sinit+0x58>)
 80118b0:	4a12      	ldr	r2, [pc, #72]	; (80118fc <__sinit+0x5c>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	6282      	str	r2, [r0, #40]	; 0x28
 80118b6:	4298      	cmp	r0, r3
 80118b8:	bf04      	itt	eq
 80118ba:	2301      	moveq	r3, #1
 80118bc:	6183      	streq	r3, [r0, #24]
 80118be:	f000 f81f 	bl	8011900 <__sfp>
 80118c2:	6060      	str	r0, [r4, #4]
 80118c4:	4620      	mov	r0, r4
 80118c6:	f000 f81b 	bl	8011900 <__sfp>
 80118ca:	60a0      	str	r0, [r4, #8]
 80118cc:	4620      	mov	r0, r4
 80118ce:	f000 f817 	bl	8011900 <__sfp>
 80118d2:	2200      	movs	r2, #0
 80118d4:	60e0      	str	r0, [r4, #12]
 80118d6:	2104      	movs	r1, #4
 80118d8:	6860      	ldr	r0, [r4, #4]
 80118da:	f7ff ffa1 	bl	8011820 <std>
 80118de:	2201      	movs	r2, #1
 80118e0:	2109      	movs	r1, #9
 80118e2:	68a0      	ldr	r0, [r4, #8]
 80118e4:	f7ff ff9c 	bl	8011820 <std>
 80118e8:	2202      	movs	r2, #2
 80118ea:	2112      	movs	r1, #18
 80118ec:	68e0      	ldr	r0, [r4, #12]
 80118ee:	f7ff ff97 	bl	8011820 <std>
 80118f2:	2301      	movs	r3, #1
 80118f4:	61a3      	str	r3, [r4, #24]
 80118f6:	bd10      	pop	{r4, pc}
 80118f8:	080150e8 	.word	0x080150e8
 80118fc:	08011869 	.word	0x08011869

08011900 <__sfp>:
 8011900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011902:	4b1b      	ldr	r3, [pc, #108]	; (8011970 <__sfp+0x70>)
 8011904:	681e      	ldr	r6, [r3, #0]
 8011906:	69b3      	ldr	r3, [r6, #24]
 8011908:	4607      	mov	r7, r0
 801190a:	b913      	cbnz	r3, 8011912 <__sfp+0x12>
 801190c:	4630      	mov	r0, r6
 801190e:	f7ff ffc7 	bl	80118a0 <__sinit>
 8011912:	3648      	adds	r6, #72	; 0x48
 8011914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011918:	3b01      	subs	r3, #1
 801191a:	d503      	bpl.n	8011924 <__sfp+0x24>
 801191c:	6833      	ldr	r3, [r6, #0]
 801191e:	b133      	cbz	r3, 801192e <__sfp+0x2e>
 8011920:	6836      	ldr	r6, [r6, #0]
 8011922:	e7f7      	b.n	8011914 <__sfp+0x14>
 8011924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011928:	b16d      	cbz	r5, 8011946 <__sfp+0x46>
 801192a:	3468      	adds	r4, #104	; 0x68
 801192c:	e7f4      	b.n	8011918 <__sfp+0x18>
 801192e:	2104      	movs	r1, #4
 8011930:	4638      	mov	r0, r7
 8011932:	f7ff ff9f 	bl	8011874 <__sfmoreglue>
 8011936:	6030      	str	r0, [r6, #0]
 8011938:	2800      	cmp	r0, #0
 801193a:	d1f1      	bne.n	8011920 <__sfp+0x20>
 801193c:	230c      	movs	r3, #12
 801193e:	603b      	str	r3, [r7, #0]
 8011940:	4604      	mov	r4, r0
 8011942:	4620      	mov	r0, r4
 8011944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011946:	4b0b      	ldr	r3, [pc, #44]	; (8011974 <__sfp+0x74>)
 8011948:	6665      	str	r5, [r4, #100]	; 0x64
 801194a:	e9c4 5500 	strd	r5, r5, [r4]
 801194e:	60a5      	str	r5, [r4, #8]
 8011950:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011954:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011958:	2208      	movs	r2, #8
 801195a:	4629      	mov	r1, r5
 801195c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011960:	f7ff ff0a 	bl	8011778 <memset>
 8011964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801196c:	e7e9      	b.n	8011942 <__sfp+0x42>
 801196e:	bf00      	nop
 8011970:	080150e8 	.word	0x080150e8
 8011974:	ffff0001 	.word	0xffff0001

08011978 <_fwalk_reent>:
 8011978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801197c:	4680      	mov	r8, r0
 801197e:	4689      	mov	r9, r1
 8011980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011984:	2600      	movs	r6, #0
 8011986:	b914      	cbnz	r4, 801198e <_fwalk_reent+0x16>
 8011988:	4630      	mov	r0, r6
 801198a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801198e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011992:	3f01      	subs	r7, #1
 8011994:	d501      	bpl.n	801199a <_fwalk_reent+0x22>
 8011996:	6824      	ldr	r4, [r4, #0]
 8011998:	e7f5      	b.n	8011986 <_fwalk_reent+0xe>
 801199a:	89ab      	ldrh	r3, [r5, #12]
 801199c:	2b01      	cmp	r3, #1
 801199e:	d907      	bls.n	80119b0 <_fwalk_reent+0x38>
 80119a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119a4:	3301      	adds	r3, #1
 80119a6:	d003      	beq.n	80119b0 <_fwalk_reent+0x38>
 80119a8:	4629      	mov	r1, r5
 80119aa:	4640      	mov	r0, r8
 80119ac:	47c8      	blx	r9
 80119ae:	4306      	orrs	r6, r0
 80119b0:	3568      	adds	r5, #104	; 0x68
 80119b2:	e7ee      	b.n	8011992 <_fwalk_reent+0x1a>

080119b4 <malloc>:
 80119b4:	4b02      	ldr	r3, [pc, #8]	; (80119c0 <malloc+0xc>)
 80119b6:	4601      	mov	r1, r0
 80119b8:	6818      	ldr	r0, [r3, #0]
 80119ba:	f000 b851 	b.w	8011a60 <_malloc_r>
 80119be:	bf00      	nop
 80119c0:	24000030 	.word	0x24000030

080119c4 <_free_r>:
 80119c4:	b538      	push	{r3, r4, r5, lr}
 80119c6:	4605      	mov	r5, r0
 80119c8:	2900      	cmp	r1, #0
 80119ca:	d045      	beq.n	8011a58 <_free_r+0x94>
 80119cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119d0:	1f0c      	subs	r4, r1, #4
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	bfb8      	it	lt
 80119d6:	18e4      	addlt	r4, r4, r3
 80119d8:	f000 fdc0 	bl	801255c <__malloc_lock>
 80119dc:	4a1f      	ldr	r2, [pc, #124]	; (8011a5c <_free_r+0x98>)
 80119de:	6813      	ldr	r3, [r2, #0]
 80119e0:	4610      	mov	r0, r2
 80119e2:	b933      	cbnz	r3, 80119f2 <_free_r+0x2e>
 80119e4:	6063      	str	r3, [r4, #4]
 80119e6:	6014      	str	r4, [r2, #0]
 80119e8:	4628      	mov	r0, r5
 80119ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119ee:	f000 bdb6 	b.w	801255e <__malloc_unlock>
 80119f2:	42a3      	cmp	r3, r4
 80119f4:	d90c      	bls.n	8011a10 <_free_r+0x4c>
 80119f6:	6821      	ldr	r1, [r4, #0]
 80119f8:	1862      	adds	r2, r4, r1
 80119fa:	4293      	cmp	r3, r2
 80119fc:	bf04      	itt	eq
 80119fe:	681a      	ldreq	r2, [r3, #0]
 8011a00:	685b      	ldreq	r3, [r3, #4]
 8011a02:	6063      	str	r3, [r4, #4]
 8011a04:	bf04      	itt	eq
 8011a06:	1852      	addeq	r2, r2, r1
 8011a08:	6022      	streq	r2, [r4, #0]
 8011a0a:	6004      	str	r4, [r0, #0]
 8011a0c:	e7ec      	b.n	80119e8 <_free_r+0x24>
 8011a0e:	4613      	mov	r3, r2
 8011a10:	685a      	ldr	r2, [r3, #4]
 8011a12:	b10a      	cbz	r2, 8011a18 <_free_r+0x54>
 8011a14:	42a2      	cmp	r2, r4
 8011a16:	d9fa      	bls.n	8011a0e <_free_r+0x4a>
 8011a18:	6819      	ldr	r1, [r3, #0]
 8011a1a:	1858      	adds	r0, r3, r1
 8011a1c:	42a0      	cmp	r0, r4
 8011a1e:	d10b      	bne.n	8011a38 <_free_r+0x74>
 8011a20:	6820      	ldr	r0, [r4, #0]
 8011a22:	4401      	add	r1, r0
 8011a24:	1858      	adds	r0, r3, r1
 8011a26:	4282      	cmp	r2, r0
 8011a28:	6019      	str	r1, [r3, #0]
 8011a2a:	d1dd      	bne.n	80119e8 <_free_r+0x24>
 8011a2c:	6810      	ldr	r0, [r2, #0]
 8011a2e:	6852      	ldr	r2, [r2, #4]
 8011a30:	605a      	str	r2, [r3, #4]
 8011a32:	4401      	add	r1, r0
 8011a34:	6019      	str	r1, [r3, #0]
 8011a36:	e7d7      	b.n	80119e8 <_free_r+0x24>
 8011a38:	d902      	bls.n	8011a40 <_free_r+0x7c>
 8011a3a:	230c      	movs	r3, #12
 8011a3c:	602b      	str	r3, [r5, #0]
 8011a3e:	e7d3      	b.n	80119e8 <_free_r+0x24>
 8011a40:	6820      	ldr	r0, [r4, #0]
 8011a42:	1821      	adds	r1, r4, r0
 8011a44:	428a      	cmp	r2, r1
 8011a46:	bf04      	itt	eq
 8011a48:	6811      	ldreq	r1, [r2, #0]
 8011a4a:	6852      	ldreq	r2, [r2, #4]
 8011a4c:	6062      	str	r2, [r4, #4]
 8011a4e:	bf04      	itt	eq
 8011a50:	1809      	addeq	r1, r1, r0
 8011a52:	6021      	streq	r1, [r4, #0]
 8011a54:	605c      	str	r4, [r3, #4]
 8011a56:	e7c7      	b.n	80119e8 <_free_r+0x24>
 8011a58:	bd38      	pop	{r3, r4, r5, pc}
 8011a5a:	bf00      	nop
 8011a5c:	24001ab8 	.word	0x24001ab8

08011a60 <_malloc_r>:
 8011a60:	b570      	push	{r4, r5, r6, lr}
 8011a62:	1ccd      	adds	r5, r1, #3
 8011a64:	f025 0503 	bic.w	r5, r5, #3
 8011a68:	3508      	adds	r5, #8
 8011a6a:	2d0c      	cmp	r5, #12
 8011a6c:	bf38      	it	cc
 8011a6e:	250c      	movcc	r5, #12
 8011a70:	2d00      	cmp	r5, #0
 8011a72:	4606      	mov	r6, r0
 8011a74:	db01      	blt.n	8011a7a <_malloc_r+0x1a>
 8011a76:	42a9      	cmp	r1, r5
 8011a78:	d903      	bls.n	8011a82 <_malloc_r+0x22>
 8011a7a:	230c      	movs	r3, #12
 8011a7c:	6033      	str	r3, [r6, #0]
 8011a7e:	2000      	movs	r0, #0
 8011a80:	bd70      	pop	{r4, r5, r6, pc}
 8011a82:	f000 fd6b 	bl	801255c <__malloc_lock>
 8011a86:	4a21      	ldr	r2, [pc, #132]	; (8011b0c <_malloc_r+0xac>)
 8011a88:	6814      	ldr	r4, [r2, #0]
 8011a8a:	4621      	mov	r1, r4
 8011a8c:	b991      	cbnz	r1, 8011ab4 <_malloc_r+0x54>
 8011a8e:	4c20      	ldr	r4, [pc, #128]	; (8011b10 <_malloc_r+0xb0>)
 8011a90:	6823      	ldr	r3, [r4, #0]
 8011a92:	b91b      	cbnz	r3, 8011a9c <_malloc_r+0x3c>
 8011a94:	4630      	mov	r0, r6
 8011a96:	f000 fb05 	bl	80120a4 <_sbrk_r>
 8011a9a:	6020      	str	r0, [r4, #0]
 8011a9c:	4629      	mov	r1, r5
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	f000 fb00 	bl	80120a4 <_sbrk_r>
 8011aa4:	1c43      	adds	r3, r0, #1
 8011aa6:	d124      	bne.n	8011af2 <_malloc_r+0x92>
 8011aa8:	230c      	movs	r3, #12
 8011aaa:	6033      	str	r3, [r6, #0]
 8011aac:	4630      	mov	r0, r6
 8011aae:	f000 fd56 	bl	801255e <__malloc_unlock>
 8011ab2:	e7e4      	b.n	8011a7e <_malloc_r+0x1e>
 8011ab4:	680b      	ldr	r3, [r1, #0]
 8011ab6:	1b5b      	subs	r3, r3, r5
 8011ab8:	d418      	bmi.n	8011aec <_malloc_r+0x8c>
 8011aba:	2b0b      	cmp	r3, #11
 8011abc:	d90f      	bls.n	8011ade <_malloc_r+0x7e>
 8011abe:	600b      	str	r3, [r1, #0]
 8011ac0:	50cd      	str	r5, [r1, r3]
 8011ac2:	18cc      	adds	r4, r1, r3
 8011ac4:	4630      	mov	r0, r6
 8011ac6:	f000 fd4a 	bl	801255e <__malloc_unlock>
 8011aca:	f104 000b 	add.w	r0, r4, #11
 8011ace:	1d23      	adds	r3, r4, #4
 8011ad0:	f020 0007 	bic.w	r0, r0, #7
 8011ad4:	1ac3      	subs	r3, r0, r3
 8011ad6:	d0d3      	beq.n	8011a80 <_malloc_r+0x20>
 8011ad8:	425a      	negs	r2, r3
 8011ada:	50e2      	str	r2, [r4, r3]
 8011adc:	e7d0      	b.n	8011a80 <_malloc_r+0x20>
 8011ade:	428c      	cmp	r4, r1
 8011ae0:	684b      	ldr	r3, [r1, #4]
 8011ae2:	bf16      	itet	ne
 8011ae4:	6063      	strne	r3, [r4, #4]
 8011ae6:	6013      	streq	r3, [r2, #0]
 8011ae8:	460c      	movne	r4, r1
 8011aea:	e7eb      	b.n	8011ac4 <_malloc_r+0x64>
 8011aec:	460c      	mov	r4, r1
 8011aee:	6849      	ldr	r1, [r1, #4]
 8011af0:	e7cc      	b.n	8011a8c <_malloc_r+0x2c>
 8011af2:	1cc4      	adds	r4, r0, #3
 8011af4:	f024 0403 	bic.w	r4, r4, #3
 8011af8:	42a0      	cmp	r0, r4
 8011afa:	d005      	beq.n	8011b08 <_malloc_r+0xa8>
 8011afc:	1a21      	subs	r1, r4, r0
 8011afe:	4630      	mov	r0, r6
 8011b00:	f000 fad0 	bl	80120a4 <_sbrk_r>
 8011b04:	3001      	adds	r0, #1
 8011b06:	d0cf      	beq.n	8011aa8 <_malloc_r+0x48>
 8011b08:	6025      	str	r5, [r4, #0]
 8011b0a:	e7db      	b.n	8011ac4 <_malloc_r+0x64>
 8011b0c:	24001ab8 	.word	0x24001ab8
 8011b10:	24001abc 	.word	0x24001abc

08011b14 <__sfputc_r>:
 8011b14:	6893      	ldr	r3, [r2, #8]
 8011b16:	3b01      	subs	r3, #1
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	b410      	push	{r4}
 8011b1c:	6093      	str	r3, [r2, #8]
 8011b1e:	da08      	bge.n	8011b32 <__sfputc_r+0x1e>
 8011b20:	6994      	ldr	r4, [r2, #24]
 8011b22:	42a3      	cmp	r3, r4
 8011b24:	db01      	blt.n	8011b2a <__sfputc_r+0x16>
 8011b26:	290a      	cmp	r1, #10
 8011b28:	d103      	bne.n	8011b32 <__sfputc_r+0x1e>
 8011b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b2e:	f000 bb0d 	b.w	801214c <__swbuf_r>
 8011b32:	6813      	ldr	r3, [r2, #0]
 8011b34:	1c58      	adds	r0, r3, #1
 8011b36:	6010      	str	r0, [r2, #0]
 8011b38:	7019      	strb	r1, [r3, #0]
 8011b3a:	4608      	mov	r0, r1
 8011b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b40:	4770      	bx	lr

08011b42 <__sfputs_r>:
 8011b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b44:	4606      	mov	r6, r0
 8011b46:	460f      	mov	r7, r1
 8011b48:	4614      	mov	r4, r2
 8011b4a:	18d5      	adds	r5, r2, r3
 8011b4c:	42ac      	cmp	r4, r5
 8011b4e:	d101      	bne.n	8011b54 <__sfputs_r+0x12>
 8011b50:	2000      	movs	r0, #0
 8011b52:	e007      	b.n	8011b64 <__sfputs_r+0x22>
 8011b54:	463a      	mov	r2, r7
 8011b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f7ff ffda 	bl	8011b14 <__sfputc_r>
 8011b60:	1c43      	adds	r3, r0, #1
 8011b62:	d1f3      	bne.n	8011b4c <__sfputs_r+0xa>
 8011b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b68 <_vfiprintf_r>:
 8011b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b6c:	460c      	mov	r4, r1
 8011b6e:	b09d      	sub	sp, #116	; 0x74
 8011b70:	4617      	mov	r7, r2
 8011b72:	461d      	mov	r5, r3
 8011b74:	4606      	mov	r6, r0
 8011b76:	b118      	cbz	r0, 8011b80 <_vfiprintf_r+0x18>
 8011b78:	6983      	ldr	r3, [r0, #24]
 8011b7a:	b90b      	cbnz	r3, 8011b80 <_vfiprintf_r+0x18>
 8011b7c:	f7ff fe90 	bl	80118a0 <__sinit>
 8011b80:	4b7c      	ldr	r3, [pc, #496]	; (8011d74 <_vfiprintf_r+0x20c>)
 8011b82:	429c      	cmp	r4, r3
 8011b84:	d158      	bne.n	8011c38 <_vfiprintf_r+0xd0>
 8011b86:	6874      	ldr	r4, [r6, #4]
 8011b88:	89a3      	ldrh	r3, [r4, #12]
 8011b8a:	0718      	lsls	r0, r3, #28
 8011b8c:	d55e      	bpl.n	8011c4c <_vfiprintf_r+0xe4>
 8011b8e:	6923      	ldr	r3, [r4, #16]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d05b      	beq.n	8011c4c <_vfiprintf_r+0xe4>
 8011b94:	2300      	movs	r3, #0
 8011b96:	9309      	str	r3, [sp, #36]	; 0x24
 8011b98:	2320      	movs	r3, #32
 8011b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b9e:	2330      	movs	r3, #48	; 0x30
 8011ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ba4:	9503      	str	r5, [sp, #12]
 8011ba6:	f04f 0b01 	mov.w	fp, #1
 8011baa:	46b8      	mov	r8, r7
 8011bac:	4645      	mov	r5, r8
 8011bae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011bb2:	b10b      	cbz	r3, 8011bb8 <_vfiprintf_r+0x50>
 8011bb4:	2b25      	cmp	r3, #37	; 0x25
 8011bb6:	d154      	bne.n	8011c62 <_vfiprintf_r+0xfa>
 8011bb8:	ebb8 0a07 	subs.w	sl, r8, r7
 8011bbc:	d00b      	beq.n	8011bd6 <_vfiprintf_r+0x6e>
 8011bbe:	4653      	mov	r3, sl
 8011bc0:	463a      	mov	r2, r7
 8011bc2:	4621      	mov	r1, r4
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	f7ff ffbc 	bl	8011b42 <__sfputs_r>
 8011bca:	3001      	adds	r0, #1
 8011bcc:	f000 80c2 	beq.w	8011d54 <_vfiprintf_r+0x1ec>
 8011bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bd2:	4453      	add	r3, sl
 8011bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8011bd6:	f898 3000 	ldrb.w	r3, [r8]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f000 80ba 	beq.w	8011d54 <_vfiprintf_r+0x1ec>
 8011be0:	2300      	movs	r3, #0
 8011be2:	f04f 32ff 	mov.w	r2, #4294967295
 8011be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bea:	9304      	str	r3, [sp, #16]
 8011bec:	9307      	str	r3, [sp, #28]
 8011bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8011bf4:	46a8      	mov	r8, r5
 8011bf6:	2205      	movs	r2, #5
 8011bf8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011bfc:	485e      	ldr	r0, [pc, #376]	; (8011d78 <_vfiprintf_r+0x210>)
 8011bfe:	f7ee fb6f 	bl	80002e0 <memchr>
 8011c02:	9b04      	ldr	r3, [sp, #16]
 8011c04:	bb78      	cbnz	r0, 8011c66 <_vfiprintf_r+0xfe>
 8011c06:	06d9      	lsls	r1, r3, #27
 8011c08:	bf44      	itt	mi
 8011c0a:	2220      	movmi	r2, #32
 8011c0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011c10:	071a      	lsls	r2, r3, #28
 8011c12:	bf44      	itt	mi
 8011c14:	222b      	movmi	r2, #43	; 0x2b
 8011c16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011c1a:	782a      	ldrb	r2, [r5, #0]
 8011c1c:	2a2a      	cmp	r2, #42	; 0x2a
 8011c1e:	d02a      	beq.n	8011c76 <_vfiprintf_r+0x10e>
 8011c20:	9a07      	ldr	r2, [sp, #28]
 8011c22:	46a8      	mov	r8, r5
 8011c24:	2000      	movs	r0, #0
 8011c26:	250a      	movs	r5, #10
 8011c28:	4641      	mov	r1, r8
 8011c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c2e:	3b30      	subs	r3, #48	; 0x30
 8011c30:	2b09      	cmp	r3, #9
 8011c32:	d969      	bls.n	8011d08 <_vfiprintf_r+0x1a0>
 8011c34:	b360      	cbz	r0, 8011c90 <_vfiprintf_r+0x128>
 8011c36:	e024      	b.n	8011c82 <_vfiprintf_r+0x11a>
 8011c38:	4b50      	ldr	r3, [pc, #320]	; (8011d7c <_vfiprintf_r+0x214>)
 8011c3a:	429c      	cmp	r4, r3
 8011c3c:	d101      	bne.n	8011c42 <_vfiprintf_r+0xda>
 8011c3e:	68b4      	ldr	r4, [r6, #8]
 8011c40:	e7a2      	b.n	8011b88 <_vfiprintf_r+0x20>
 8011c42:	4b4f      	ldr	r3, [pc, #316]	; (8011d80 <_vfiprintf_r+0x218>)
 8011c44:	429c      	cmp	r4, r3
 8011c46:	bf08      	it	eq
 8011c48:	68f4      	ldreq	r4, [r6, #12]
 8011c4a:	e79d      	b.n	8011b88 <_vfiprintf_r+0x20>
 8011c4c:	4621      	mov	r1, r4
 8011c4e:	4630      	mov	r0, r6
 8011c50:	f000 fae0 	bl	8012214 <__swsetup_r>
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d09d      	beq.n	8011b94 <_vfiprintf_r+0x2c>
 8011c58:	f04f 30ff 	mov.w	r0, #4294967295
 8011c5c:	b01d      	add	sp, #116	; 0x74
 8011c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c62:	46a8      	mov	r8, r5
 8011c64:	e7a2      	b.n	8011bac <_vfiprintf_r+0x44>
 8011c66:	4a44      	ldr	r2, [pc, #272]	; (8011d78 <_vfiprintf_r+0x210>)
 8011c68:	1a80      	subs	r0, r0, r2
 8011c6a:	fa0b f000 	lsl.w	r0, fp, r0
 8011c6e:	4318      	orrs	r0, r3
 8011c70:	9004      	str	r0, [sp, #16]
 8011c72:	4645      	mov	r5, r8
 8011c74:	e7be      	b.n	8011bf4 <_vfiprintf_r+0x8c>
 8011c76:	9a03      	ldr	r2, [sp, #12]
 8011c78:	1d11      	adds	r1, r2, #4
 8011c7a:	6812      	ldr	r2, [r2, #0]
 8011c7c:	9103      	str	r1, [sp, #12]
 8011c7e:	2a00      	cmp	r2, #0
 8011c80:	db01      	blt.n	8011c86 <_vfiprintf_r+0x11e>
 8011c82:	9207      	str	r2, [sp, #28]
 8011c84:	e004      	b.n	8011c90 <_vfiprintf_r+0x128>
 8011c86:	4252      	negs	r2, r2
 8011c88:	f043 0302 	orr.w	r3, r3, #2
 8011c8c:	9207      	str	r2, [sp, #28]
 8011c8e:	9304      	str	r3, [sp, #16]
 8011c90:	f898 3000 	ldrb.w	r3, [r8]
 8011c94:	2b2e      	cmp	r3, #46	; 0x2e
 8011c96:	d10e      	bne.n	8011cb6 <_vfiprintf_r+0x14e>
 8011c98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8011c9e:	d138      	bne.n	8011d12 <_vfiprintf_r+0x1aa>
 8011ca0:	9b03      	ldr	r3, [sp, #12]
 8011ca2:	1d1a      	adds	r2, r3, #4
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	9203      	str	r2, [sp, #12]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	bfb8      	it	lt
 8011cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8011cb0:	f108 0802 	add.w	r8, r8, #2
 8011cb4:	9305      	str	r3, [sp, #20]
 8011cb6:	4d33      	ldr	r5, [pc, #204]	; (8011d84 <_vfiprintf_r+0x21c>)
 8011cb8:	f898 1000 	ldrb.w	r1, [r8]
 8011cbc:	2203      	movs	r2, #3
 8011cbe:	4628      	mov	r0, r5
 8011cc0:	f7ee fb0e 	bl	80002e0 <memchr>
 8011cc4:	b140      	cbz	r0, 8011cd8 <_vfiprintf_r+0x170>
 8011cc6:	2340      	movs	r3, #64	; 0x40
 8011cc8:	1b40      	subs	r0, r0, r5
 8011cca:	fa03 f000 	lsl.w	r0, r3, r0
 8011cce:	9b04      	ldr	r3, [sp, #16]
 8011cd0:	4303      	orrs	r3, r0
 8011cd2:	f108 0801 	add.w	r8, r8, #1
 8011cd6:	9304      	str	r3, [sp, #16]
 8011cd8:	f898 1000 	ldrb.w	r1, [r8]
 8011cdc:	482a      	ldr	r0, [pc, #168]	; (8011d88 <_vfiprintf_r+0x220>)
 8011cde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ce2:	2206      	movs	r2, #6
 8011ce4:	f108 0701 	add.w	r7, r8, #1
 8011ce8:	f7ee fafa 	bl	80002e0 <memchr>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d037      	beq.n	8011d60 <_vfiprintf_r+0x1f8>
 8011cf0:	4b26      	ldr	r3, [pc, #152]	; (8011d8c <_vfiprintf_r+0x224>)
 8011cf2:	bb1b      	cbnz	r3, 8011d3c <_vfiprintf_r+0x1d4>
 8011cf4:	9b03      	ldr	r3, [sp, #12]
 8011cf6:	3307      	adds	r3, #7
 8011cf8:	f023 0307 	bic.w	r3, r3, #7
 8011cfc:	3308      	adds	r3, #8
 8011cfe:	9303      	str	r3, [sp, #12]
 8011d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d02:	444b      	add	r3, r9
 8011d04:	9309      	str	r3, [sp, #36]	; 0x24
 8011d06:	e750      	b.n	8011baa <_vfiprintf_r+0x42>
 8011d08:	fb05 3202 	mla	r2, r5, r2, r3
 8011d0c:	2001      	movs	r0, #1
 8011d0e:	4688      	mov	r8, r1
 8011d10:	e78a      	b.n	8011c28 <_vfiprintf_r+0xc0>
 8011d12:	2300      	movs	r3, #0
 8011d14:	f108 0801 	add.w	r8, r8, #1
 8011d18:	9305      	str	r3, [sp, #20]
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	250a      	movs	r5, #10
 8011d1e:	4640      	mov	r0, r8
 8011d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d24:	3a30      	subs	r2, #48	; 0x30
 8011d26:	2a09      	cmp	r2, #9
 8011d28:	d903      	bls.n	8011d32 <_vfiprintf_r+0x1ca>
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d0c3      	beq.n	8011cb6 <_vfiprintf_r+0x14e>
 8011d2e:	9105      	str	r1, [sp, #20]
 8011d30:	e7c1      	b.n	8011cb6 <_vfiprintf_r+0x14e>
 8011d32:	fb05 2101 	mla	r1, r5, r1, r2
 8011d36:	2301      	movs	r3, #1
 8011d38:	4680      	mov	r8, r0
 8011d3a:	e7f0      	b.n	8011d1e <_vfiprintf_r+0x1b6>
 8011d3c:	ab03      	add	r3, sp, #12
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	4622      	mov	r2, r4
 8011d42:	4b13      	ldr	r3, [pc, #76]	; (8011d90 <_vfiprintf_r+0x228>)
 8011d44:	a904      	add	r1, sp, #16
 8011d46:	4630      	mov	r0, r6
 8011d48:	f3af 8000 	nop.w
 8011d4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011d50:	4681      	mov	r9, r0
 8011d52:	d1d5      	bne.n	8011d00 <_vfiprintf_r+0x198>
 8011d54:	89a3      	ldrh	r3, [r4, #12]
 8011d56:	065b      	lsls	r3, r3, #25
 8011d58:	f53f af7e 	bmi.w	8011c58 <_vfiprintf_r+0xf0>
 8011d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d5e:	e77d      	b.n	8011c5c <_vfiprintf_r+0xf4>
 8011d60:	ab03      	add	r3, sp, #12
 8011d62:	9300      	str	r3, [sp, #0]
 8011d64:	4622      	mov	r2, r4
 8011d66:	4b0a      	ldr	r3, [pc, #40]	; (8011d90 <_vfiprintf_r+0x228>)
 8011d68:	a904      	add	r1, sp, #16
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	f000 f888 	bl	8011e80 <_printf_i>
 8011d70:	e7ec      	b.n	8011d4c <_vfiprintf_r+0x1e4>
 8011d72:	bf00      	nop
 8011d74:	0801510c 	.word	0x0801510c
 8011d78:	0801514c 	.word	0x0801514c
 8011d7c:	0801512c 	.word	0x0801512c
 8011d80:	080150ec 	.word	0x080150ec
 8011d84:	08015152 	.word	0x08015152
 8011d88:	08015156 	.word	0x08015156
 8011d8c:	00000000 	.word	0x00000000
 8011d90:	08011b43 	.word	0x08011b43

08011d94 <_printf_common>:
 8011d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d98:	4691      	mov	r9, r2
 8011d9a:	461f      	mov	r7, r3
 8011d9c:	688a      	ldr	r2, [r1, #8]
 8011d9e:	690b      	ldr	r3, [r1, #16]
 8011da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011da4:	4293      	cmp	r3, r2
 8011da6:	bfb8      	it	lt
 8011da8:	4613      	movlt	r3, r2
 8011daa:	f8c9 3000 	str.w	r3, [r9]
 8011dae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011db2:	4606      	mov	r6, r0
 8011db4:	460c      	mov	r4, r1
 8011db6:	b112      	cbz	r2, 8011dbe <_printf_common+0x2a>
 8011db8:	3301      	adds	r3, #1
 8011dba:	f8c9 3000 	str.w	r3, [r9]
 8011dbe:	6823      	ldr	r3, [r4, #0]
 8011dc0:	0699      	lsls	r1, r3, #26
 8011dc2:	bf42      	ittt	mi
 8011dc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011dc8:	3302      	addmi	r3, #2
 8011dca:	f8c9 3000 	strmi.w	r3, [r9]
 8011dce:	6825      	ldr	r5, [r4, #0]
 8011dd0:	f015 0506 	ands.w	r5, r5, #6
 8011dd4:	d107      	bne.n	8011de6 <_printf_common+0x52>
 8011dd6:	f104 0a19 	add.w	sl, r4, #25
 8011dda:	68e3      	ldr	r3, [r4, #12]
 8011ddc:	f8d9 2000 	ldr.w	r2, [r9]
 8011de0:	1a9b      	subs	r3, r3, r2
 8011de2:	42ab      	cmp	r3, r5
 8011de4:	dc28      	bgt.n	8011e38 <_printf_common+0xa4>
 8011de6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011dea:	6822      	ldr	r2, [r4, #0]
 8011dec:	3300      	adds	r3, #0
 8011dee:	bf18      	it	ne
 8011df0:	2301      	movne	r3, #1
 8011df2:	0692      	lsls	r2, r2, #26
 8011df4:	d42d      	bmi.n	8011e52 <_printf_common+0xbe>
 8011df6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	47c0      	blx	r8
 8011e00:	3001      	adds	r0, #1
 8011e02:	d020      	beq.n	8011e46 <_printf_common+0xb2>
 8011e04:	6823      	ldr	r3, [r4, #0]
 8011e06:	68e5      	ldr	r5, [r4, #12]
 8011e08:	f8d9 2000 	ldr.w	r2, [r9]
 8011e0c:	f003 0306 	and.w	r3, r3, #6
 8011e10:	2b04      	cmp	r3, #4
 8011e12:	bf08      	it	eq
 8011e14:	1aad      	subeq	r5, r5, r2
 8011e16:	68a3      	ldr	r3, [r4, #8]
 8011e18:	6922      	ldr	r2, [r4, #16]
 8011e1a:	bf0c      	ite	eq
 8011e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e20:	2500      	movne	r5, #0
 8011e22:	4293      	cmp	r3, r2
 8011e24:	bfc4      	itt	gt
 8011e26:	1a9b      	subgt	r3, r3, r2
 8011e28:	18ed      	addgt	r5, r5, r3
 8011e2a:	f04f 0900 	mov.w	r9, #0
 8011e2e:	341a      	adds	r4, #26
 8011e30:	454d      	cmp	r5, r9
 8011e32:	d11a      	bne.n	8011e6a <_printf_common+0xd6>
 8011e34:	2000      	movs	r0, #0
 8011e36:	e008      	b.n	8011e4a <_printf_common+0xb6>
 8011e38:	2301      	movs	r3, #1
 8011e3a:	4652      	mov	r2, sl
 8011e3c:	4639      	mov	r1, r7
 8011e3e:	4630      	mov	r0, r6
 8011e40:	47c0      	blx	r8
 8011e42:	3001      	adds	r0, #1
 8011e44:	d103      	bne.n	8011e4e <_printf_common+0xba>
 8011e46:	f04f 30ff 	mov.w	r0, #4294967295
 8011e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e4e:	3501      	adds	r5, #1
 8011e50:	e7c3      	b.n	8011dda <_printf_common+0x46>
 8011e52:	18e1      	adds	r1, r4, r3
 8011e54:	1c5a      	adds	r2, r3, #1
 8011e56:	2030      	movs	r0, #48	; 0x30
 8011e58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e5c:	4422      	add	r2, r4
 8011e5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e66:	3302      	adds	r3, #2
 8011e68:	e7c5      	b.n	8011df6 <_printf_common+0x62>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	4622      	mov	r2, r4
 8011e6e:	4639      	mov	r1, r7
 8011e70:	4630      	mov	r0, r6
 8011e72:	47c0      	blx	r8
 8011e74:	3001      	adds	r0, #1
 8011e76:	d0e6      	beq.n	8011e46 <_printf_common+0xb2>
 8011e78:	f109 0901 	add.w	r9, r9, #1
 8011e7c:	e7d8      	b.n	8011e30 <_printf_common+0x9c>
	...

08011e80 <_printf_i>:
 8011e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011e88:	460c      	mov	r4, r1
 8011e8a:	7e09      	ldrb	r1, [r1, #24]
 8011e8c:	b085      	sub	sp, #20
 8011e8e:	296e      	cmp	r1, #110	; 0x6e
 8011e90:	4617      	mov	r7, r2
 8011e92:	4606      	mov	r6, r0
 8011e94:	4698      	mov	r8, r3
 8011e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e98:	f000 80b3 	beq.w	8012002 <_printf_i+0x182>
 8011e9c:	d822      	bhi.n	8011ee4 <_printf_i+0x64>
 8011e9e:	2963      	cmp	r1, #99	; 0x63
 8011ea0:	d036      	beq.n	8011f10 <_printf_i+0x90>
 8011ea2:	d80a      	bhi.n	8011eba <_printf_i+0x3a>
 8011ea4:	2900      	cmp	r1, #0
 8011ea6:	f000 80b9 	beq.w	801201c <_printf_i+0x19c>
 8011eaa:	2958      	cmp	r1, #88	; 0x58
 8011eac:	f000 8083 	beq.w	8011fb6 <_printf_i+0x136>
 8011eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011eb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011eb8:	e032      	b.n	8011f20 <_printf_i+0xa0>
 8011eba:	2964      	cmp	r1, #100	; 0x64
 8011ebc:	d001      	beq.n	8011ec2 <_printf_i+0x42>
 8011ebe:	2969      	cmp	r1, #105	; 0x69
 8011ec0:	d1f6      	bne.n	8011eb0 <_printf_i+0x30>
 8011ec2:	6820      	ldr	r0, [r4, #0]
 8011ec4:	6813      	ldr	r3, [r2, #0]
 8011ec6:	0605      	lsls	r5, r0, #24
 8011ec8:	f103 0104 	add.w	r1, r3, #4
 8011ecc:	d52a      	bpl.n	8011f24 <_printf_i+0xa4>
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	6011      	str	r1, [r2, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	da03      	bge.n	8011ede <_printf_i+0x5e>
 8011ed6:	222d      	movs	r2, #45	; 0x2d
 8011ed8:	425b      	negs	r3, r3
 8011eda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011ede:	486f      	ldr	r0, [pc, #444]	; (801209c <_printf_i+0x21c>)
 8011ee0:	220a      	movs	r2, #10
 8011ee2:	e039      	b.n	8011f58 <_printf_i+0xd8>
 8011ee4:	2973      	cmp	r1, #115	; 0x73
 8011ee6:	f000 809d 	beq.w	8012024 <_printf_i+0x1a4>
 8011eea:	d808      	bhi.n	8011efe <_printf_i+0x7e>
 8011eec:	296f      	cmp	r1, #111	; 0x6f
 8011eee:	d020      	beq.n	8011f32 <_printf_i+0xb2>
 8011ef0:	2970      	cmp	r1, #112	; 0x70
 8011ef2:	d1dd      	bne.n	8011eb0 <_printf_i+0x30>
 8011ef4:	6823      	ldr	r3, [r4, #0]
 8011ef6:	f043 0320 	orr.w	r3, r3, #32
 8011efa:	6023      	str	r3, [r4, #0]
 8011efc:	e003      	b.n	8011f06 <_printf_i+0x86>
 8011efe:	2975      	cmp	r1, #117	; 0x75
 8011f00:	d017      	beq.n	8011f32 <_printf_i+0xb2>
 8011f02:	2978      	cmp	r1, #120	; 0x78
 8011f04:	d1d4      	bne.n	8011eb0 <_printf_i+0x30>
 8011f06:	2378      	movs	r3, #120	; 0x78
 8011f08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f0c:	4864      	ldr	r0, [pc, #400]	; (80120a0 <_printf_i+0x220>)
 8011f0e:	e055      	b.n	8011fbc <_printf_i+0x13c>
 8011f10:	6813      	ldr	r3, [r2, #0]
 8011f12:	1d19      	adds	r1, r3, #4
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	6011      	str	r1, [r2, #0]
 8011f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f20:	2301      	movs	r3, #1
 8011f22:	e08c      	b.n	801203e <_printf_i+0x1be>
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	6011      	str	r1, [r2, #0]
 8011f28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f2c:	bf18      	it	ne
 8011f2e:	b21b      	sxthne	r3, r3
 8011f30:	e7cf      	b.n	8011ed2 <_printf_i+0x52>
 8011f32:	6813      	ldr	r3, [r2, #0]
 8011f34:	6825      	ldr	r5, [r4, #0]
 8011f36:	1d18      	adds	r0, r3, #4
 8011f38:	6010      	str	r0, [r2, #0]
 8011f3a:	0628      	lsls	r0, r5, #24
 8011f3c:	d501      	bpl.n	8011f42 <_printf_i+0xc2>
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	e002      	b.n	8011f48 <_printf_i+0xc8>
 8011f42:	0668      	lsls	r0, r5, #25
 8011f44:	d5fb      	bpl.n	8011f3e <_printf_i+0xbe>
 8011f46:	881b      	ldrh	r3, [r3, #0]
 8011f48:	4854      	ldr	r0, [pc, #336]	; (801209c <_printf_i+0x21c>)
 8011f4a:	296f      	cmp	r1, #111	; 0x6f
 8011f4c:	bf14      	ite	ne
 8011f4e:	220a      	movne	r2, #10
 8011f50:	2208      	moveq	r2, #8
 8011f52:	2100      	movs	r1, #0
 8011f54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f58:	6865      	ldr	r5, [r4, #4]
 8011f5a:	60a5      	str	r5, [r4, #8]
 8011f5c:	2d00      	cmp	r5, #0
 8011f5e:	f2c0 8095 	blt.w	801208c <_printf_i+0x20c>
 8011f62:	6821      	ldr	r1, [r4, #0]
 8011f64:	f021 0104 	bic.w	r1, r1, #4
 8011f68:	6021      	str	r1, [r4, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d13d      	bne.n	8011fea <_printf_i+0x16a>
 8011f6e:	2d00      	cmp	r5, #0
 8011f70:	f040 808e 	bne.w	8012090 <_printf_i+0x210>
 8011f74:	4665      	mov	r5, ip
 8011f76:	2a08      	cmp	r2, #8
 8011f78:	d10b      	bne.n	8011f92 <_printf_i+0x112>
 8011f7a:	6823      	ldr	r3, [r4, #0]
 8011f7c:	07db      	lsls	r3, r3, #31
 8011f7e:	d508      	bpl.n	8011f92 <_printf_i+0x112>
 8011f80:	6923      	ldr	r3, [r4, #16]
 8011f82:	6862      	ldr	r2, [r4, #4]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	bfde      	ittt	le
 8011f88:	2330      	movle	r3, #48	; 0x30
 8011f8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011f8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011f92:	ebac 0305 	sub.w	r3, ip, r5
 8011f96:	6123      	str	r3, [r4, #16]
 8011f98:	f8cd 8000 	str.w	r8, [sp]
 8011f9c:	463b      	mov	r3, r7
 8011f9e:	aa03      	add	r2, sp, #12
 8011fa0:	4621      	mov	r1, r4
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	f7ff fef6 	bl	8011d94 <_printf_common>
 8011fa8:	3001      	adds	r0, #1
 8011faa:	d14d      	bne.n	8012048 <_printf_i+0x1c8>
 8011fac:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb0:	b005      	add	sp, #20
 8011fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fb6:	4839      	ldr	r0, [pc, #228]	; (801209c <_printf_i+0x21c>)
 8011fb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011fbc:	6813      	ldr	r3, [r2, #0]
 8011fbe:	6821      	ldr	r1, [r4, #0]
 8011fc0:	1d1d      	adds	r5, r3, #4
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	6015      	str	r5, [r2, #0]
 8011fc6:	060a      	lsls	r2, r1, #24
 8011fc8:	d50b      	bpl.n	8011fe2 <_printf_i+0x162>
 8011fca:	07ca      	lsls	r2, r1, #31
 8011fcc:	bf44      	itt	mi
 8011fce:	f041 0120 	orrmi.w	r1, r1, #32
 8011fd2:	6021      	strmi	r1, [r4, #0]
 8011fd4:	b91b      	cbnz	r3, 8011fde <_printf_i+0x15e>
 8011fd6:	6822      	ldr	r2, [r4, #0]
 8011fd8:	f022 0220 	bic.w	r2, r2, #32
 8011fdc:	6022      	str	r2, [r4, #0]
 8011fde:	2210      	movs	r2, #16
 8011fe0:	e7b7      	b.n	8011f52 <_printf_i+0xd2>
 8011fe2:	064d      	lsls	r5, r1, #25
 8011fe4:	bf48      	it	mi
 8011fe6:	b29b      	uxthmi	r3, r3
 8011fe8:	e7ef      	b.n	8011fca <_printf_i+0x14a>
 8011fea:	4665      	mov	r5, ip
 8011fec:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ff0:	fb02 3311 	mls	r3, r2, r1, r3
 8011ff4:	5cc3      	ldrb	r3, [r0, r3]
 8011ff6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011ffa:	460b      	mov	r3, r1
 8011ffc:	2900      	cmp	r1, #0
 8011ffe:	d1f5      	bne.n	8011fec <_printf_i+0x16c>
 8012000:	e7b9      	b.n	8011f76 <_printf_i+0xf6>
 8012002:	6813      	ldr	r3, [r2, #0]
 8012004:	6825      	ldr	r5, [r4, #0]
 8012006:	6961      	ldr	r1, [r4, #20]
 8012008:	1d18      	adds	r0, r3, #4
 801200a:	6010      	str	r0, [r2, #0]
 801200c:	0628      	lsls	r0, r5, #24
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	d501      	bpl.n	8012016 <_printf_i+0x196>
 8012012:	6019      	str	r1, [r3, #0]
 8012014:	e002      	b.n	801201c <_printf_i+0x19c>
 8012016:	066a      	lsls	r2, r5, #25
 8012018:	d5fb      	bpl.n	8012012 <_printf_i+0x192>
 801201a:	8019      	strh	r1, [r3, #0]
 801201c:	2300      	movs	r3, #0
 801201e:	6123      	str	r3, [r4, #16]
 8012020:	4665      	mov	r5, ip
 8012022:	e7b9      	b.n	8011f98 <_printf_i+0x118>
 8012024:	6813      	ldr	r3, [r2, #0]
 8012026:	1d19      	adds	r1, r3, #4
 8012028:	6011      	str	r1, [r2, #0]
 801202a:	681d      	ldr	r5, [r3, #0]
 801202c:	6862      	ldr	r2, [r4, #4]
 801202e:	2100      	movs	r1, #0
 8012030:	4628      	mov	r0, r5
 8012032:	f7ee f955 	bl	80002e0 <memchr>
 8012036:	b108      	cbz	r0, 801203c <_printf_i+0x1bc>
 8012038:	1b40      	subs	r0, r0, r5
 801203a:	6060      	str	r0, [r4, #4]
 801203c:	6863      	ldr	r3, [r4, #4]
 801203e:	6123      	str	r3, [r4, #16]
 8012040:	2300      	movs	r3, #0
 8012042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012046:	e7a7      	b.n	8011f98 <_printf_i+0x118>
 8012048:	6923      	ldr	r3, [r4, #16]
 801204a:	462a      	mov	r2, r5
 801204c:	4639      	mov	r1, r7
 801204e:	4630      	mov	r0, r6
 8012050:	47c0      	blx	r8
 8012052:	3001      	adds	r0, #1
 8012054:	d0aa      	beq.n	8011fac <_printf_i+0x12c>
 8012056:	6823      	ldr	r3, [r4, #0]
 8012058:	079b      	lsls	r3, r3, #30
 801205a:	d413      	bmi.n	8012084 <_printf_i+0x204>
 801205c:	68e0      	ldr	r0, [r4, #12]
 801205e:	9b03      	ldr	r3, [sp, #12]
 8012060:	4298      	cmp	r0, r3
 8012062:	bfb8      	it	lt
 8012064:	4618      	movlt	r0, r3
 8012066:	e7a3      	b.n	8011fb0 <_printf_i+0x130>
 8012068:	2301      	movs	r3, #1
 801206a:	464a      	mov	r2, r9
 801206c:	4639      	mov	r1, r7
 801206e:	4630      	mov	r0, r6
 8012070:	47c0      	blx	r8
 8012072:	3001      	adds	r0, #1
 8012074:	d09a      	beq.n	8011fac <_printf_i+0x12c>
 8012076:	3501      	adds	r5, #1
 8012078:	68e3      	ldr	r3, [r4, #12]
 801207a:	9a03      	ldr	r2, [sp, #12]
 801207c:	1a9b      	subs	r3, r3, r2
 801207e:	42ab      	cmp	r3, r5
 8012080:	dcf2      	bgt.n	8012068 <_printf_i+0x1e8>
 8012082:	e7eb      	b.n	801205c <_printf_i+0x1dc>
 8012084:	2500      	movs	r5, #0
 8012086:	f104 0919 	add.w	r9, r4, #25
 801208a:	e7f5      	b.n	8012078 <_printf_i+0x1f8>
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1ac      	bne.n	8011fea <_printf_i+0x16a>
 8012090:	7803      	ldrb	r3, [r0, #0]
 8012092:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012096:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801209a:	e76c      	b.n	8011f76 <_printf_i+0xf6>
 801209c:	0801515d 	.word	0x0801515d
 80120a0:	0801516e 	.word	0x0801516e

080120a4 <_sbrk_r>:
 80120a4:	b538      	push	{r3, r4, r5, lr}
 80120a6:	4c06      	ldr	r4, [pc, #24]	; (80120c0 <_sbrk_r+0x1c>)
 80120a8:	2300      	movs	r3, #0
 80120aa:	4605      	mov	r5, r0
 80120ac:	4608      	mov	r0, r1
 80120ae:	6023      	str	r3, [r4, #0]
 80120b0:	f7ee ff1a 	bl	8000ee8 <_sbrk>
 80120b4:	1c43      	adds	r3, r0, #1
 80120b6:	d102      	bne.n	80120be <_sbrk_r+0x1a>
 80120b8:	6823      	ldr	r3, [r4, #0]
 80120ba:	b103      	cbz	r3, 80120be <_sbrk_r+0x1a>
 80120bc:	602b      	str	r3, [r5, #0]
 80120be:	bd38      	pop	{r3, r4, r5, pc}
 80120c0:	24004c80 	.word	0x24004c80

080120c4 <__sread>:
 80120c4:	b510      	push	{r4, lr}
 80120c6:	460c      	mov	r4, r1
 80120c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120cc:	f000 fa48 	bl	8012560 <_read_r>
 80120d0:	2800      	cmp	r0, #0
 80120d2:	bfab      	itete	ge
 80120d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80120d6:	89a3      	ldrhlt	r3, [r4, #12]
 80120d8:	181b      	addge	r3, r3, r0
 80120da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80120de:	bfac      	ite	ge
 80120e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80120e2:	81a3      	strhlt	r3, [r4, #12]
 80120e4:	bd10      	pop	{r4, pc}

080120e6 <__swrite>:
 80120e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ea:	461f      	mov	r7, r3
 80120ec:	898b      	ldrh	r3, [r1, #12]
 80120ee:	05db      	lsls	r3, r3, #23
 80120f0:	4605      	mov	r5, r0
 80120f2:	460c      	mov	r4, r1
 80120f4:	4616      	mov	r6, r2
 80120f6:	d505      	bpl.n	8012104 <__swrite+0x1e>
 80120f8:	2302      	movs	r3, #2
 80120fa:	2200      	movs	r2, #0
 80120fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012100:	f000 f9b6 	bl	8012470 <_lseek_r>
 8012104:	89a3      	ldrh	r3, [r4, #12]
 8012106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801210a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801210e:	81a3      	strh	r3, [r4, #12]
 8012110:	4632      	mov	r2, r6
 8012112:	463b      	mov	r3, r7
 8012114:	4628      	mov	r0, r5
 8012116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801211a:	f000 b869 	b.w	80121f0 <_write_r>

0801211e <__sseek>:
 801211e:	b510      	push	{r4, lr}
 8012120:	460c      	mov	r4, r1
 8012122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012126:	f000 f9a3 	bl	8012470 <_lseek_r>
 801212a:	1c43      	adds	r3, r0, #1
 801212c:	89a3      	ldrh	r3, [r4, #12]
 801212e:	bf15      	itete	ne
 8012130:	6560      	strne	r0, [r4, #84]	; 0x54
 8012132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801213a:	81a3      	strheq	r3, [r4, #12]
 801213c:	bf18      	it	ne
 801213e:	81a3      	strhne	r3, [r4, #12]
 8012140:	bd10      	pop	{r4, pc}

08012142 <__sclose>:
 8012142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012146:	f000 b8d3 	b.w	80122f0 <_close_r>
	...

0801214c <__swbuf_r>:
 801214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801214e:	460e      	mov	r6, r1
 8012150:	4614      	mov	r4, r2
 8012152:	4605      	mov	r5, r0
 8012154:	b118      	cbz	r0, 801215e <__swbuf_r+0x12>
 8012156:	6983      	ldr	r3, [r0, #24]
 8012158:	b90b      	cbnz	r3, 801215e <__swbuf_r+0x12>
 801215a:	f7ff fba1 	bl	80118a0 <__sinit>
 801215e:	4b21      	ldr	r3, [pc, #132]	; (80121e4 <__swbuf_r+0x98>)
 8012160:	429c      	cmp	r4, r3
 8012162:	d12a      	bne.n	80121ba <__swbuf_r+0x6e>
 8012164:	686c      	ldr	r4, [r5, #4]
 8012166:	69a3      	ldr	r3, [r4, #24]
 8012168:	60a3      	str	r3, [r4, #8]
 801216a:	89a3      	ldrh	r3, [r4, #12]
 801216c:	071a      	lsls	r2, r3, #28
 801216e:	d52e      	bpl.n	80121ce <__swbuf_r+0x82>
 8012170:	6923      	ldr	r3, [r4, #16]
 8012172:	b363      	cbz	r3, 80121ce <__swbuf_r+0x82>
 8012174:	6923      	ldr	r3, [r4, #16]
 8012176:	6820      	ldr	r0, [r4, #0]
 8012178:	1ac0      	subs	r0, r0, r3
 801217a:	6963      	ldr	r3, [r4, #20]
 801217c:	b2f6      	uxtb	r6, r6
 801217e:	4283      	cmp	r3, r0
 8012180:	4637      	mov	r7, r6
 8012182:	dc04      	bgt.n	801218e <__swbuf_r+0x42>
 8012184:	4621      	mov	r1, r4
 8012186:	4628      	mov	r0, r5
 8012188:	f000 f948 	bl	801241c <_fflush_r>
 801218c:	bb28      	cbnz	r0, 80121da <__swbuf_r+0x8e>
 801218e:	68a3      	ldr	r3, [r4, #8]
 8012190:	3b01      	subs	r3, #1
 8012192:	60a3      	str	r3, [r4, #8]
 8012194:	6823      	ldr	r3, [r4, #0]
 8012196:	1c5a      	adds	r2, r3, #1
 8012198:	6022      	str	r2, [r4, #0]
 801219a:	701e      	strb	r6, [r3, #0]
 801219c:	6963      	ldr	r3, [r4, #20]
 801219e:	3001      	adds	r0, #1
 80121a0:	4283      	cmp	r3, r0
 80121a2:	d004      	beq.n	80121ae <__swbuf_r+0x62>
 80121a4:	89a3      	ldrh	r3, [r4, #12]
 80121a6:	07db      	lsls	r3, r3, #31
 80121a8:	d519      	bpl.n	80121de <__swbuf_r+0x92>
 80121aa:	2e0a      	cmp	r6, #10
 80121ac:	d117      	bne.n	80121de <__swbuf_r+0x92>
 80121ae:	4621      	mov	r1, r4
 80121b0:	4628      	mov	r0, r5
 80121b2:	f000 f933 	bl	801241c <_fflush_r>
 80121b6:	b190      	cbz	r0, 80121de <__swbuf_r+0x92>
 80121b8:	e00f      	b.n	80121da <__swbuf_r+0x8e>
 80121ba:	4b0b      	ldr	r3, [pc, #44]	; (80121e8 <__swbuf_r+0x9c>)
 80121bc:	429c      	cmp	r4, r3
 80121be:	d101      	bne.n	80121c4 <__swbuf_r+0x78>
 80121c0:	68ac      	ldr	r4, [r5, #8]
 80121c2:	e7d0      	b.n	8012166 <__swbuf_r+0x1a>
 80121c4:	4b09      	ldr	r3, [pc, #36]	; (80121ec <__swbuf_r+0xa0>)
 80121c6:	429c      	cmp	r4, r3
 80121c8:	bf08      	it	eq
 80121ca:	68ec      	ldreq	r4, [r5, #12]
 80121cc:	e7cb      	b.n	8012166 <__swbuf_r+0x1a>
 80121ce:	4621      	mov	r1, r4
 80121d0:	4628      	mov	r0, r5
 80121d2:	f000 f81f 	bl	8012214 <__swsetup_r>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d0cc      	beq.n	8012174 <__swbuf_r+0x28>
 80121da:	f04f 37ff 	mov.w	r7, #4294967295
 80121de:	4638      	mov	r0, r7
 80121e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121e2:	bf00      	nop
 80121e4:	0801510c 	.word	0x0801510c
 80121e8:	0801512c 	.word	0x0801512c
 80121ec:	080150ec 	.word	0x080150ec

080121f0 <_write_r>:
 80121f0:	b538      	push	{r3, r4, r5, lr}
 80121f2:	4c07      	ldr	r4, [pc, #28]	; (8012210 <_write_r+0x20>)
 80121f4:	4605      	mov	r5, r0
 80121f6:	4608      	mov	r0, r1
 80121f8:	4611      	mov	r1, r2
 80121fa:	2200      	movs	r2, #0
 80121fc:	6022      	str	r2, [r4, #0]
 80121fe:	461a      	mov	r2, r3
 8012200:	f7ee fe21 	bl	8000e46 <_write>
 8012204:	1c43      	adds	r3, r0, #1
 8012206:	d102      	bne.n	801220e <_write_r+0x1e>
 8012208:	6823      	ldr	r3, [r4, #0]
 801220a:	b103      	cbz	r3, 801220e <_write_r+0x1e>
 801220c:	602b      	str	r3, [r5, #0]
 801220e:	bd38      	pop	{r3, r4, r5, pc}
 8012210:	24004c80 	.word	0x24004c80

08012214 <__swsetup_r>:
 8012214:	4b32      	ldr	r3, [pc, #200]	; (80122e0 <__swsetup_r+0xcc>)
 8012216:	b570      	push	{r4, r5, r6, lr}
 8012218:	681d      	ldr	r5, [r3, #0]
 801221a:	4606      	mov	r6, r0
 801221c:	460c      	mov	r4, r1
 801221e:	b125      	cbz	r5, 801222a <__swsetup_r+0x16>
 8012220:	69ab      	ldr	r3, [r5, #24]
 8012222:	b913      	cbnz	r3, 801222a <__swsetup_r+0x16>
 8012224:	4628      	mov	r0, r5
 8012226:	f7ff fb3b 	bl	80118a0 <__sinit>
 801222a:	4b2e      	ldr	r3, [pc, #184]	; (80122e4 <__swsetup_r+0xd0>)
 801222c:	429c      	cmp	r4, r3
 801222e:	d10f      	bne.n	8012250 <__swsetup_r+0x3c>
 8012230:	686c      	ldr	r4, [r5, #4]
 8012232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012236:	b29a      	uxth	r2, r3
 8012238:	0715      	lsls	r5, r2, #28
 801223a:	d42c      	bmi.n	8012296 <__swsetup_r+0x82>
 801223c:	06d0      	lsls	r0, r2, #27
 801223e:	d411      	bmi.n	8012264 <__swsetup_r+0x50>
 8012240:	2209      	movs	r2, #9
 8012242:	6032      	str	r2, [r6, #0]
 8012244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012248:	81a3      	strh	r3, [r4, #12]
 801224a:	f04f 30ff 	mov.w	r0, #4294967295
 801224e:	e03e      	b.n	80122ce <__swsetup_r+0xba>
 8012250:	4b25      	ldr	r3, [pc, #148]	; (80122e8 <__swsetup_r+0xd4>)
 8012252:	429c      	cmp	r4, r3
 8012254:	d101      	bne.n	801225a <__swsetup_r+0x46>
 8012256:	68ac      	ldr	r4, [r5, #8]
 8012258:	e7eb      	b.n	8012232 <__swsetup_r+0x1e>
 801225a:	4b24      	ldr	r3, [pc, #144]	; (80122ec <__swsetup_r+0xd8>)
 801225c:	429c      	cmp	r4, r3
 801225e:	bf08      	it	eq
 8012260:	68ec      	ldreq	r4, [r5, #12]
 8012262:	e7e6      	b.n	8012232 <__swsetup_r+0x1e>
 8012264:	0751      	lsls	r1, r2, #29
 8012266:	d512      	bpl.n	801228e <__swsetup_r+0x7a>
 8012268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801226a:	b141      	cbz	r1, 801227e <__swsetup_r+0x6a>
 801226c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012270:	4299      	cmp	r1, r3
 8012272:	d002      	beq.n	801227a <__swsetup_r+0x66>
 8012274:	4630      	mov	r0, r6
 8012276:	f7ff fba5 	bl	80119c4 <_free_r>
 801227a:	2300      	movs	r3, #0
 801227c:	6363      	str	r3, [r4, #52]	; 0x34
 801227e:	89a3      	ldrh	r3, [r4, #12]
 8012280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012284:	81a3      	strh	r3, [r4, #12]
 8012286:	2300      	movs	r3, #0
 8012288:	6063      	str	r3, [r4, #4]
 801228a:	6923      	ldr	r3, [r4, #16]
 801228c:	6023      	str	r3, [r4, #0]
 801228e:	89a3      	ldrh	r3, [r4, #12]
 8012290:	f043 0308 	orr.w	r3, r3, #8
 8012294:	81a3      	strh	r3, [r4, #12]
 8012296:	6923      	ldr	r3, [r4, #16]
 8012298:	b94b      	cbnz	r3, 80122ae <__swsetup_r+0x9a>
 801229a:	89a3      	ldrh	r3, [r4, #12]
 801229c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80122a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122a4:	d003      	beq.n	80122ae <__swsetup_r+0x9a>
 80122a6:	4621      	mov	r1, r4
 80122a8:	4630      	mov	r0, r6
 80122aa:	f000 f917 	bl	80124dc <__smakebuf_r>
 80122ae:	89a2      	ldrh	r2, [r4, #12]
 80122b0:	f012 0301 	ands.w	r3, r2, #1
 80122b4:	d00c      	beq.n	80122d0 <__swsetup_r+0xbc>
 80122b6:	2300      	movs	r3, #0
 80122b8:	60a3      	str	r3, [r4, #8]
 80122ba:	6963      	ldr	r3, [r4, #20]
 80122bc:	425b      	negs	r3, r3
 80122be:	61a3      	str	r3, [r4, #24]
 80122c0:	6923      	ldr	r3, [r4, #16]
 80122c2:	b953      	cbnz	r3, 80122da <__swsetup_r+0xc6>
 80122c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80122cc:	d1ba      	bne.n	8012244 <__swsetup_r+0x30>
 80122ce:	bd70      	pop	{r4, r5, r6, pc}
 80122d0:	0792      	lsls	r2, r2, #30
 80122d2:	bf58      	it	pl
 80122d4:	6963      	ldrpl	r3, [r4, #20]
 80122d6:	60a3      	str	r3, [r4, #8]
 80122d8:	e7f2      	b.n	80122c0 <__swsetup_r+0xac>
 80122da:	2000      	movs	r0, #0
 80122dc:	e7f7      	b.n	80122ce <__swsetup_r+0xba>
 80122de:	bf00      	nop
 80122e0:	24000030 	.word	0x24000030
 80122e4:	0801510c 	.word	0x0801510c
 80122e8:	0801512c 	.word	0x0801512c
 80122ec:	080150ec 	.word	0x080150ec

080122f0 <_close_r>:
 80122f0:	b538      	push	{r3, r4, r5, lr}
 80122f2:	4c06      	ldr	r4, [pc, #24]	; (801230c <_close_r+0x1c>)
 80122f4:	2300      	movs	r3, #0
 80122f6:	4605      	mov	r5, r0
 80122f8:	4608      	mov	r0, r1
 80122fa:	6023      	str	r3, [r4, #0]
 80122fc:	f7ee fdbf 	bl	8000e7e <_close>
 8012300:	1c43      	adds	r3, r0, #1
 8012302:	d102      	bne.n	801230a <_close_r+0x1a>
 8012304:	6823      	ldr	r3, [r4, #0]
 8012306:	b103      	cbz	r3, 801230a <_close_r+0x1a>
 8012308:	602b      	str	r3, [r5, #0]
 801230a:	bd38      	pop	{r3, r4, r5, pc}
 801230c:	24004c80 	.word	0x24004c80

08012310 <__sflush_r>:
 8012310:	898a      	ldrh	r2, [r1, #12]
 8012312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012316:	4605      	mov	r5, r0
 8012318:	0710      	lsls	r0, r2, #28
 801231a:	460c      	mov	r4, r1
 801231c:	d458      	bmi.n	80123d0 <__sflush_r+0xc0>
 801231e:	684b      	ldr	r3, [r1, #4]
 8012320:	2b00      	cmp	r3, #0
 8012322:	dc05      	bgt.n	8012330 <__sflush_r+0x20>
 8012324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012326:	2b00      	cmp	r3, #0
 8012328:	dc02      	bgt.n	8012330 <__sflush_r+0x20>
 801232a:	2000      	movs	r0, #0
 801232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012332:	2e00      	cmp	r6, #0
 8012334:	d0f9      	beq.n	801232a <__sflush_r+0x1a>
 8012336:	2300      	movs	r3, #0
 8012338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801233c:	682f      	ldr	r7, [r5, #0]
 801233e:	6a21      	ldr	r1, [r4, #32]
 8012340:	602b      	str	r3, [r5, #0]
 8012342:	d032      	beq.n	80123aa <__sflush_r+0x9a>
 8012344:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012346:	89a3      	ldrh	r3, [r4, #12]
 8012348:	075a      	lsls	r2, r3, #29
 801234a:	d505      	bpl.n	8012358 <__sflush_r+0x48>
 801234c:	6863      	ldr	r3, [r4, #4]
 801234e:	1ac0      	subs	r0, r0, r3
 8012350:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012352:	b10b      	cbz	r3, 8012358 <__sflush_r+0x48>
 8012354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012356:	1ac0      	subs	r0, r0, r3
 8012358:	2300      	movs	r3, #0
 801235a:	4602      	mov	r2, r0
 801235c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801235e:	6a21      	ldr	r1, [r4, #32]
 8012360:	4628      	mov	r0, r5
 8012362:	47b0      	blx	r6
 8012364:	1c43      	adds	r3, r0, #1
 8012366:	89a3      	ldrh	r3, [r4, #12]
 8012368:	d106      	bne.n	8012378 <__sflush_r+0x68>
 801236a:	6829      	ldr	r1, [r5, #0]
 801236c:	291d      	cmp	r1, #29
 801236e:	d848      	bhi.n	8012402 <__sflush_r+0xf2>
 8012370:	4a29      	ldr	r2, [pc, #164]	; (8012418 <__sflush_r+0x108>)
 8012372:	40ca      	lsrs	r2, r1
 8012374:	07d6      	lsls	r6, r2, #31
 8012376:	d544      	bpl.n	8012402 <__sflush_r+0xf2>
 8012378:	2200      	movs	r2, #0
 801237a:	6062      	str	r2, [r4, #4]
 801237c:	04d9      	lsls	r1, r3, #19
 801237e:	6922      	ldr	r2, [r4, #16]
 8012380:	6022      	str	r2, [r4, #0]
 8012382:	d504      	bpl.n	801238e <__sflush_r+0x7e>
 8012384:	1c42      	adds	r2, r0, #1
 8012386:	d101      	bne.n	801238c <__sflush_r+0x7c>
 8012388:	682b      	ldr	r3, [r5, #0]
 801238a:	b903      	cbnz	r3, 801238e <__sflush_r+0x7e>
 801238c:	6560      	str	r0, [r4, #84]	; 0x54
 801238e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012390:	602f      	str	r7, [r5, #0]
 8012392:	2900      	cmp	r1, #0
 8012394:	d0c9      	beq.n	801232a <__sflush_r+0x1a>
 8012396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801239a:	4299      	cmp	r1, r3
 801239c:	d002      	beq.n	80123a4 <__sflush_r+0x94>
 801239e:	4628      	mov	r0, r5
 80123a0:	f7ff fb10 	bl	80119c4 <_free_r>
 80123a4:	2000      	movs	r0, #0
 80123a6:	6360      	str	r0, [r4, #52]	; 0x34
 80123a8:	e7c0      	b.n	801232c <__sflush_r+0x1c>
 80123aa:	2301      	movs	r3, #1
 80123ac:	4628      	mov	r0, r5
 80123ae:	47b0      	blx	r6
 80123b0:	1c41      	adds	r1, r0, #1
 80123b2:	d1c8      	bne.n	8012346 <__sflush_r+0x36>
 80123b4:	682b      	ldr	r3, [r5, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d0c5      	beq.n	8012346 <__sflush_r+0x36>
 80123ba:	2b1d      	cmp	r3, #29
 80123bc:	d001      	beq.n	80123c2 <__sflush_r+0xb2>
 80123be:	2b16      	cmp	r3, #22
 80123c0:	d101      	bne.n	80123c6 <__sflush_r+0xb6>
 80123c2:	602f      	str	r7, [r5, #0]
 80123c4:	e7b1      	b.n	801232a <__sflush_r+0x1a>
 80123c6:	89a3      	ldrh	r3, [r4, #12]
 80123c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123cc:	81a3      	strh	r3, [r4, #12]
 80123ce:	e7ad      	b.n	801232c <__sflush_r+0x1c>
 80123d0:	690f      	ldr	r7, [r1, #16]
 80123d2:	2f00      	cmp	r7, #0
 80123d4:	d0a9      	beq.n	801232a <__sflush_r+0x1a>
 80123d6:	0793      	lsls	r3, r2, #30
 80123d8:	680e      	ldr	r6, [r1, #0]
 80123da:	bf08      	it	eq
 80123dc:	694b      	ldreq	r3, [r1, #20]
 80123de:	600f      	str	r7, [r1, #0]
 80123e0:	bf18      	it	ne
 80123e2:	2300      	movne	r3, #0
 80123e4:	eba6 0807 	sub.w	r8, r6, r7
 80123e8:	608b      	str	r3, [r1, #8]
 80123ea:	f1b8 0f00 	cmp.w	r8, #0
 80123ee:	dd9c      	ble.n	801232a <__sflush_r+0x1a>
 80123f0:	4643      	mov	r3, r8
 80123f2:	463a      	mov	r2, r7
 80123f4:	6a21      	ldr	r1, [r4, #32]
 80123f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80123f8:	4628      	mov	r0, r5
 80123fa:	47b0      	blx	r6
 80123fc:	2800      	cmp	r0, #0
 80123fe:	dc06      	bgt.n	801240e <__sflush_r+0xfe>
 8012400:	89a3      	ldrh	r3, [r4, #12]
 8012402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012406:	81a3      	strh	r3, [r4, #12]
 8012408:	f04f 30ff 	mov.w	r0, #4294967295
 801240c:	e78e      	b.n	801232c <__sflush_r+0x1c>
 801240e:	4407      	add	r7, r0
 8012410:	eba8 0800 	sub.w	r8, r8, r0
 8012414:	e7e9      	b.n	80123ea <__sflush_r+0xda>
 8012416:	bf00      	nop
 8012418:	20400001 	.word	0x20400001

0801241c <_fflush_r>:
 801241c:	b538      	push	{r3, r4, r5, lr}
 801241e:	690b      	ldr	r3, [r1, #16]
 8012420:	4605      	mov	r5, r0
 8012422:	460c      	mov	r4, r1
 8012424:	b1db      	cbz	r3, 801245e <_fflush_r+0x42>
 8012426:	b118      	cbz	r0, 8012430 <_fflush_r+0x14>
 8012428:	6983      	ldr	r3, [r0, #24]
 801242a:	b90b      	cbnz	r3, 8012430 <_fflush_r+0x14>
 801242c:	f7ff fa38 	bl	80118a0 <__sinit>
 8012430:	4b0c      	ldr	r3, [pc, #48]	; (8012464 <_fflush_r+0x48>)
 8012432:	429c      	cmp	r4, r3
 8012434:	d109      	bne.n	801244a <_fflush_r+0x2e>
 8012436:	686c      	ldr	r4, [r5, #4]
 8012438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801243c:	b17b      	cbz	r3, 801245e <_fflush_r+0x42>
 801243e:	4621      	mov	r1, r4
 8012440:	4628      	mov	r0, r5
 8012442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012446:	f7ff bf63 	b.w	8012310 <__sflush_r>
 801244a:	4b07      	ldr	r3, [pc, #28]	; (8012468 <_fflush_r+0x4c>)
 801244c:	429c      	cmp	r4, r3
 801244e:	d101      	bne.n	8012454 <_fflush_r+0x38>
 8012450:	68ac      	ldr	r4, [r5, #8]
 8012452:	e7f1      	b.n	8012438 <_fflush_r+0x1c>
 8012454:	4b05      	ldr	r3, [pc, #20]	; (801246c <_fflush_r+0x50>)
 8012456:	429c      	cmp	r4, r3
 8012458:	bf08      	it	eq
 801245a:	68ec      	ldreq	r4, [r5, #12]
 801245c:	e7ec      	b.n	8012438 <_fflush_r+0x1c>
 801245e:	2000      	movs	r0, #0
 8012460:	bd38      	pop	{r3, r4, r5, pc}
 8012462:	bf00      	nop
 8012464:	0801510c 	.word	0x0801510c
 8012468:	0801512c 	.word	0x0801512c
 801246c:	080150ec 	.word	0x080150ec

08012470 <_lseek_r>:
 8012470:	b538      	push	{r3, r4, r5, lr}
 8012472:	4c07      	ldr	r4, [pc, #28]	; (8012490 <_lseek_r+0x20>)
 8012474:	4605      	mov	r5, r0
 8012476:	4608      	mov	r0, r1
 8012478:	4611      	mov	r1, r2
 801247a:	2200      	movs	r2, #0
 801247c:	6022      	str	r2, [r4, #0]
 801247e:	461a      	mov	r2, r3
 8012480:	f7ee fd24 	bl	8000ecc <_lseek>
 8012484:	1c43      	adds	r3, r0, #1
 8012486:	d102      	bne.n	801248e <_lseek_r+0x1e>
 8012488:	6823      	ldr	r3, [r4, #0]
 801248a:	b103      	cbz	r3, 801248e <_lseek_r+0x1e>
 801248c:	602b      	str	r3, [r5, #0]
 801248e:	bd38      	pop	{r3, r4, r5, pc}
 8012490:	24004c80 	.word	0x24004c80

08012494 <__swhatbuf_r>:
 8012494:	b570      	push	{r4, r5, r6, lr}
 8012496:	460e      	mov	r6, r1
 8012498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801249c:	2900      	cmp	r1, #0
 801249e:	b096      	sub	sp, #88	; 0x58
 80124a0:	4614      	mov	r4, r2
 80124a2:	461d      	mov	r5, r3
 80124a4:	da07      	bge.n	80124b6 <__swhatbuf_r+0x22>
 80124a6:	2300      	movs	r3, #0
 80124a8:	602b      	str	r3, [r5, #0]
 80124aa:	89b3      	ldrh	r3, [r6, #12]
 80124ac:	061a      	lsls	r2, r3, #24
 80124ae:	d410      	bmi.n	80124d2 <__swhatbuf_r+0x3e>
 80124b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124b4:	e00e      	b.n	80124d4 <__swhatbuf_r+0x40>
 80124b6:	466a      	mov	r2, sp
 80124b8:	f000 f864 	bl	8012584 <_fstat_r>
 80124bc:	2800      	cmp	r0, #0
 80124be:	dbf2      	blt.n	80124a6 <__swhatbuf_r+0x12>
 80124c0:	9a01      	ldr	r2, [sp, #4]
 80124c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80124c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80124ca:	425a      	negs	r2, r3
 80124cc:	415a      	adcs	r2, r3
 80124ce:	602a      	str	r2, [r5, #0]
 80124d0:	e7ee      	b.n	80124b0 <__swhatbuf_r+0x1c>
 80124d2:	2340      	movs	r3, #64	; 0x40
 80124d4:	2000      	movs	r0, #0
 80124d6:	6023      	str	r3, [r4, #0]
 80124d8:	b016      	add	sp, #88	; 0x58
 80124da:	bd70      	pop	{r4, r5, r6, pc}

080124dc <__smakebuf_r>:
 80124dc:	898b      	ldrh	r3, [r1, #12]
 80124de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80124e0:	079d      	lsls	r5, r3, #30
 80124e2:	4606      	mov	r6, r0
 80124e4:	460c      	mov	r4, r1
 80124e6:	d507      	bpl.n	80124f8 <__smakebuf_r+0x1c>
 80124e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80124ec:	6023      	str	r3, [r4, #0]
 80124ee:	6123      	str	r3, [r4, #16]
 80124f0:	2301      	movs	r3, #1
 80124f2:	6163      	str	r3, [r4, #20]
 80124f4:	b002      	add	sp, #8
 80124f6:	bd70      	pop	{r4, r5, r6, pc}
 80124f8:	ab01      	add	r3, sp, #4
 80124fa:	466a      	mov	r2, sp
 80124fc:	f7ff ffca 	bl	8012494 <__swhatbuf_r>
 8012500:	9900      	ldr	r1, [sp, #0]
 8012502:	4605      	mov	r5, r0
 8012504:	4630      	mov	r0, r6
 8012506:	f7ff faab 	bl	8011a60 <_malloc_r>
 801250a:	b948      	cbnz	r0, 8012520 <__smakebuf_r+0x44>
 801250c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012510:	059a      	lsls	r2, r3, #22
 8012512:	d4ef      	bmi.n	80124f4 <__smakebuf_r+0x18>
 8012514:	f023 0303 	bic.w	r3, r3, #3
 8012518:	f043 0302 	orr.w	r3, r3, #2
 801251c:	81a3      	strh	r3, [r4, #12]
 801251e:	e7e3      	b.n	80124e8 <__smakebuf_r+0xc>
 8012520:	4b0d      	ldr	r3, [pc, #52]	; (8012558 <__smakebuf_r+0x7c>)
 8012522:	62b3      	str	r3, [r6, #40]	; 0x28
 8012524:	89a3      	ldrh	r3, [r4, #12]
 8012526:	6020      	str	r0, [r4, #0]
 8012528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801252c:	81a3      	strh	r3, [r4, #12]
 801252e:	9b00      	ldr	r3, [sp, #0]
 8012530:	6163      	str	r3, [r4, #20]
 8012532:	9b01      	ldr	r3, [sp, #4]
 8012534:	6120      	str	r0, [r4, #16]
 8012536:	b15b      	cbz	r3, 8012550 <__smakebuf_r+0x74>
 8012538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801253c:	4630      	mov	r0, r6
 801253e:	f000 f833 	bl	80125a8 <_isatty_r>
 8012542:	b128      	cbz	r0, 8012550 <__smakebuf_r+0x74>
 8012544:	89a3      	ldrh	r3, [r4, #12]
 8012546:	f023 0303 	bic.w	r3, r3, #3
 801254a:	f043 0301 	orr.w	r3, r3, #1
 801254e:	81a3      	strh	r3, [r4, #12]
 8012550:	89a3      	ldrh	r3, [r4, #12]
 8012552:	431d      	orrs	r5, r3
 8012554:	81a5      	strh	r5, [r4, #12]
 8012556:	e7cd      	b.n	80124f4 <__smakebuf_r+0x18>
 8012558:	08011869 	.word	0x08011869

0801255c <__malloc_lock>:
 801255c:	4770      	bx	lr

0801255e <__malloc_unlock>:
 801255e:	4770      	bx	lr

08012560 <_read_r>:
 8012560:	b538      	push	{r3, r4, r5, lr}
 8012562:	4c07      	ldr	r4, [pc, #28]	; (8012580 <_read_r+0x20>)
 8012564:	4605      	mov	r5, r0
 8012566:	4608      	mov	r0, r1
 8012568:	4611      	mov	r1, r2
 801256a:	2200      	movs	r2, #0
 801256c:	6022      	str	r2, [r4, #0]
 801256e:	461a      	mov	r2, r3
 8012570:	f7ee fc4c 	bl	8000e0c <_read>
 8012574:	1c43      	adds	r3, r0, #1
 8012576:	d102      	bne.n	801257e <_read_r+0x1e>
 8012578:	6823      	ldr	r3, [r4, #0]
 801257a:	b103      	cbz	r3, 801257e <_read_r+0x1e>
 801257c:	602b      	str	r3, [r5, #0]
 801257e:	bd38      	pop	{r3, r4, r5, pc}
 8012580:	24004c80 	.word	0x24004c80

08012584 <_fstat_r>:
 8012584:	b538      	push	{r3, r4, r5, lr}
 8012586:	4c07      	ldr	r4, [pc, #28]	; (80125a4 <_fstat_r+0x20>)
 8012588:	2300      	movs	r3, #0
 801258a:	4605      	mov	r5, r0
 801258c:	4608      	mov	r0, r1
 801258e:	4611      	mov	r1, r2
 8012590:	6023      	str	r3, [r4, #0]
 8012592:	f7ee fc80 	bl	8000e96 <_fstat>
 8012596:	1c43      	adds	r3, r0, #1
 8012598:	d102      	bne.n	80125a0 <_fstat_r+0x1c>
 801259a:	6823      	ldr	r3, [r4, #0]
 801259c:	b103      	cbz	r3, 80125a0 <_fstat_r+0x1c>
 801259e:	602b      	str	r3, [r5, #0]
 80125a0:	bd38      	pop	{r3, r4, r5, pc}
 80125a2:	bf00      	nop
 80125a4:	24004c80 	.word	0x24004c80

080125a8 <_isatty_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	4c06      	ldr	r4, [pc, #24]	; (80125c4 <_isatty_r+0x1c>)
 80125ac:	2300      	movs	r3, #0
 80125ae:	4605      	mov	r5, r0
 80125b0:	4608      	mov	r0, r1
 80125b2:	6023      	str	r3, [r4, #0]
 80125b4:	f7ee fc7f 	bl	8000eb6 <_isatty>
 80125b8:	1c43      	adds	r3, r0, #1
 80125ba:	d102      	bne.n	80125c2 <_isatty_r+0x1a>
 80125bc:	6823      	ldr	r3, [r4, #0]
 80125be:	b103      	cbz	r3, 80125c2 <_isatty_r+0x1a>
 80125c0:	602b      	str	r3, [r5, #0]
 80125c2:	bd38      	pop	{r3, r4, r5, pc}
 80125c4:	24004c80 	.word	0x24004c80

080125c8 <_init>:
 80125c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ca:	bf00      	nop
 80125cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ce:	bc08      	pop	{r3}
 80125d0:	469e      	mov	lr, r3
 80125d2:	4770      	bx	lr

080125d4 <_fini>:
 80125d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125d6:	bf00      	nop
 80125d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125da:	bc08      	pop	{r3}
 80125dc:	469e      	mov	lr, r3
 80125de:	4770      	bx	lr
